{"version":3,"file":"animations-DN2FwynT.js","sources":["../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/utils/use-constant.mjs","../../node_modules/framer-motion/dist/es/utils/is-browser.mjs","../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","../../node_modules/framer-motion/dist/es/context/PresenceContext.mjs","../../node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/utils.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../../node_modules/framer-motion/dist/es/context/LazyContext.mjs","../../node_modules/framer-motion/dist/es/motion/features/definitions.mjs","../../node_modules/framer-motion/dist/es/motion/features/load-features.mjs","../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","../../node_modules/framer-motion/dist/es/render/components/create-proxy.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","../../node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","../../node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","../../node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../../node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","../../node_modules/framer-motion/dist/es/motion/index.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/html/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","../../node_modules/framer-motion/dist/es/render/svg/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","../../node_modules/framer-motion/dist/es/render/dom/use-render.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/html/config-motion.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","../../node_modules/framer-motion/dist/es/render/components/create-factory.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","../../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","../../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../../node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs","../../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../../node_modules/framer-motion/dist/es/events/event-info.mjs","../../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../../node_modules/framer-motion/dist/es/utils/get-context-window.mjs","../../node_modules/framer-motion/dist/es/utils/distance.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../../node_modules/framer-motion/dist/es/projection/node/state.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../../node_modules/framer-motion/dist/es/animation/animate/single-value.mjs","../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../../node_modules/framer-motion/dist/es/utils/delay.mjs","../../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../../node_modules/framer-motion/dist/es/gestures/hover.mjs","../../node_modules/framer-motion/dist/es/gestures/focus.mjs","../../node_modules/framer-motion/dist/es/gestures/press.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../../node_modules/framer-motion/dist/es/render/store.mjs","../../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/create.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs","../../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs"],"sourcesContent":["\"use client\";\nimport { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","const isBrowser = typeof window !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = \n/* @__PURE__ */ createContext(null);\n\nexport { PresenceContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { isHTMLElement } from 'motion-dom';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const parent = element.offsetParent;\n            const parentWidth = isHTMLElement(parent)\n                ? parent.offsetWidth || 0\n                : 0;\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n            size.right = parentWidth - size.width - size.left;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent, anchorX }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        right: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left, right } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        const x = anchorX === \"left\" ? `left: ${left}` : `right: ${right}`;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            ${x}px !important;\n            top: ${top}px !important;\n          }\n        `);\n        }\n        return () => {\n            if (document.head.contains(style)) {\n                document.head.removeChild(style);\n            }\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, anchorX, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    let isReusedContext = true;\n    let context = useMemo(() => {\n        isReusedContext = false;\n        return {\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: (childId) => {\n                presenceChildren.set(childId, true);\n                for (const isComplete of presenceChildren.values()) {\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n                onExitComplete && onExitComplete();\n            },\n            register: (childId) => {\n                presenceChildren.set(childId, false);\n                return () => presenceChildren.delete(childId);\n            },\n        };\n    }, [isPresent, presenceChildren, onExitComplete]);\n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    if (presenceAffectsLayout && isReusedContext) {\n        context = { ...context };\n    }\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = (jsx(PopChild, { isPresent: isPresent, anchorX: anchorX, children: children }));\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence(subscribe = true) {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => {\n        if (subscribe) {\n            return register(id);\n        }\n    }, [subscribe]);\n    const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { Children, isValidElement } from 'react';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n\nexport { getChildKey, onlyElements };\n","\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, anchorX = \"left\", }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return null;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender?.();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && safeToRemove?.();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { warnOnce } from 'motion-utils';\n\nfunction createDOMMotionComponentProxy(componentFactory) {\n    if (typeof Proxy === \"undefined\") {\n        return componentFactory;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    const deprecatedFactoryFunction = (...args) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return componentFactory(...args);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            if (key === \"create\")\n                return componentFactory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, componentFactory(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createDOMMotionComponentProxy };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst MotionContext = /* @__PURE__ */ createContext({});\n\nexport { MotionContext };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","import { microtask } from 'motion-dom';\nimport { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = useRef(false);\n    useInsertionEffect(() => {\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */\n        if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !window.MotionHandoffIsComplete?.(optimisedAppearId) &&\n        window.MotionHasOptimisedAnimation?.(optimisedAppearId));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(() => {\n                window.MotionHandoffMarkAsComplete?.(optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n    });\n    return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, layoutCrossfade, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        crossfade: layoutCrossfade,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n","\"use client\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { warning, invariant } from 'motion-utils';\nimport { forwardRef, useContext } from 'react';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { featureDefinitions } from './features/definitions.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));\n    }\n    MotionComponent.displayName = `motion.${typeof Component === \"string\"\n        ? Component\n        : `create(${Component.displayName ?? Component.name ?? \"\"})`}`;\n    const ForwardRefMotionComponent = forwardRef(MotionComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    const isStrict = useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" &&\n        preloadedFeatures &&\n        isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict\n            ? warning(false, strictMessage)\n            : invariant(false, strictMessage);\n    }\n}\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout)\n        return {};\n    const combined = { ...drag, ...layout };\n    return {\n        MeasureLayout: drag?.isEnabled(props) || layout?.isEnabled(props)\n            ? combined.MeasureLayout\n            : undefined,\n        ProjectionNode: combined.ProjectionNode,\n    };\n}\n\nexport { createRendererMotionComponent };\n","import { isCSSVariableName } from 'motion-dom';\n\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    for (const key in correctors) {\n        scaleCorrectors[key] = correctors[key];\n        if (isCSSVariableName(key)) {\n            scaleCorrectors[key].isCSSVariable = true;\n        }\n    }\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","import { transformProps } from 'motion-dom';\nimport { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","import { transformProps, isCSSVariableName, getValueAsType, numberValueTypes } from 'motion-dom';\nimport { buildTransform } from './build-transform.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { isMotionValue } from 'motion-dom';\nimport { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","import { px } from 'motion-dom';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate, styleProp) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style } = state;\n    /**\n     * However, we apply transforms as CSS transforms.\n     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.\n     */\n    if (attrs.transform) {\n        style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    if (style.transform || attrs.transformOrigin) {\n        style.transformOrigin = attrs.transformOrigin ?? \"50% 50%\";\n        delete attrs.transformOrigin;\n    }\n    if (style.transform) {\n        /**\n         * SVG's element transform-origin uses its own median as a reference.\n         * Therefore, transformBox becomes a fill-box\n         */\n        style.transformBox = styleProp?.transformBox ?? \"fill-box\";\n        delete attrs.transformBox;\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate, props.style);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","import { isMotionValue } from 'motion-dom';\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement?.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { isMotionValue } from 'motion-dom';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    return isMotionValue(value) ? value.get() : value;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        for (let i = 0; i < list.length; i++) {\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for (const key in target) {\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */\n                        const index = isInitialAnimationBlocked\n                            ? valueTarget.length - 1\n                            : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for (const key in transitionEnd) {\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { isMotionValue } from 'motion-dom';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            visualElement?.getValue(key)?.liveStyle !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isMotionValue, transformPropOrder } from 'motion-dom';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n    }),\n};\n\nexport { svgMotionConfig };\n","import { createRendererMotionComponent } from '../../motion/index.mjs';\nimport { createUseRender } from '../dom/use-render.mjs';\nimport { isSVGComponent } from '../dom/utils/is-svg-component.mjs';\nimport { htmlMotionConfig } from '../html/config-motion.mjs';\nimport { svgMotionConfig } from '../svg/config-motion.mjs';\n\nfunction createMotionComponentFactory(preloadedFeatures, createVisualElement) {\n    return function createMotionComponent(Component, { forwardMotionProps } = { forwardMotionProps: false }) {\n        const baseConfig = isSVGComponent(Component)\n            ? svgMotionConfig\n            : htmlMotionConfig;\n        const config = {\n            ...baseConfig,\n            preloadedFeatures,\n            useRender: createUseRender(forwardMotionProps),\n            createVisualElement,\n            Component,\n        };\n        return createRendererMotionComponent(config);\n    };\n}\n\nexport { createMotionComponentFactory };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { motionValue } from 'motion-dom';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction resolveFinalValueInKeyframes(v) {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","import { isMotionValue } from 'motion-dom';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { MotionGlobalConfig } from 'motion-utils';\nimport { isWillChangeMotionValue } from './is.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    const willChange = visualElement.getValue(\"willChange\");\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n    else if (!willChange && MotionGlobalConfig.WillChange) {\n        const newWillChange = new MotionGlobalConfig.WillChange(\"auto\");\n        visualElement.addValue(\"willChange\", newWillChange);\n        newWillChange.add(key);\n    }\n}\n\nexport { addValueToWillChange };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from 'motion-dom';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n\nexport { isTransitionDefined };\n","import { getValueTransition, frame, JSAnimation, AsyncMotionValueAnimation } from 'motion-dom';\nimport { secondsToMilliseconds, MotionGlobalConfig } from 'motion-utils';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    const options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unique transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        Object.assign(options, getDefaultTransition(name, options));\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    options.duration && (options.duration = secondsToMilliseconds(options.duration));\n    options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay));\n    /**\n     * Support deprecated way to set initial value. Prefer keyframe syntax.\n     */\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (MotionGlobalConfig.instantAnimations ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If the transition type or easing has been explicitly set by the user\n     * then we don't want to allow flattening the animation.\n     */\n    options.allowFlatten = !valueTransition.type && !valueTransition.ease;\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            return;\n        }\n    }\n    return valueTransition.isSync\n        ? new JSAnimation(options)\n        : new AsyncMotionValueAnimation(options);\n};\n\nexport { animateMotionValue };\n","import { getValueTransition, frame, positionalKeys } from 'motion-dom';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, visualElement.latestValues[key] ?? null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If the value is already at the defined target, skip the animation.\n         */\n        const currentValue = value.get();\n        if (currentValue !== undefined &&\n            !value.isAnimating &&\n            !Array.isArray(valueTarget) &&\n            valueTarget === currentValue &&\n            !valueTransition.velocity) {\n            continue;\n        }\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? visualElement.presenceContext?.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement)\n        return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent\n            ? getVariantContext(visualElement.parent) || {}\n            : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\n\nexport { getVariantContext };\n","import { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { getVariantContext } from './get-variant-context.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? visualElement.presenceContext?.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */\n            const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            /**\n             * If the initial prop contains a transition we can use that, otherwise\n             * allow the animation function to use the visual element's default.\n             */\n            if (typeof props.initial !== \"boolean\") {\n                const initialTransition = resolveVariant(visualElement, Array.isArray(props.initial)\n                    ? props.initial[0]\n                    : props.initial);\n                if (initialTransition && initialTransition.transition) {\n                    fallbackAnimation.transition = initialTransition.transition;\n                }\n            }\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget ?? null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        visualElement.variantChildren?.forEach((child) => child.animationState?.setActive(type, isActive));\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        this.node.animationState.reset();\n        this.unmountControls?.();\n    }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => {\n                onExitComplete(this.id);\n            });\n        }\n    }\n    mount() {\n        const { register, onExitComplete } = this.node.presenceContext || {};\n        if (onExitComplete) {\n            onExitComplete(this.id);\n        }\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { isPrimaryPointer } from 'motion-dom';\n\nfunction extractEventInfo(event) {\n    return {\n        point: {\n            x: event.pageX,\n            y: event.pageY,\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","import { mixNumber } from 'motion-dom';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from 'motion-dom';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/motiondivision/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { frame, isPrimaryPointer, cancelFrame, frameData } from 'motion-dom';\nimport { pipe, secondsToMilliseconds, millisecondsToSeconds } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false, } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from 'motion-dom';\nimport { progress, clamp } from 'motion-utils';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","import { frame, mixNumber, setDragLock, percent } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === \"paused\" &&\n            this.getAxisMotionValue(axis).animation?.play());\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : this.visualElement.projection?.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());\n    }\n    getAnimationState(axis) {\n        return this.getAxisMotionValue(axis).animation?.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from 'motion-utils';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { frame } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { PanSession } from './PanSession.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from 'motion-dom';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { complex, mixNumber } from 'motion-dom';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { frame, microtask } from 'motion-dom';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const { projection } = visualElement;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined ||\n            prevProps.isPresent !== isPresent) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { isMotionValue, motionValue } from 'motion-dom';\nimport { animateMotionValue } from '../interfaces/motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from 'motion-utils';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { time, frame, cancelFrame } from 'motion-dom';\nimport { secondsToMilliseconds } from 'motion-utils';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.setup(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\nfunction delayInSeconds(callback, timeout) {\n    return delay(callback, secondsToMilliseconds(timeout));\n}\n\nexport { delay, delayInSeconds };\n","import { mixNumber, percent, px } from 'motion-dom';\nimport { progress, circOut, noop } from 'motion-utils';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, lead.opacity ?? 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity ?? 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity ?? 1, lead.opacity ?? 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { percent, mixNumber } from 'motion-dom';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = latestTransform?.z || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","import { statsBuffer, isSVGElement, isSVGSVGElement, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, frame, activeAnimations, motionValue, mixNumber } from 'motion-dom';\nimport { SubscriptionManager, clamp, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (this.root.hasTreeAnimated && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                        /**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            this.eventHandlers.clear();\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement && this.instance) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                this.instance &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation?.stop();\n            this.resumingFrom?.currentAnimation?.stop();\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.motionValue || (this.motionValue = motionValue(0));\n                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {\n                    ...options,\n                    isSync: true,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        styles[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { hover, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handleHoverEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileHover) {\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onHover\" + lifecycle);\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass HoverGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = hover(current, (_element, startEvent) => {\n            handleHoverEvent(this.node, startEvent, \"Start\");\n            return (endEvent) => handleHoverEvent(this.node, endEvent, \"End\");\n        });\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { pipe } from 'motion-utils';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n        return;\n    }\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (_element, startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { isMotionValue, motionValue } from 'motion-dom';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { KeyframeResolver, time, frame, isMotionValue, cancelFrame, transformProps, motionValue, findValueType, complex, getAnimatableNone } from 'motion-dom';\nimport { warnOnce, isNumericalString, isZeroValueString, SubscriptionManager } from 'motion-utils';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        if (valueIsTransform && this.onBindTransform) {\n            this.onBindTransform();\n        }\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.getBaseTargetFromProps(this.props, key) ??\n                this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, this.presenceContext?.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { DOMKeyframesResolver, isMotionValue } from 'motion-dom';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current) {\n                    this.current.textContent = `${latest}`;\n                }\n            });\n        }\n    }\n}\n\nexport { DOMVisualElement };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","import { transformProps, defaultTransformValue, readTransformValue, isCSSVariableName } from 'motion-dom';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            return this.projection?.isProjecting\n                ? defaultTransformValue(key)\n                : readTransformValue(instance, key);\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { transformProps, getDefaultValueType } from 'motion-dom';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate, props.style);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { animations } from '../../../motion/features/animations.mjs';\nimport { drag } from '../../../motion/features/drag.mjs';\nimport { gestureAnimations } from '../../../motion/features/gestures.mjs';\nimport { layout } from '../../../motion/features/layout.mjs';\nimport { createMotionComponentFactory } from '../create-factory.mjs';\nimport { createDomVisualElement } from '../../dom/create-visual-element.mjs';\n\nconst createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n}, createDomVisualElement);\n\nexport { createMotionComponent };\n","import { createDOMMotionComponentProxy } from '../create-proxy.mjs';\nimport { createMotionComponent } from './create.mjs';\n\nconst motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);\n\nexport { motion };\n","import { invariant } from 'motion-utils';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n"],"names":["LayoutGroupContext","createContext","useConstant","init","ref","useRef","isBrowser","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","PresenceContext","MotionConfigContext","p","PopChildMeasure","React.Component","prevProps","element","parent","parentWidth","isHTMLElement","size","PopChild","children","isPresent","anchorX","id","useId","nonce","useContext","useInsertionEffect","width","height","top","left","right","x","style","jsx","React.cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","isReusedContext","context","useMemo","childId","isComplete","_","key","React.useEffect","usePresence","subscribe","register","safeToRemove","useCallback","getChildKey","child","onlyElements","filtered","Children","isValidElement","AnimatePresence","propagate","isParentPresent","presentChildren","presentKeys","isInitialRender","pendingPresentChildren","exitComplete","diffedChildren","setDiffedChildren","useState","renderedChildren","setRenderedChildren","i","exitingChildren","nextChildren","forceRender","Fragment","onExit","isEveryExitComplete","isExitComplete","LazyContext","featureProps","featureDefinitions","props","name","loadFeatures","features","validMotionProps","isValidMotionProp","shouldForward","loadExternalIsValidProp","isValidProp","filterProps","isDom","forwardMotionProps","filteredProps","createDOMMotionComponentProxy","componentFactory","componentCache","deprecatedFactoryFunction","args","_target","MotionContext","isAnimationControls","v","isVariantLabel","variantPriorityOrder","variantProps","isControllingVariants","isVariantNode","getCurrentTreeVariants","animate","useCreateMotionContext","variantLabelsAsDependency","prop","motionComponentSymbol","isRefObject","useMotionRef","visualState","visualElement","externalRef","instance","camelToDash","str","optimizedAppearDataId","optimizedAppearDataAttribute","SwitchLayoutGroupContext","useVisualElement","Component","createVisualElement","ProjectionNodeConstructor","lazyContext","presenceContext","reducedMotionConfig","visualElementRef","initialLayoutGroupConfig","createProjectionNode","isMounted","optimisedAppearId","wantsHandoff","microtask","initialPromotionConfig","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","layoutCrossfade","getClosestProjectingNode","createRendererMotionComponent","preloadedFeatures","useRender","useVisualState","MotionComponent","MeasureLayout","configAndProps","useLayoutId","isStatic","useStrictMode","layoutProjection","getProjectionFunctionality","jsxs","ForwardRefMotionComponent","forwardRef","layoutGroupId","combined","scaleCorrectors","addScaleCorrector","correctors","isCSSVariableName","isForcedMotionValue","transformProps","translateAlias","numTransforms","transformPropOrder","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","value","valueIsDefault","valueAsType","getValueAsType","numberValueTypes","transformName","buildHTMLStyles","state","vars","transformOrigin","hasTransform","hasTransformOrigin","originX","originY","originZ","createHtmlRenderState","copyRawValuesOnly","target","source","isMotionValue","useInitialMotionValues","useStyle","styleProp","useHTMLProps","htmlProps","dashKeys","camelKeys","buildSVGPath","attrs","length","spacing","offset","useDashCase","keys","px","pathLength","pathSpacing","buildSVGAttrs","attrX","attrY","attrScale","pathOffset","latest","isSVGTag","createSvgRenderState","tag","useSVGProps","_isStatic","visualProps","rawStyles","lowercaseSVGElements","isSVGComponent","createUseRender","elementProps","createElement","getValueState","resolveVariantFromProps","definition","current","velocity","resolveMotionValue","makeState","scrapeMotionValuesFromProps","createRenderState","makeLatestValues","makeUseVisualState","config","make","scrapeMotionValues","values","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","index","newValues","htmlMotionConfig","scrapeMotionValuesFromProps$1","targetKey","svgMotionConfig","createMotionComponentFactory","resolveVariant","isKeyframesTarget","setMotionValue","motionValue","resolveFinalValueInKeyframes","setTarget","isWillChangeMotionValue","addValueToWillChange","willChange","MotionGlobalConfig","newWillChange","getOptimisedAppearId","isNotNull","getFinalKeyframe","keyframes","repeat","repeatType","finalKeyframe","resolvedKeyframes","underDampedSpring","criticallyDampedSpring","keyframesTransition","ease","getDefaultTransition","valueKey","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","repeatDelay","from","elapsed","animateMotionValue","isHandoff","onComplete","valueTransition","getValueTransition","delay","secondsToMilliseconds","options","shouldSkip","frame","JSAnimation","AsyncMotionValueAnimation","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","animateTarget","targetAndTransition","transitionOverride","type","animations","animationTypeState","currentValue","appearId","startTime","positionalKeys","animation","animateVariant","variant","getAnimation","getChildAnimations","forwardDelay","animateChildren","first","last","maxStaggerDuration","generateStaggerDuration","sortByTreeOrder","a","b","animateVisualElement","resolvedDefinition","shallowCompare","next","prev","prevLength","numVariantProps","getVariantContext","reversePriorityOrder","numAnimationTypes","animateList","createAnimationState","createState","buildResolvedTypeValues","acc","setAnimateFunction","makeAnimator","animateChanges","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","variantDidChange","checkVariantsDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","prevResolvedValues","allKeys","markToAnimate","valueHasChanged","fallbackAnimation","initialTransition","fallbackTarget","shouldAnimate","setActive","isActive","createTypeState","Feature","node","AnimationFeature","prevAnimate","ExitAnimationFeature","prevIsPresent","exitAnimation","addDomEvent","eventName","handler","extractEventInfo","event","addPointerInfo","isPrimaryPointer","addPointerEvent","convertBoundingBoxToBox","bottom","convertBoxToBoundingBox","y","transformBoxPoints","point","transformPoint","topLeft","bottomRight","SCALE_PRECISION","SCALE_MIN","SCALE_MAX","TRANSLATE_PRECISION","TRANSLATE_MIN","TRANSLATE_MAX","calcLength","axis","isNear","maxDistance","calcAxisDelta","delta","origin","mixNumber","calcBoxDelta","calcRelativeAxis","relative","calcRelativeBox","calcRelativeAxisPosition","calcRelativePosition","createAxisDelta","createDelta","createAxis","createBox","eachAxis","callback","isIdentityScale","scale","hasScale","scaleX","scaleY","has2DTranslate","is2DTranslate","scalePoint","originPoint","distanceFromOrigin","scaled","applyPointDelta","translate","boxScale","applyAxisDelta","applyBoxDelta","box","TREE_SCALE_SNAP_MIN","TREE_SCALE_SNAP_MAX","applyTreeDeltas","treeScale","treePath","isSharedTransition","treeLength","transformBox","translateAxis","distance","transformAxis","axisTranslate","axisScale","axisOrigin","measureViewportBox","measurePageBox","rootProjectionNode","transformPagePoint","viewportBox","scroll","getContextWindow","distance2D","xDelta","yDelta","PanSession","handlers","contextWindow","dragSnapToOrigin","info","getPanInfo","isPanStarted","isDistancePastThreshold","timestamp","frameData","onStart","onMove","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","pipe","cancelFrame","subtractPoint","history","lastDevicePoint","startDevicePoint","getVelocity","timeDelta","timestampedPoint","lastPoint","time","millisecondsToSeconds","currentVelocity","applyConstraints","min","max","elastic","calcRelativeAxisConstraints","calcRelativeConstraints","layoutBox","calcViewportAxisConstraints","layoutAxis","constraintsAxis","calcViewportConstraints","constraintsBox","calcOrigin","sourceLength","targetLength","progress","clamp","rebaseAxisConstraints","constraints","relativeConstraints","defaultElastic","resolveDragElastic","dragElastic","resolveAxisElastic","minLabel","maxLabel","resolvePointElastic","label","elementDragControls","VisualElementDragControls","originEvent","snapToCursor","dragPropagation","onDragStart","setDragLock","percent","projection","measuredAxis","animationState","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","isDragging","onDragEnd","_point","shouldDrag","axisValue","prevConstraints","onMeasureDragConstraints","constraintsElement","measuredConstraints","userConstraints","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","bounceStiffness","bounceDamping","inertia","dragKey","externalMotionValue","boxProgress","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","direction","currentDirection","lockThreshold","DragGesture","noop","dragControls","asyncHandler","PanGesture","pointerDownEvent","onPanSessionStart","onPanStart","onPan","onPanEnd","globalProjectionState","pixelsToPercent","pixels","correctBorderRadius","correctBoxShadow","projectionDelta","original","shadow","complex","template","xScale","yScale","averageScale","MeasureLayoutWithContext","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","layoutDependency","stack","promoteContext","animateSingleValue","motionValue$1","compareByDepth","FlatTree","addUniqueItem","removeItem","timeout","start","checkElapsed","borders","numBorders","asNumber","isPx","mixValues","follow","lead","shouldCrossfadeOpacity","isOnlyMember","easeCrossfadeIn","easeCrossfadeOut","borderLabel","followRadius","getRadius","leadRadius","radiusName","compress","circOut","easing","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisDelta","sourceAxis","removeAxisTransforms","transforms","scaleKey","originKey","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","boxEquals","axisEqualsRounded","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","prevLead","indexOfNode","member","preserveFollowOpacity","crossfade","resumingFrom","buildProjectionTransform","latestTransform","xTranslate","yTranslate","zTranslate","transformPerspective","rotate","rotateX","rotateY","skewX","skewY","elementScaleX","elementScaleY","transformAxes","hiddenVisibility","animationTarget","resetDistortingTransform","sharedAnimationValues","cancelTreeOptimisedTransformAnimations","projectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","SubscriptionManager","subscriptionManager","isSVGElement","isSVGSVGElement","cancelDelay","resizeUnblockUpdate","finishAnimation","hasRelativeLayoutChanged","newLayout","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","hasTargetChanged","hasOnlyRelativeTargetChanged","animationOptions","resetSkewAndRotation","shouldNotifyListeners","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","frameSteps","clearSnapshot","removeLeadSnapshots","prevLayout","phase","needsMeasurement","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","roundBox","checkNodeWasScrollRoot","boxWithoutScroll","transformOnly","withTransforms","boxWithoutTransform","nodeBox","forceRecalculation","isShared","relativeParent","canSkip","prevTreeScaleX","prevTreeScaleY","notifyAll","snapshot","snapshotLatestValues","mixedValues","targetDelta","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","hasOpacityCrossfade","prevRelativeTarget","mixAxisDelta","mixBox","targetWithTransforms","shouldAnimatePositionOnly","xLength","yLength","needsReset","hasDistortingTransform","resetValues","styles","emptyStyles","valuesToRender","correct","applyTo","isCSSVariable","corrected","num","measuredLayout","animationType","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","output","mixAxis","to","userAgentContains","string","roundPoint","roundAxis","DocumentProjectionNode","notify","HTMLProjectionNode","documentNode","handleHoverEvent","lifecycle","HoverGesture","hover","_element","startEvent","endEvent","FocusGesture","isFocusVisible","handlePressEvent","PressGesture","press","success","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","initIntersectionObserver","root","lookupRoot","rootObservers","observeIntersection","rootInteresectionObserver","thresholdNames","InViewFeature","viewport","rootMargin","amount","once","onIntersectionUpdate","isIntersecting","onViewportEnter","onViewportLeave","hasViewportOptionChanged","prevViewport","gestureAnimations","prefersReducedMotion","hasReducedMotionListener","initPrefersReducedMotion","motionMediaQuery","setReducedMotionPreferences","visualElementStore","updateMotionValuesFromProps","nextValue","prevValue","existingValue","latestValue","propEventHandlers","VisualElement","_props","_prevProps","_visualElement","blockInitialAnimation","KeyframeResolver","renderState","initialMotionValues","remove","feature","valueIsTransform","removeOnChange","removeOnRenderRequest","removeSyncCheck","other","featureDefinition","isEnabled","FeatureConstructor","listenerName","listener","closestVariantNode","unsubscribe","defaultValue","isNumericalString","isZeroValueString","findValueType","getAnimatableNone","valueFromInitial","DOMVisualElement","DOMKeyframesResolver","renderHTML","getComputedStyle","HTMLVisualElement","defaultTransformValue","readTransformValue","computedStyle","camelCaseAttributes","renderSVG","_styleProp","SVGVisualElement","defaultType","getDefaultValueType","createDomVisualElement","createMotionComponent","motion","stopAnimation","setVariants","variantLabels","setValues","animationControls","subscribers","controls","useAnimationControls","useAnimation"],"mappings":"wcAGA,MAAMA,GAAqBC,EAAa,cAAC,EAAE,ECM3C,SAASC,GAAYC,EAAM,CACvB,MAAMC,EAAMC,EAAM,OAAC,IAAI,EACvB,OAAID,EAAI,UAAY,OAChBA,EAAI,QAAUD,EAAM,GAEjBC,EAAI,OACf,CCfA,MAAME,GAAY,OAAO,OAAW,ICG9BC,GAA4BD,GAAYE,EAAAA,gBAAkBC,EAAS,UCGnEC,GACUT,EAAAA,cAAc,IAAI,ECD5BU,GAAsBV,EAAAA,cAAc,CACtC,mBAAqBW,GAAMA,EAC3B,SAAU,GACV,cAAe,OACnB,CAAC,ECCD,MAAMC,WAAwBC,EAAAA,SAAgB,CAC1C,wBAAwBC,EAAW,CAC/B,MAAMC,EAAU,KAAK,MAAM,SAAS,QACpC,GAAIA,GAAWD,EAAU,WAAa,CAAC,KAAK,MAAM,UAAW,CACzD,MAAME,EAASD,EAAQ,aACjBE,EAAcC,GAAcF,CAAM,GAClCA,EAAO,aAAe,EAEtBG,EAAO,KAAK,MAAM,QAAQ,QAChCA,EAAK,OAASJ,EAAQ,cAAgB,EACtCI,EAAK,MAAQJ,EAAQ,aAAe,EACpCI,EAAK,IAAMJ,EAAQ,UACnBI,EAAK,KAAOJ,EAAQ,WACpBI,EAAK,MAAQF,EAAcE,EAAK,MAAQA,EAAK,IACzD,CACQ,OAAO,IACf,CAII,oBAAqB,CAAA,CACrB,QAAS,CACL,OAAO,KAAK,MAAM,QAC1B,CACA,CACA,SAASC,GAAS,CAAE,SAAAC,EAAU,UAAAC,EAAW,QAAAC,CAAO,EAAI,CAChD,MAAMC,EAAKC,EAAAA,MAAO,EACZtB,EAAMC,EAAM,OAAC,IAAI,EACjBe,EAAOf,EAAAA,OAAO,CAChB,MAAO,EACP,OAAQ,EACR,IAAK,EACL,KAAM,EACN,MAAO,CACf,CAAK,EACK,CAAE,MAAAsB,CAAK,EAAKC,EAAU,WAACjB,EAAmB,EAUhDkB,OAAAA,EAAAA,mBAAmB,IAAM,CACrB,KAAM,CAAE,MAAAC,EAAO,OAAAC,EAAQ,IAAAC,EAAK,KAAAC,EAAM,MAAAC,CAAK,EAAKd,EAAK,QACjD,GAAIG,GAAa,CAACnB,EAAI,SAAW,CAAC0B,GAAS,CAACC,EACxC,OACJ,MAAMI,EAAIX,IAAY,OAAS,SAASS,CAAI,GAAK,UAAUC,CAAK,GAChE9B,EAAI,QAAQ,QAAQ,YAAcqB,EAClC,MAAMW,EAAQ,SAAS,cAAc,OAAO,EAC5C,OAAIT,IACAS,EAAM,MAAQT,GAClB,SAAS,KAAK,YAAYS,CAAK,EAC3BA,EAAM,OACNA,EAAM,MAAM,WAAW;AAAA,iCACFX,CAAE;AAAA;AAAA,qBAEdK,CAAK;AAAA,sBACJC,CAAM;AAAA,cACdI,CAAC;AAAA,mBACIH,CAAG;AAAA;AAAA,SAEb,EAEM,IAAM,CACL,SAAS,KAAK,SAASI,CAAK,GAC5B,SAAS,KAAK,YAAYA,CAAK,CAEtC,CACT,EAAO,CAACb,CAAS,CAAC,EACNc,EAAAA,IAAIxB,GAAiB,CAAE,UAAWU,EAAW,SAAUnB,EAAK,QAASgB,EAAM,SAAUkB,EAAkB,aAAChB,EAAU,CAAE,IAAAlB,CAAK,CAAA,EAAG,CACxI,CC5EA,MAAMmC,GAAgB,CAAC,CAAE,SAAAjB,EAAU,QAAAkB,EAAS,UAAAjB,EAAW,eAAAkB,EAAgB,OAAAC,EAAQ,sBAAAC,EAAuB,KAAAC,EAAM,QAAApB,KAAe,CACvH,MAAMqB,EAAmB3C,GAAY4C,EAAc,EAC7CrB,EAAKC,EAAAA,MAAO,EAClB,IAAIqB,EAAkB,GAClBC,EAAUC,EAAAA,QAAQ,KAClBF,EAAkB,GACX,CACH,GAAAtB,EACA,QAAAe,EACA,UAAAjB,EACA,OAAAmB,EACA,eAAiBQ,GAAY,CACzBL,EAAiB,IAAIK,EAAS,EAAI,EAClC,UAAWC,KAAcN,EAAiB,SACtC,GAAI,CAACM,EACD,OAERV,GAAkBA,EAAgB,CACrC,EACD,SAAWS,IACPL,EAAiB,IAAIK,EAAS,EAAK,EAC5B,IAAML,EAAiB,OAAOK,CAAO,EAEnD,GACF,CAAC3B,EAAWsB,EAAkBJ,CAAc,CAAC,EAMhD,OAAIE,GAAyBI,IACzBC,EAAU,CAAE,GAAGA,CAAS,GAE5BC,EAAAA,QAAQ,IAAM,CACVJ,EAAiB,QAAQ,CAACO,EAAGC,IAAQR,EAAiB,IAAIQ,EAAK,EAAK,CAAC,CAC7E,EAAO,CAAC9B,CAAS,CAAC,EAKd+B,EAAAA,UAAgB,IAAM,CAClB,CAAC/B,GACG,CAACsB,EAAiB,MAClBJ,GACAA,EAAgB,CAC5B,EAAO,CAAClB,CAAS,CAAC,EACVqB,IAAS,cACTtB,EAAYe,EAAG,IAAChB,GAAU,CAAE,UAAWE,EAAW,QAASC,EAAS,SAAUF,CAAQ,CAAE,GAEpFe,EAAG,IAAC3B,GAAgB,SAAU,CAAE,MAAOsC,EAAS,SAAU1B,EAAU,CAChF,EACA,SAASwB,IAAiB,CACtB,OAAO,IAAI,GACf,CCnCA,SAASS,GAAYC,EAAY,GAAM,CACnC,MAAMR,EAAUpB,EAAU,WAAClB,EAAe,EAC1C,GAAIsC,IAAY,KACZ,MAAO,CAAC,GAAM,IAAI,EACtB,KAAM,CAAE,UAAAzB,EAAW,eAAAkB,EAAgB,SAAAgB,CAAU,EAAGT,EAG1CvB,EAAKC,EAAAA,MAAO,EAClBjB,EAAAA,UAAU,IAAM,CACZ,GAAI+C,EACA,OAAOC,EAAShC,CAAE,CAE9B,EAAO,CAAC+B,CAAS,CAAC,EACd,MAAME,EAAeC,EAAAA,YAAY,IAAMH,GAAaf,GAAkBA,EAAehB,CAAE,EAAG,CAACA,EAAIgB,EAAgBe,CAAS,CAAC,EACzH,MAAO,CAACjC,GAAakB,EAAiB,CAAC,GAAOiB,CAAY,EAAI,CAAC,EAAI,CACvE,CCvCA,MAAME,GAAeC,GAAUA,EAAM,KAAO,GAC5C,SAASC,GAAaxC,EAAU,CAC5B,MAAMyC,EAAW,CAAE,EAEnBC,OAAAA,EAAAA,SAAS,QAAQ1C,EAAWuC,GAAU,CAC9BI,EAAAA,eAAeJ,CAAK,GACpBE,EAAS,KAAKF,CAAK,CAC/B,CAAK,EACME,CACX,CCgCA,MAAMG,GAAkB,CAAC,CAAE,SAAA5C,EAAU,OAAAoB,EAAQ,QAAAF,EAAU,GAAM,eAAAC,EAAgB,sBAAAE,EAAwB,GAAM,KAAAC,EAAO,OAAQ,UAAAuB,EAAY,GAAO,QAAA3C,EAAU,UAAc,CACjK,KAAM,CAAC4C,EAAiBV,CAAY,EAAIH,GAAYY,CAAS,EAKvDE,EAAkBpB,EAAAA,QAAQ,IAAMa,GAAaxC,CAAQ,EAAG,CAACA,CAAQ,CAAC,EAKlEgD,EAAcH,GAAa,CAACC,EAAkB,CAAA,EAAKC,EAAgB,IAAIT,EAAW,EAIlFW,EAAkBlE,SAAO,EAAI,EAM7BmE,EAAyBnE,SAAOgE,CAAe,EAI/CI,EAAevE,GAAY,IAAM,IAAI,GAAK,EAK1C,CAACwE,EAAgBC,CAAiB,EAAIC,EAAAA,SAASP,CAAe,EAC9D,CAACQ,EAAkBC,CAAmB,EAAIF,EAAAA,SAASP,CAAe,EACxE9D,GAA0B,IAAM,CAC5BgE,EAAgB,QAAU,GAC1BC,EAAuB,QAAUH,EAIjC,QAASU,EAAI,EAAGA,EAAIF,EAAiB,OAAQE,IAAK,CAC9C,MAAM1B,EAAMO,GAAYiB,EAAiBE,CAAC,CAAC,EACtCT,EAAY,SAASjB,CAAG,EAMzBoB,EAAa,OAAOpB,CAAG,EALnBoB,EAAa,IAAIpB,CAAG,IAAM,IACboB,EAAA,IAAIpB,EAAK,EAAK,CAKnC,CACJ,EACD,CAACwB,EAAkBP,EAAY,OAAQA,EAAY,KAAK,GAAG,CAAC,CAAC,EAChE,MAAMU,EAAkB,CAAC,EACzB,GAAIX,IAAoBK,EAAgB,CAChC,IAAAO,EAAe,CAAC,GAAGZ,CAAe,EAKtC,QAASU,EAAI,EAAGA,EAAIF,EAAiB,OAAQE,IAAK,CACxC,MAAAlB,EAAQgB,EAAiBE,CAAC,EAC1B1B,EAAMO,GAAYC,CAAK,EACxBS,EAAY,SAASjB,CAAG,IACZ4B,EAAA,OAAOF,EAAG,EAAGlB,CAAK,EAC/BmB,EAAgB,KAAKnB,CAAK,EAC9B,CAMA,OAAAjB,IAAS,QAAUoC,EAAgB,SACpBC,EAAAD,GAECF,EAAAhB,GAAamB,CAAY,CAAC,EAC9CN,EAAkBN,CAAe,EAK1B,IAAA,CAYX,KAAM,CAAE,YAAAa,CAAA,EAAgBtD,EAAA,WAAW5B,EAAkB,EACrD,OAAQqC,EAAAA,IAAI8C,EAAAA,SAAU,CAAE,SAAUN,EAAiB,IAAKhB,GAAU,CACpD,MAAAR,EAAMO,GAAYC,CAAK,EACvBtC,EAAY4C,GAAa,CAACC,EAC1B,GACAC,IAAoBQ,GAClBP,EAAY,SAASjB,CAAG,EAC1B+B,EAAS,IAAM,CACb,GAAAX,EAAa,IAAIpB,CAAG,EACPoB,EAAA,IAAIpB,EAAK,EAAI,MAG1B,QAEJ,IAAIgC,EAAsB,GACbZ,EAAA,QAASa,IAAmB,CAChCA,KACqBD,EAAA,GAAA,CAC7B,EACGA,IACcH,IAAA,EACdJ,EAAoBN,EAAuB,OAAO,EAClDL,GAAaT,IAAe,EAC5BjB,GAAkBA,EAAe,EAEzC,EACQ,OAAAJ,EAAA,IAAIE,GAAe,CAAE,UAAAhB,EAAsB,QAAS,CAACgD,EAAgB,SAAW/B,EAC9E,OACA,GAAO,OAAAE,EAAgB,sBAAAC,EAA8C,KAAAC,EAAY,eAAgBrB,EAAY,OAAY6D,EAAQ,QAAA5D,EAAkB,SAAUqC,CAAM,EAAGR,CAAG,CACtL,CAAA,EAAG,CACZ,EChKMkC,GAActF,EAAa,cAAC,CAAE,OAAQ,EAAK,CAAE,ECH7CuF,GAAe,CACjB,UAAW,CACP,UACA,WACA,aACA,WACA,OACA,cACA,aACA,WACH,EACD,KAAM,CAAC,MAAM,EACb,KAAM,CAAC,OAAQ,cAAc,EAC7B,MAAO,CAAC,YAAY,EACpB,MAAO,CAAC,aAAc,eAAgB,YAAY,EAClD,IAAK,CAAC,WAAY,QAAS,aAAc,aAAa,EACtD,IAAK,CAAC,QAAS,aAAc,oBAAqB,UAAU,EAC5D,OAAQ,CAAC,cAAe,kBAAmB,iBAAiB,EAC5D,OAAQ,CAAC,SAAU,UAAU,CACjC,EACMC,EAAqB,CAAE,EAC7B,UAAWpC,KAAOmC,GACdC,EAAmBpC,CAAG,EAAI,CACtB,UAAYqC,GAAUF,GAAanC,CAAG,EAAE,KAAMsC,GAAS,CAAC,CAACD,EAAMC,CAAI,CAAC,CACvE,ECtBL,SAASC,GAAaC,EAAU,CAC5B,UAAWxC,KAAOwC,EACdJ,EAAmBpC,CAAG,EAAI,CACtB,GAAGoC,EAAmBpC,CAAG,EACzB,GAAGwC,EAASxC,CAAG,CAClB,CAET,CCHA,MAAMyC,GAAmB,IAAI,IAAI,CAC7B,UACA,OACA,WACA,UACA,QACA,SACA,WACA,aACA,oBACA,SACA,UACA,wBACA,mBACA,sBACA,WACA,cACA,SACA,YACA,2BACA,kBACA,sBACA,SACA,SACA,eACA,aACA,kBACA,kBACA,kBACA,eACA,UACJ,CAAC,EASD,SAASC,GAAkB1C,EAAK,CAC5B,OAAQA,EAAI,WAAW,OAAO,GACzBA,EAAI,WAAW,MAAM,GAAKA,IAAQ,aACnCA,EAAI,WAAW,QAAQ,GACvBA,EAAI,WAAW,OAAO,GACtBA,EAAI,WAAW,OAAO,GACtBA,EAAI,WAAW,UAAU,GACzByC,GAAiB,IAAIzC,CAAG,CAChC,CCpDA,IAAI2C,GAAiB3C,GAAQ,CAAC0C,GAAkB1C,CAAG,EACnD,SAAS4C,GAAwBC,EAAa,CACrCA,IAGLF,GAAiB3C,GAAQA,EAAI,WAAW,IAAI,EAAI,CAAC0C,GAAkB1C,CAAG,EAAI6C,EAAY7C,CAAG,EAC7F,CAcA,GAAI,CAMA4C,GAAwB,QAAQ,wBAAwB,EAAE,OAAO,CACrE,MACM,CAEN,CACA,SAASE,GAAYT,EAAOU,EAAOC,EAAoB,CACnD,MAAMC,EAAgB,CAAE,EACxB,UAAWjD,KAAOqC,EAQVrC,IAAQ,UAAY,OAAOqC,EAAM,QAAW,WAE5CM,GAAc3C,CAAG,GAChBgD,IAAuB,IAAQN,GAAkB1C,CAAG,GACpD,CAAC+C,GAAS,CAACL,GAAkB1C,CAAG,GAEhCqC,EAAM,WACHrC,EAAI,WAAW,QAAQ,KAC3BiD,EAAcjD,CAAG,EACbqC,EAAMrC,CAAG,GAGrB,OAAOiD,CACX,CCtDA,SAASC,GAA8BC,EAAkB,CACjD,GAAA,OAAO,MAAU,IACV,OAAAA,EAML,MAAAC,MAAqB,IACrBC,EAA4B,IAAIC,IAI3BH,EAAiB,GAAGG,CAAI,EAE5B,OAAA,IAAI,MAAMD,EAA2B,CAMxC,IAAK,CAACE,EAASvD,IACPA,IAAQ,SACDmD,GAINC,EAAe,IAAIpD,CAAG,GACvBoD,EAAe,IAAIpD,EAAKmD,EAAiBnD,CAAG,CAAC,EAE1CoD,EAAe,IAAIpD,CAAG,EACjC,CACH,CACL,CChCA,MAAMwD,GAAgC5G,EAAa,cAAC,EAAE,ECHtD,SAAS6G,GAAoBC,EAAG,CAC5B,OAAQA,IAAM,MACV,OAAOA,GAAM,UACb,OAAOA,EAAE,OAAU,UAC3B,CCDA,SAASC,GAAeD,EAAG,CACvB,OAAO,OAAOA,GAAM,UAAY,MAAM,QAAQA,CAAC,CACnD,CCLA,MAAME,GAAuB,CACzB,UACA,cACA,aACA,aACA,WACA,YACA,MACJ,EACMC,GAAe,CAAC,UAAW,GAAGD,EAAoB,ECLxD,SAASE,GAAsBzB,EAAO,CAClC,OAAQoB,GAAoBpB,EAAM,OAAO,GACrCwB,GAAa,KAAMvB,GAASqB,GAAetB,EAAMC,CAAI,CAAC,CAAC,CAC/D,CACA,SAASyB,GAAc1B,EAAO,CAC1B,MAAO,GAAQyB,GAAsBzB,CAAK,GAAKA,EAAM,SACzD,CCPA,SAAS2B,GAAuB3B,EAAO1C,EAAS,CAC5C,GAAImE,GAAsBzB,CAAK,EAAG,CAC9B,KAAM,CAAE,QAAAlD,EAAS,QAAA8E,CAAO,EAAK5B,EAC7B,MAAO,CACH,QAASlD,IAAY,IAASwE,GAAexE,CAAO,EAC9CA,EACA,OACN,QAASwE,GAAeM,CAAO,EAAIA,EAAU,MAChD,CACT,CACI,OAAO5B,EAAM,UAAY,GAAQ1C,EAAU,CAAE,CACjD,CCVA,SAASuE,GAAuB7B,EAAO,CACnC,KAAM,CAAE,QAAAlD,EAAS,QAAA8E,CAAS,EAAGD,GAAuB3B,EAAO9D,EAAAA,WAAWiF,EAAa,CAAC,EACpF,OAAO5D,UAAQ,KAAO,CAAE,QAAAT,EAAS,QAAA8E,CAAO,GAAK,CAACE,GAA0BhF,CAAO,EAAGgF,GAA0BF,CAAO,CAAC,CAAC,CACzH,CACA,SAASE,GAA0BC,EAAM,CACrC,OAAO,MAAM,QAAQA,CAAI,EAAIA,EAAK,KAAK,GAAG,EAAIA,CAClD,CCVA,MAAMC,GAAwB,OAAO,IAAI,uBAAuB,ECAhE,SAASC,EAAYvH,EAAK,CACtB,OAAQA,GACJ,OAAOA,GAAQ,UACf,OAAO,UAAU,eAAe,KAAKA,EAAK,SAAS,CAC3D,CCGA,SAASwH,GAAaC,EAAaC,EAAeC,EAAa,CAC3D,OAAOpE,EAAAA,YAAaqE,GAAa,CACzBA,GACAH,EAAY,SAAWA,EAAY,QAAQG,CAAQ,EAEnDF,IACIE,EACAF,EAAc,MAAME,CAAQ,EAG5BF,EAAc,QAAS,GAG3BC,IACI,OAAOA,GAAgB,WACvBA,EAAYC,CAAQ,EAEfL,EAAYI,CAAW,IAC5BA,EAAY,QAAUC,GAGjC,EAMD,CAACF,CAAa,CAAC,CACnB,CChCA,MAAMG,GAAeC,GAAQA,EAAI,QAAQ,mBAAoB,OAAO,EAAE,YAAa,ECD7EC,GAAwB,iBACxBC,GAA+B,QAAUH,GAAYE,EAAqB,ECG1EE,GAA2BpI,EAAa,cAAC,EAAE,ECKjD,SAASqI,GAAiBC,EAAWV,EAAanC,EAAO8C,EAAqBC,EAA2B,CACrG,KAAM,CAAE,cAAexH,GAAWW,EAAAA,WAAWiF,EAAa,EACpD6B,EAAc9G,EAAU,WAAC2D,EAAW,EACpCoD,EAAkB/G,EAAU,WAAClB,EAAe,EAC5CkI,EAAsBhH,EAAAA,WAAWjB,EAAmB,EAAE,cACtDkI,EAAmBxI,EAAM,OAAC,IAAI,EAIpCmI,EAAsBA,GAAuBE,EAAY,SACrD,CAACG,EAAiB,SAAWL,IAC7BK,EAAiB,QAAUL,EAAoBD,EAAW,CACtD,YAAAV,EACA,OAAA5G,EACA,MAAAyE,EACA,gBAAAiD,EACA,sBAAuBA,EACjBA,EAAgB,UAAY,GAC5B,GACN,oBAAAC,CACZ,CAAS,GAEL,MAAMd,EAAgBe,EAAiB,QAKjCC,EAA2BlH,EAAU,WAACyG,EAAwB,EAChEP,GACA,CAACA,EAAc,YACfW,IACCX,EAAc,OAAS,QAAUA,EAAc,OAAS,QACzDiB,GAAqBF,EAAiB,QAASnD,EAAO+C,EAA2BK,CAAwB,EAE7G,MAAME,EAAY3I,EAAM,OAAC,EAAK,EAC9BwB,EAAAA,mBAAmB,IAAM,CAKjBiG,GAAiBkB,EAAU,SAC3BlB,EAAc,OAAOpC,EAAOiD,CAAe,CAEvD,CAAK,EAKD,MAAMM,EAAoBvD,EAAM0C,EAA4B,EACtDc,EAAe7I,EAAAA,OAAO,EAAQ4I,GAChC,CAAC,OAAO,0BAA0BA,CAAiB,GACnD,OAAO,8BAA8BA,CAAiB,CAAC,EAC3D,OAAA1I,GAA0B,IAAM,CACvBuH,IAELkB,EAAU,QAAU,GACpB,OAAO,gBAAkB,GACzBlB,EAAc,eAAgB,EAC9BqB,GAAU,OAAOrB,EAAc,MAAM,EAWjCoB,EAAa,SAAWpB,EAAc,gBACtCA,EAAc,eAAe,eAAgB,EAEzD,CAAK,EACDrH,EAAAA,UAAU,IAAM,CACPqH,IAED,CAACoB,EAAa,SAAWpB,EAAc,gBACvCA,EAAc,eAAe,eAAgB,EAE7CoB,EAAa,UAEb,eAAe,IAAM,CACjB,OAAO,8BAA8BD,CAAiB,CACtE,CAAa,EACDC,EAAa,QAAU,IAEnC,CAAK,EACMpB,CACX,CACA,SAASiB,GAAqBjB,EAAepC,EAAO+C,EAA2BW,EAAwB,CACnG,KAAM,CAAE,SAAAC,EAAU,OAAAC,EAAQ,KAAAC,EAAM,gBAAAC,EAAiB,aAAAC,EAAc,WAAAC,EAAY,gBAAAC,CAAe,EAAMjE,EAChGoC,EAAc,WAAa,IAAIW,EAA0BX,EAAc,aAAcpC,EAAM,uBAAuB,EAC5G,OACAkE,GAAyB9B,EAAc,MAAM,CAAC,EACpDA,EAAc,WAAW,WAAW,CAChC,SAAAuB,EACA,OAAAC,EACA,oBAAqB,EAAQC,GAAUC,GAAmB7B,EAAY6B,CAAe,EACrF,cAAA1B,EAQA,cAAe,OAAOwB,GAAW,SAAWA,EAAS,OACrD,uBAAAF,EACA,UAAWO,EACX,aAAAF,EACA,WAAAC,CACR,CAAK,CACL,CACA,SAASE,GAAyB9B,EAAe,CAC7C,GAAKA,EAEL,OAAOA,EAAc,QAAQ,kBAAoB,GAC3CA,EAAc,WACd8B,GAAyB9B,EAAc,MAAM,CACvD,CCzGA,SAAS+B,GAA8B,CAAE,kBAAAC,EAAmB,oBAAAtB,EAAqB,UAAAuB,EAAW,eAAAC,EAAgB,UAAAzB,GAAc,CACtHuB,GAAqBlE,GAAakE,CAAiB,EAC1C,SAAAG,EAAgBvE,EAAOqC,EAAa,CAKrC,IAAAmC,EACJ,MAAMC,EAAiB,CACnB,GAAGvI,EAAAA,WAAWjB,EAAmB,EACjC,GAAG+E,EACH,SAAU0E,GAAY1E,CAAK,CAC/B,EACM,CAAE,SAAA2E,GAAaF,EACfnH,EAAUuE,GAAuB7B,CAAK,EACtCmC,EAAcmC,EAAetE,EAAO2E,CAAQ,EAC9C,GAAA,CAACA,GAAY/J,GAAW,CACxBgK,GAA+C,EACzC,MAAAC,EAAmBC,GAA2BL,CAAc,EAClED,EAAgBK,EAAiB,cAOjCvH,EAAQ,cAAgBsF,GAAiBC,EAAWV,EAAasC,EAAgB3B,EAAqB+B,EAAiB,cAAc,CAAA,CAMzI,OAAQE,EAAAA,KAAK5D,GAAc,SAAU,CAAE,MAAO7D,EAAS,SAAU,CAACkH,GAAiBlH,EAAQ,cAAiBX,MAAI6H,EAAe,CAAE,cAAelH,EAAQ,cAAe,GAAGmH,CAAe,CAAC,EAAK,KAAMJ,EAAUxB,EAAW7C,EAAOkC,GAAaC,EAAa7E,EAAQ,cAAe+E,CAAW,EAAGF,EAAawC,EAAUrH,EAAQ,aAAa,CAAC,EAAG,CAAA,CAEpViH,EAAgB,YAAc,UAAU,OAAO1B,GAAc,SACvDA,EACA,UAAUA,EAAU,aAAeA,EAAU,MAAQ,EAAE,GAAG,GAC1D,MAAAmC,EAA4BC,aAAWV,CAAe,EAC5D,OAAAS,EAA0BhD,EAAqB,EAAIa,EAC5CmC,CACX,CACA,SAASN,GAAY,CAAE,SAAAf,GAAY,CACzB,MAAAuB,EAAgBhJ,EAAAA,WAAW5B,EAAkB,EAAE,GACrD,OAAO4K,GAAiBvB,IAAa,OAC/BuB,EAAgB,IAAMvB,EACtBA,CACV,CACA,SAASiB,GAAcH,EAAgBL,EAAmB,CACrClI,EAAW,WAAA2D,EAAW,EAAE,MAa7C,CACA,SAASiF,GAA2B9E,EAAO,CACjC,KAAA,CAAE,KAAA6D,EAAM,OAAAD,CAAA,EAAW7D,EACrB,GAAA,CAAC8D,GAAQ,CAACD,EACV,MAAO,CAAC,EACZ,MAAMuB,EAAW,CAAE,GAAGtB,EAAM,GAAGD,CAAO,EAC/B,MAAA,CACH,cAAeC,GAAM,UAAU7D,CAAK,GAAK4D,GAAQ,UAAU5D,CAAK,EAC1DmF,EAAS,cACT,OACN,eAAgBA,EAAS,cAC7B,CACJ,CChGA,MAAMC,GAAkB,CAAE,EAC1B,SAASC,GAAkBC,EAAY,CACnC,UAAW3H,KAAO2H,EACdF,GAAgBzH,CAAG,EAAI2H,EAAW3H,CAAG,EACjC4H,GAAkB5H,CAAG,IACrByH,GAAgBzH,CAAG,EAAE,cAAgB,GAGjD,CCPA,SAAS6H,GAAoB7H,EAAK,CAAE,OAAAiG,EAAQ,SAAAD,CAAQ,EAAI,CACpD,OAAQ8B,EAAe,IAAI9H,CAAG,GAC1BA,EAAI,WAAW,QAAQ,IACrBiG,GAAUD,IAAa,UACpB,CAAC,CAACyB,GAAgBzH,CAAG,GAAKA,IAAQ,UAC/C,CCNA,MAAM+H,GAAiB,CACnB,EAAG,aACH,EAAG,aACH,EAAG,aACH,qBAAsB,aAC1B,EACMC,GAAgBC,GAAmB,OAOzC,SAASC,GAAeC,EAAcC,EAAWC,EAAmB,CAEhE,IAAIC,EAAkB,GAClBC,EAAqB,GAKzB,QAAS7G,EAAI,EAAGA,EAAIsG,GAAetG,IAAK,CACpC,MAAM1B,EAAMiI,GAAmBvG,CAAC,EAC1B8G,EAAQL,EAAanI,CAAG,EAC9B,GAAIwI,IAAU,OACV,SACJ,IAAIC,EAAiB,GAOrB,GANI,OAAOD,GAAU,SACjBC,EAAiBD,KAAWxI,EAAI,WAAW,OAAO,EAAI,EAAI,GAG1DyI,EAAiB,WAAWD,CAAK,IAAM,EAEvC,CAACC,GAAkBJ,EAAmB,CACtC,MAAMK,EAAcC,GAAeH,EAAOI,GAAiB5I,CAAG,CAAC,EAC/D,GAAI,CAACyI,EAAgB,CACjBF,EAAqB,GACrB,MAAMM,EAAgBd,GAAe/H,CAAG,GAAKA,EAC7CsI,GAAmB,GAAGO,CAAa,IAAIH,CAAW,IAClE,CACgBL,IACAD,EAAUpI,CAAG,EAAI0I,EAEjC,CACA,CACI,OAAAJ,EAAkBA,EAAgB,KAAM,EAGpCD,EACAC,EAAkBD,EAAkBD,EAAWG,EAAqB,GAAKD,CAAe,EAEnFC,IACLD,EAAkB,QAEfA,CACX,CCtDA,SAASQ,GAAgBC,EAAOZ,EAAcE,EAAmB,CAC7D,KAAM,CAAE,MAAAtJ,EAAO,KAAAiK,EAAM,gBAAAC,CAAiB,EAAGF,EAEzC,IAAIG,EAAe,GACfC,EAAqB,GAOzB,UAAWnJ,KAAOmI,EAAc,CAC5B,MAAMK,EAAQL,EAAanI,CAAG,EAC9B,GAAI8H,EAAe,IAAI9H,CAAG,EAAG,CAEzBkJ,EAAe,GACf,QACZ,SACiBtB,GAAkB5H,CAAG,EAAG,CAC7BgJ,EAAKhJ,CAAG,EAAIwI,EACZ,QACZ,KACa,CAED,MAAME,EAAcC,GAAeH,EAAOI,GAAiB5I,CAAG,CAAC,EAC3DA,EAAI,WAAW,QAAQ,GAEvBmJ,EAAqB,GACrBF,EAAgBjJ,CAAG,EACf0I,GAGJ3J,EAAMiB,CAAG,EAAI0I,CAE7B,CACA,CAiBI,GAhBKP,EAAa,YACVe,GAAgBb,EAChBtJ,EAAM,UAAYmJ,GAAeC,EAAcY,EAAM,UAAWV,CAAiB,EAE5EtJ,EAAM,YAKXA,EAAM,UAAY,SAOtBoK,EAAoB,CACpB,KAAM,CAAE,QAAAC,EAAU,MAAO,QAAAC,EAAU,MAAO,QAAAC,EAAU,CAAC,EAAML,EAC3DlK,EAAM,gBAAkB,GAAGqK,CAAO,IAAIC,CAAO,IAAIC,CAAO,EAChE,CACA,CC3DA,MAAMC,GAAwB,KAAO,CACjC,MAAO,CAAE,EACT,UAAW,CAAE,EACb,gBAAiB,CAAE,EACnB,KAAM,CAAE,CACZ,GCCA,SAASC,GAAkBC,EAAQC,EAAQrH,EAAO,CAC9C,UAAWrC,KAAO0J,EACV,CAACC,EAAcD,EAAO1J,CAAG,CAAC,GAAK,CAAC6H,GAAoB7H,EAAKqC,CAAK,IAC9DoH,EAAOzJ,CAAG,EAAI0J,EAAO1J,CAAG,EAGpC,CACA,SAAS4J,GAAuB,CAAE,kBAAAvB,CAAmB,EAAE7D,EAAa,CAChE,OAAO5E,EAAO,QAAC,IAAM,CACjB,MAAMmJ,EAAQQ,GAAuB,EACrC,OAAAT,GAAgBC,EAAOvE,EAAa6D,CAAiB,EAC9C,OAAO,OAAO,CAAE,EAAEU,EAAM,KAAMA,EAAM,KAAK,CACxD,EAAO,CAACvE,CAAW,CAAC,CACpB,CACA,SAASqF,GAASxH,EAAOmC,EAAa,CAClC,MAAMsF,EAAYzH,EAAM,OAAS,CAAE,EAC7BtD,EAAQ,CAAE,EAIhB,OAAAyK,GAAkBzK,EAAO+K,EAAWzH,CAAK,EACzC,OAAO,OAAOtD,EAAO6K,GAAuBvH,EAAOmC,CAAW,CAAC,EACxDzF,CACX,CACA,SAASgL,GAAa1H,EAAOmC,EAAa,CAEtC,MAAMwF,EAAY,CAAE,EACdjL,EAAQ8K,GAASxH,EAAOmC,CAAW,EACzC,OAAInC,EAAM,MAAQA,EAAM,eAAiB,KAErC2H,EAAU,UAAY,GAEtBjL,EAAM,WACFA,EAAM,iBACFA,EAAM,mBACF,OAEZA,EAAM,YACFsD,EAAM,OAAS,GACT,OACA,OAAOA,EAAM,OAAS,IAAM,IAAM,GAAG,IAE/CA,EAAM,WAAa,SAClBA,EAAM,OAASA,EAAM,YAAcA,EAAM,YAC1C2H,EAAU,SAAW,GAEzBA,EAAU,MAAQjL,EACXiL,CACX,CCpDA,MAAMC,GAAW,CACb,OAAQ,oBACR,MAAO,kBACX,EACMC,GAAY,CACd,OAAQ,mBACR,MAAO,iBACX,EAQA,SAASC,GAAaC,EAAOC,EAAQC,EAAU,EAAGC,EAAS,EAAGC,EAAc,GAAM,CAE9EJ,EAAM,WAAa,EAGnB,MAAMK,EAAOD,EAAcP,GAAWC,GAEtCE,EAAMK,EAAK,MAAM,EAAIC,EAAG,UAAU,CAACH,CAAM,EAEzC,MAAMI,EAAaD,EAAG,UAAUL,CAAM,EAChCO,EAAcF,EAAG,UAAUJ,CAAO,EACxCF,EAAMK,EAAK,KAAK,EAAI,GAAGE,CAAU,IAAIC,CAAW,EACpD,CCvBA,SAASC,GAAc9B,EAAO,CAAE,MAAA+B,EAAO,MAAAC,EAAO,UAAAC,EAAW,WAAAL,EAAY,YAAAC,EAAc,EAAG,WAAAK,EAAa,EAEnG,GAAGC,GAAUC,EAAU9C,EAAmByB,EAAW,CAMjD,GALAhB,GAAgBC,EAAOmC,EAAQ7C,CAAiB,EAK5C8C,EAAU,CACNpC,EAAM,MAAM,UACZA,EAAM,MAAM,QAAUA,EAAM,MAAM,SAEtC,MACR,CACIA,EAAM,MAAQA,EAAM,MACpBA,EAAM,MAAQ,CAAE,EAChB,KAAM,CAAE,MAAAqB,EAAO,MAAArL,CAAK,EAAKgK,EAKrBqB,EAAM,YACNrL,EAAM,UAAYqL,EAAM,UACxB,OAAOA,EAAM,YAEbrL,EAAM,WAAaqL,EAAM,mBACzBrL,EAAM,gBAAkBqL,EAAM,iBAAmB,UACjD,OAAOA,EAAM,iBAEbrL,EAAM,YAKNA,EAAM,aAAe+K,GAAW,cAAgB,WAChD,OAAOM,EAAM,cAGbU,IAAU,SACVV,EAAM,EAAIU,GACVC,IAAU,SACVX,EAAM,EAAIW,GACVC,IAAc,SACdZ,EAAM,MAAQY,GAEdL,IAAe,QACfR,GAAaC,EAAOO,EAAYC,EAAaK,EAAY,EAAK,CAEtE,CCpDA,MAAMG,GAAuB,KAAO,CAChC,GAAG7B,GAAuB,EAC1B,MAAO,CAAE,CACb,GCLM4B,GAAYE,GAAQ,OAAOA,GAAQ,UAAYA,EAAI,YAAW,IAAO,MCM3E,SAASC,GAAYjJ,EAAOmC,EAAa+G,EAAWrG,EAAW,CAC3D,MAAMsG,EAAc5L,EAAAA,QAAQ,IAAM,CAC9B,MAAMmJ,EAAQqC,GAAsB,EACpC,OAAAP,GAAc9B,EAAOvE,EAAa2G,GAASjG,CAAS,EAAG7C,EAAM,kBAAmBA,EAAM,KAAK,EACpF,CACH,GAAG0G,EAAM,MACT,MAAO,CAAE,GAAGA,EAAM,KAAO,CAC5B,CACT,EAAO,CAACvE,CAAW,CAAC,EAChB,GAAInC,EAAM,MAAO,CACb,MAAMoJ,EAAY,CAAE,EACpBjC,GAAkBiC,EAAWpJ,EAAM,MAAOA,CAAK,EAC/CmJ,EAAY,MAAQ,CAAE,GAAGC,EAAW,GAAGD,EAAY,KAAO,CAClE,CACI,OAAOA,CACX,CCjBA,MAAME,GAAuB,CACzB,UACA,SACA,OACA,OACA,UACA,IACA,QACA,OACA,SACA,SACA,OACA,WACA,OACA,UACA,UACA,WACA,OACA,OACA,SACA,SACA,MACA,OACA,QACA,MACA,MACJ,EC5BA,SAASC,GAAezG,EAAW,CAC/B,OAKA,OAAOA,GAAc,UAIjBA,EAAU,SAAS,GAAG,EACf,GAMX,GAAAwG,GAAqB,QAAQxG,CAAS,EAAI,IAItC,SAAS,KAAKA,CAAS,EAI/B,CCpBA,SAAS0G,GAAgB5I,EAAqB,GAAO,CAsBjD,MArBkB,CAACkC,EAAW7C,EAAOtF,EAAK,CAAE,aAAAoL,CAAc,EAAEnB,IAAa,CAIrE,MAAMwE,GAHiBG,GAAezG,CAAS,EACzCoG,GACAvB,IAC6B1H,EAAO8F,EAAcnB,EAAU9B,CAAS,EACrEjC,EAAgBH,GAAYT,EAAO,OAAO6C,GAAc,SAAUlC,CAAkB,EACpF6I,EAAe3G,IAAcpD,EAAAA,SAC7B,CAAE,GAAGmB,EAAe,GAAGuI,EAAa,IAAAzO,CAAG,EACvC,CAAE,EAMF,CAAE,SAAAkB,CAAQ,EAAKoE,EACfb,EAAmB5B,EAAAA,QAAQ,IAAO+J,EAAc1L,CAAQ,EAAIA,EAAS,MAAQA,EAAW,CAACA,CAAQ,CAAC,EACxG,OAAO6N,EAAAA,cAAc5G,EAAW,CAC5B,GAAG2G,EACH,SAAUrK,CACtB,CAAS,CACJ,CAEL,CC9BA,SAASuK,GAActH,EAAe,CAClC,MAAMsE,EAAQ,CAAC,CAAE,EAAE,EAAE,EACrB,OAAAtE,GAAe,OAAO,QAAQ,CAAC+D,EAAOxI,IAAQ,CAC1C+I,EAAM,CAAC,EAAE/I,CAAG,EAAIwI,EAAM,IAAK,EAC3BO,EAAM,CAAC,EAAE/I,CAAG,EAAIwI,EAAM,YAAa,CAC3C,CAAK,EACMO,CACX,CACA,SAASiD,GAAwB3J,EAAO4J,EAAY5M,EAAQoF,EAAe,CAIvE,GAAI,OAAOwH,GAAe,WAAY,CAClC,KAAM,CAACC,EAASC,CAAQ,EAAIJ,GAActH,CAAa,EACvDwH,EAAaA,EAAW5M,IAAW,OAAYA,EAASgD,EAAM,OAAQ6J,EAASC,CAAQ,CAC/F,CAaI,GARI,OAAOF,GAAe,WACtBA,EAAa5J,EAAM,UAAYA,EAAM,SAAS4J,CAAU,GAOxD,OAAOA,GAAe,WAAY,CAClC,KAAM,CAACC,EAASC,CAAQ,EAAIJ,GAActH,CAAa,EACvDwH,EAAaA,EAAW5M,IAAW,OAAYA,EAASgD,EAAM,OAAQ6J,EAASC,CAAQ,CAC/F,CACI,OAAOF,CACX,CC1BA,SAASG,GAAmB5D,EAAO,CAC/B,OAAOmB,EAAcnB,CAAK,EAAIA,EAAM,IAAK,EAAGA,CAChD,CCAA,SAAS6D,GAAU,CAAE,4BAAAC,EAA6B,kBAAAC,CAAoB,EAAElK,EAAO1C,EAAS2F,EAAiB,CAKrG,MAJc,CACV,aAAckH,GAAiBnK,EAAO1C,EAAS2F,EAAiBgH,CAA2B,EAC3F,YAAaC,EAAmB,CACnC,CAEL,CACA,MAAME,GAAsBC,GAAW,CAACrK,EAAO2E,IAAa,CACxD,MAAMrH,EAAUpB,EAAU,WAACiF,EAAa,EAClC8B,EAAkB/G,EAAU,WAAClB,EAAe,EAC5CsP,EAAO,IAAMN,GAAUK,EAAQrK,EAAO1C,EAAS2F,CAAe,EACpE,OAAO0B,EAAW2F,IAAS9P,GAAY8P,CAAI,CAC/C,EACA,SAASH,GAAiBnK,EAAO1C,EAAS2F,EAAiBsH,EAAoB,CAC3E,MAAMC,EAAS,CAAE,EACXC,EAAeF,EAAmBvK,EAAO,EAAE,EACjD,UAAWrC,KAAO8M,EACdD,EAAO7M,CAAG,EAAIoM,GAAmBU,EAAa9M,CAAG,CAAC,EAEtD,GAAI,CAAE,QAAAb,EAAS,QAAA8E,CAAO,EAAK5B,EAC3B,MAAM0K,EAA0BjJ,GAAsBzB,CAAK,EACrD2K,EAAkBjJ,GAAc1B,CAAK,EACvC1C,GACAqN,GACA,CAACD,GACD1K,EAAM,UAAY,KACdlD,IAAY,SACZA,EAAUQ,EAAQ,SAClBsE,IAAY,SACZA,EAAUtE,EAAQ,UAE1B,IAAIsN,EAA4B3H,EAC1BA,EAAgB,UAAY,GAC5B,GACN2H,EAA4BA,GAA6B9N,IAAY,GACrE,MAAM+N,EAAeD,EAA4BhJ,EAAU9E,EAC3D,GAAI+N,GACA,OAAOA,GAAiB,WACxB,CAACzJ,GAAoByJ,CAAY,EAAG,CACpC,MAAMC,EAAO,MAAM,QAAQD,CAAY,EAAIA,EAAe,CAACA,CAAY,EACvE,QAASxL,EAAI,EAAGA,EAAIyL,EAAK,OAAQzL,IAAK,CAClC,MAAM0L,EAAWpB,GAAwB3J,EAAO8K,EAAKzL,CAAC,CAAC,EACvD,GAAI0L,EAAU,CACV,KAAM,CAAE,cAAAC,EAAe,WAAAC,EAAY,GAAG7D,CAAQ,EAAG2D,EACjD,UAAWpN,KAAOyJ,EAAQ,CACtB,IAAI8D,EAAc9D,EAAOzJ,CAAG,EAC5B,GAAI,MAAM,QAAQuN,CAAW,EAAG,CAK5B,MAAMC,EAAQP,EACRM,EAAY,OAAS,EACrB,EACNA,EAAcA,EAAYC,CAAK,CACvD,CACwBD,IAAgB,OAChBV,EAAO7M,CAAG,EAAIuN,EAEtC,CACgB,UAAWvN,KAAOqN,EACdR,EAAO7M,CAAG,EAAIqN,EAAcrN,CAAG,CAEnD,CACA,CACA,CACI,OAAO6M,CACX,CCzEA,SAASP,GAA4BjK,EAAO3E,EAAW+G,EAAe,CAClE,KAAM,CAAE,MAAA1F,CAAK,EAAKsD,EACZoL,EAAY,CAAE,EACpB,UAAWzN,KAAOjB,GACV4K,EAAc5K,EAAMiB,CAAG,CAAC,GACvBtC,EAAU,OACPiM,EAAcjM,EAAU,MAAMsC,CAAG,CAAC,GACtC6H,GAAoB7H,EAAKqC,CAAK,GAC9BoC,GAAe,SAASzE,CAAG,GAAG,YAAc,UAC5CyN,EAAUzN,CAAG,EAAIjB,EAAMiB,CAAG,GAGlC,OAAOyN,CACX,CCZA,MAAMC,GAAmB,CACrB,eAAgBjB,GAAmB,CACvC,4BAAQH,GACA,kBAAmB/C,EAC3B,CAAK,CACL,ECNA,SAAS+C,GAA4BjK,EAAO3E,EAAW+G,EAAe,CAClE,MAAMgJ,EAAYE,GAA8BtL,EAAO3E,EAAW+G,CAAa,EAC/E,UAAWzE,KAAOqC,EACd,GAAIsH,EAActH,EAAMrC,CAAG,CAAC,GACxB2J,EAAcjM,EAAUsC,CAAG,CAAC,EAAG,CAC/B,MAAM4N,EAAY3F,GAAmB,QAAQjI,CAAG,IAAM,GAChD,OAASA,EAAI,OAAO,CAAC,EAAE,cAAgBA,EAAI,UAAU,CAAC,EACtDA,EACNyN,EAAUG,CAAS,EAAIvL,EAAMrC,CAAG,CAC5C,CAEI,OAAOyN,CACX,CCXA,MAAMI,GAAkB,CACpB,eAAgBpB,GAAmB,CAC/B,4BAA6BH,GAC7B,kBAAmBlB,EAC3B,CAAK,CACL,ECHA,SAAS0C,GAA6BrH,EAAmBtB,EAAqB,CAC1E,OAAO,SAA+BD,EAAW,CAAE,mBAAAlC,CAAkB,EAAK,CAAE,mBAAoB,IAAS,CAIrG,MAAM0J,EAAS,CACX,GAJef,GAAezG,CAAS,EACrC2I,GACAH,GAGF,kBAAAjH,EACA,UAAWmF,GAAgB5I,CAAkB,EAC7C,oBAAAmC,EACA,UAAAD,CACH,EACD,OAAOsB,GAA8BkG,CAAM,CAC9C,CACL,CClBA,SAASqB,GAAetJ,EAAewH,EAAY5M,EAAQ,CACvD,MAAMgD,EAAQoC,EAAc,SAAU,EACtC,OAAOuH,GAAwB3J,EAAO4J,EAAY5M,IAAW,OAAYA,EAASgD,EAAM,OAAQoC,CAAa,CACjH,CCLA,MAAMuJ,GAAqBtK,GAChB,MAAM,QAAQA,CAAC,ECO1B,SAASuK,GAAexJ,EAAezE,EAAKwI,EAAO,CAC3C/D,EAAc,SAASzE,CAAG,EAC1ByE,EAAc,SAASzE,CAAG,EAAE,IAAIwI,CAAK,EAGrC/D,EAAc,SAASzE,EAAKkO,EAAY1F,CAAK,CAAC,CAEtD,CACA,SAAS2F,GAA6BzK,EAAG,CAErC,OAAOsK,GAAkBtK,CAAC,EAAIA,EAAEA,EAAE,OAAS,CAAC,GAAK,EAAIA,CACzD,CACA,SAAS0K,GAAU3J,EAAewH,EAAY,CAC1C,MAAMmB,EAAWW,GAAetJ,EAAewH,CAAU,EACzD,GAAI,CAAE,cAAAoB,EAAgB,CAAA,EAAI,WAAAC,EAAa,CAAE,EAAE,GAAG7D,CAAM,EAAK2D,GAAY,CAAE,EACvE3D,EAAS,CAAE,GAAGA,EAAQ,GAAG4D,CAAe,EACxC,UAAWrN,KAAOyJ,EAAQ,CACtB,MAAMjB,EAAQ2F,GAA6B1E,EAAOzJ,CAAG,CAAC,EACtDiO,GAAexJ,EAAezE,EAAKwI,CAAK,CAChD,CACA,CC1BA,SAAS6F,GAAwB7F,EAAO,CACpC,MAAO,GAAQmB,EAAcnB,CAAK,GAAKA,EAAM,IACjD,CCDA,SAAS8F,GAAqB7J,EAAezE,EAAK,CAC9C,MAAMuO,EAAa9J,EAAc,SAAS,YAAY,EAKtD,GAAI4J,GAAwBE,CAAU,EAClC,OAAOA,EAAW,IAAIvO,CAAG,EAExB,GAAI,CAACuO,GAAcC,GAAmB,WAAY,CACnD,MAAMC,EAAgB,IAAID,GAAmB,WAAW,MAAM,EAC9D/J,EAAc,SAAS,aAAcgK,CAAa,EAClDA,EAAc,IAAIzO,CAAG,CAC7B,CACA,CCfA,SAAS0O,GAAqBjK,EAAe,CACzC,OAAOA,EAAc,MAAMM,EAA4B,CAC3D,CCJA,MAAM4J,GAAanG,GAAUA,IAAU,KACvC,SAASoG,GAAiBC,EAAW,CAAE,OAAAC,EAAQ,WAAAC,EAAa,MAAQ,EAAEC,EAAe,CACjF,MAAMC,EAAoBJ,EAAU,OAAOF,EAAS,EAC9CnB,EAAQsB,GAAUC,IAAe,QAAUD,EAAS,IAAM,EAC1D,EACAG,EAAkB,OAAS,EACjC,OACMA,EAAkBzB,CAAK,CAEjC,CCPA,MAAM0B,GAAoB,CACtB,KAAM,SACN,UAAW,IACX,QAAS,GACT,UAAW,EACf,EACMC,GAA0B1F,IAAY,CACxC,KAAM,SACN,UAAW,IACX,QAASA,IAAW,EAAI,EAAI,KAAK,KAAK,GAAG,EAAI,GAC7C,UAAW,EACf,GACM2F,GAAsB,CACxB,KAAM,YACN,SAAU,EACd,EAKMC,GAAO,CACT,KAAM,YACN,KAAM,CAAC,IAAM,GAAK,IAAM,CAAC,EACzB,SAAU,EACd,EACMC,GAAuB,CAACC,EAAU,CAAE,UAAAV,KAClCA,EAAU,OAAS,EACZO,GAEFtH,EAAe,IAAIyH,CAAQ,EACzBA,EAAS,WAAW,OAAO,EAC5BJ,GAAuBN,EAAU,CAAC,CAAC,EACnCK,GAEHG,GC/BX,SAASG,GAAoB,CAAE,KAAAC,EAAM,MAAOC,EAAQ,cAAAC,EAAe,gBAAAC,EAAiB,iBAAAC,EAAkB,OAAAf,EAAQ,WAAAC,EAAY,YAAAe,EAAa,KAAAC,EAAM,QAAAC,EAAS,GAAG1C,CAAU,EAAI,CACnK,MAAO,CAAC,CAAC,OAAO,KAAKA,CAAU,EAAE,MACrC,CCDA,MAAM2C,GAAqB,CAAC3N,EAAMkG,EAAOiB,EAAQ6D,EAAa,CAAA,EAAI3P,EAASuS,IAAeC,GAAe,CACrG,MAAMC,EAAkBC,GAAmB/C,EAAYhL,CAAI,GAAK,CAAE,EAM5DgO,EAAQF,EAAgB,OAAS9C,EAAW,OAAS,EAK3D,GAAI,CAAE,QAAA0C,EAAU,CAAC,EAAK1C,EACtB0C,EAAUA,EAAUO,GAAsBD,CAAK,EAC/C,MAAME,EAAU,CACZ,UAAW,MAAM,QAAQ/G,CAAM,EAAIA,EAAS,CAAC,KAAMA,CAAM,EACzD,KAAM,UACN,SAAUjB,EAAM,YAAa,EAC7B,GAAG4H,EACH,MAAO,CAACJ,EACR,SAAWtM,GAAM,CACb8E,EAAM,IAAI9E,CAAC,EACX0M,EAAgB,UAAYA,EAAgB,SAAS1M,CAAC,CACzD,EACD,WAAY,IAAM,CACdyM,EAAY,EACZC,EAAgB,YAAcA,EAAgB,WAAY,CAC7D,EACD,KAAA9N,EACA,YAAakG,EACb,QAAS0H,EAAY,OAAYvS,CACpC,EAKI6R,GAAoBY,CAAe,GACpC,OAAO,OAAOI,EAASlB,GAAqBhN,EAAMkO,CAAO,CAAC,EAO9DA,EAAQ,WAAaA,EAAQ,SAAWD,GAAsBC,EAAQ,QAAQ,GAC9EA,EAAQ,cAAgBA,EAAQ,YAAcD,GAAsBC,EAAQ,WAAW,GAInFA,EAAQ,OAAS,SACjBA,EAAQ,UAAU,CAAC,EAAIA,EAAQ,MAEnC,IAAIC,EAAa,GAwBjB,IAvBID,EAAQ,OAAS,IAChBA,EAAQ,WAAa,GAAK,CAACA,EAAQ,eACpCA,EAAQ,SAAW,EACfA,EAAQ,QAAU,IAClBC,EAAa,MAGjBjC,GAAmB,mBACnBA,GAAmB,kBACnBiC,EAAa,GACbD,EAAQ,SAAW,EACnBA,EAAQ,MAAQ,GAMpBA,EAAQ,aAAe,CAACJ,EAAgB,MAAQ,CAACA,EAAgB,KAM7DK,GAAc,CAACP,GAAa1H,EAAM,IAAG,IAAO,OAAW,CACvD,MAAMwG,EAAgBJ,GAAiB4B,EAAQ,UAAWJ,CAAe,EACzE,GAAIpB,IAAkB,OAAW,CAC7B0B,EAAM,OAAO,IAAM,CACfF,EAAQ,SAASxB,CAAa,EAC9BwB,EAAQ,WAAY,CACpC,CAAa,EACD,MACZ,CACA,CACI,OAAOJ,EAAgB,OACjB,IAAIO,GAAYH,CAAO,EACvB,IAAII,GAA0BJ,CAAO,CAC/C,ECnFA,SAASK,GAAqB,CAAE,cAAAC,EAAe,eAAAC,CAAc,EAAI/Q,EAAK,CAClE,MAAMgR,EAAcF,EAAc,eAAe9Q,CAAG,GAAK+Q,EAAe/Q,CAAG,IAAM,GACjF,OAAA+Q,EAAe/Q,CAAG,EAAI,GACfgR,CACX,CACA,SAASC,GAAcxM,EAAeyM,EAAqB,CAAE,MAAAZ,EAAQ,EAAG,mBAAAa,EAAoB,KAAAC,CAAM,EAAG,GAAI,CACrG,GAAI,CAAE,WAAA9D,EAAa7I,EAAc,qBAAsB,EAAE,cAAA4I,EAAe,GAAG5D,CAAM,EAAKyH,EAClFC,IACA7D,EAAa6D,GACjB,MAAME,EAAa,CAAE,EACfC,EAAqBF,GACvB3M,EAAc,gBACdA,EAAc,eAAe,SAAU,EAAC2M,CAAI,EAChD,UAAWpR,KAAOyJ,EAAQ,CACtB,MAAMjB,EAAQ/D,EAAc,SAASzE,EAAKyE,EAAc,aAAazE,CAAG,GAAK,IAAI,EAC3EuN,EAAc9D,EAAOzJ,CAAG,EAC9B,GAAIuN,IAAgB,QACf+D,GACGT,GAAqBS,EAAoBtR,CAAG,EAChD,SAEJ,MAAMoQ,EAAkB,CACpB,MAAAE,EACA,GAAGD,GAAmB/C,GAAc,CAAE,EAAEtN,CAAG,CAC9C,EAIKuR,EAAe/I,EAAM,IAAK,EAChC,GAAI+I,IAAiB,QACjB,CAAC/I,EAAM,aACP,CAAC,MAAM,QAAQ+E,CAAW,GAC1BA,IAAgBgE,GAChB,CAACnB,EAAgB,SACjB,SAMJ,IAAIF,EAAY,GAChB,GAAI,OAAO,uBAAwB,CAC/B,MAAMsB,EAAW9C,GAAqBjK,CAAa,EACnD,GAAI+M,EAAU,CACV,MAAMC,EAAY,OAAO,uBAAuBD,EAAUxR,EAAK0Q,CAAK,EAChEe,IAAc,OACdrB,EAAgB,UAAYqB,EAC5BvB,EAAY,GAEhC,CACA,CACQ5B,GAAqB7J,EAAezE,CAAG,EACvCwI,EAAM,MAAMyH,GAAmBjQ,EAAKwI,EAAO+E,EAAa9I,EAAc,oBAAsBiN,GAAe,IAAI1R,CAAG,EAC5G,CAAE,KAAM,EAAK,EACboQ,EAAiB3L,EAAeyL,CAAS,CAAC,EAChD,MAAMyB,EAAYnJ,EAAM,UACpBmJ,GACAN,EAAW,KAAKM,CAAS,CAErC,CACI,OAAItE,GACA,QAAQ,IAAIgE,CAAU,EAAE,KAAK,IAAM,CAC/BX,EAAM,OAAO,IAAM,CACfrD,GAAiBe,GAAU3J,EAAe4I,CAAa,CACvE,CAAa,CACb,CAAS,EAEEgE,CACX,CC7EA,SAASO,GAAenN,EAAeoN,EAASrB,EAAU,CAAA,EAAI,CAC1D,MAAMpD,EAAWW,GAAetJ,EAAeoN,EAASrB,EAAQ,OAAS,OACnE/L,EAAc,iBAAiB,OAC/B,MAAS,EACf,GAAI,CAAE,WAAA6I,EAAa7I,EAAc,qBAAsB,GAAI,CAAE,CAAA,EAAK2I,GAAY,CAAE,EAC5EoD,EAAQ,qBACRlD,EAAakD,EAAQ,oBAMzB,MAAMsB,EAAe1E,EACf,IAAM,QAAQ,IAAI6D,GAAcxM,EAAe2I,EAAUoD,CAAO,CAAC,EACjE,IAAM,QAAQ,QAAS,EAKvBuB,EAAqBtN,EAAc,iBAAmBA,EAAc,gBAAgB,KACpF,CAACuN,EAAe,IAAM,CACpB,KAAM,CAAE,cAAArC,EAAgB,EAAG,gBAAAC,EAAiB,iBAAAC,CAAmB,EAAGvC,EAClE,OAAO2E,GAAgBxN,EAAeoN,EAASlC,EAAgBqC,EAAcpC,EAAiBC,EAAkBW,CAAO,CACnI,EACU,IAAM,QAAQ,QAAS,EAKvB,CAAE,KAAAf,CAAI,EAAKnC,EACjB,GAAImC,EAAM,CACN,KAAM,CAACyC,EAAOC,CAAI,EAAI1C,IAAS,iBACzB,CAACqC,EAAcC,CAAkB,EACjC,CAACA,EAAoBD,CAAY,EACvC,OAAOI,EAAO,EAAC,KAAK,IAAMC,EAAI,CAAE,CACxC,KAEQ,QAAO,QAAQ,IAAI,CAACL,EAAY,EAAIC,EAAmBvB,EAAQ,KAAK,CAAC,CAAC,CAE9E,CACA,SAASyB,GAAgBxN,EAAeoN,EAASlC,EAAgB,EAAGC,EAAkB,EAAGC,EAAmB,EAAGW,EAAS,CACpH,MAAMa,EAAa,CAAE,EACfe,GAAsB3N,EAAc,gBAAgB,KAAO,GAAKmL,EAChEyC,EAA0BxC,IAAqB,EAC/C,CAACnO,EAAI,IAAMA,EAAIkO,EACf,CAAClO,EAAI,IAAM0Q,EAAqB1Q,EAAIkO,EAC1C,aAAM,KAAKnL,EAAc,eAAe,EACnC,KAAK6N,EAAe,EACpB,QAAQ,CAAC9R,EAAOkB,IAAM,CACvBlB,EAAM,OAAO,iBAAkBqR,CAAO,EACtCR,EAAW,KAAKO,GAAepR,EAAOqR,EAAS,CAC3C,GAAGrB,EACH,MAAOb,EAAgB0C,EAAwB3Q,CAAC,CAC5D,CAAS,EAAE,KAAK,IAAMlB,EAAM,OAAO,oBAAqBqR,CAAO,CAAC,CAAC,CACjE,CAAK,EACM,QAAQ,IAAIR,CAAU,CACjC,CACA,SAASiB,GAAgBC,EAAGC,EAAG,CAC3B,OAAOD,EAAE,iBAAiBC,CAAC,CAC/B,CC1DA,SAASC,GAAqBhO,EAAewH,EAAYuE,EAAU,CAAA,EAAI,CACnE/L,EAAc,OAAO,iBAAkBwH,CAAU,EACjD,IAAI0F,EACJ,GAAI,MAAM,QAAQ1F,CAAU,EAAG,CAC3B,MAAMoF,EAAapF,EAAW,IAAK4F,GAAYD,GAAenN,EAAeoN,EAASrB,CAAO,CAAC,EAC9FmB,EAAY,QAAQ,IAAIN,CAAU,CAC1C,SACa,OAAOpF,GAAe,SAC3B0F,EAAYC,GAAenN,EAAewH,EAAYuE,CAAO,MAE5D,CACD,MAAMkC,EAAqB,OAAOzG,GAAe,WAC3C8B,GAAetJ,EAAewH,EAAYuE,EAAQ,MAAM,EACxDvE,EACN0F,EAAY,QAAQ,IAAIV,GAAcxM,EAAeiO,EAAoBlC,CAAO,CAAC,CACzF,CACI,OAAOmB,EAAU,KAAK,IAAM,CACxBlN,EAAc,OAAO,oBAAqBwH,CAAU,CAC5D,CAAK,CACL,CCvBA,SAAS0G,GAAeC,EAAMC,EAAM,CAChC,GAAI,CAAC,MAAM,QAAQA,CAAI,EACnB,MAAO,GACX,MAAMC,EAAaD,EAAK,OACxB,GAAIC,IAAeF,EAAK,OACpB,MAAO,GACX,QAAS,EAAI,EAAG,EAAIE,EAAY,IAC5B,GAAID,EAAK,CAAC,IAAMD,EAAK,CAAC,EAClB,MAAO,GAEf,MAAO,EACX,CCRA,MAAMG,GAAkBlP,GAAa,OACrC,SAASmP,GAAkBvO,EAAe,CACtC,GAAI,CAACA,EACD,OACJ,GAAI,CAACA,EAAc,sBAAuB,CACtC,MAAM9E,EAAU8E,EAAc,OACxBuO,GAAkBvO,EAAc,MAAM,GAAK,CAAA,EAC3C,CAAE,EACR,OAAIA,EAAc,MAAM,UAAY,SAChC9E,EAAQ,QAAU8E,EAAc,MAAM,SAEnC9E,CACf,CACI,MAAMA,EAAU,CAAE,EAClB,QAAS+B,EAAI,EAAGA,EAAIqR,GAAiBrR,IAAK,CACtC,MAAMY,EAAOuB,GAAanC,CAAC,EACrB0C,EAAOK,EAAc,MAAMnC,CAAI,GACjCqB,GAAeS,CAAI,GAAKA,IAAS,MACjCzE,EAAQ2C,CAAI,EAAI8B,EAE5B,CACI,OAAOzE,CACX,CChBA,MAAMsT,GAAuB,CAAC,GAAGrP,EAAoB,EAAE,QAAS,EAC1DsP,GAAoBtP,GAAqB,OAC/C,SAASuP,GAAY1O,EAAe,CAChC,OAAQ4M,GAAe,QAAQ,IAAIA,EAAW,IAAI,CAAC,CAAE,UAAAM,EAAW,QAAAnB,CAAO,IAAOiC,GAAqBhO,EAAekN,EAAWnB,CAAO,CAAC,CAAC,CAC1I,CACA,SAAS4C,GAAqB3O,EAAe,CACzC,IAAIR,EAAUkP,GAAY1O,CAAa,EACnCsE,EAAQsK,GAAa,EACrBnS,EAAkB,GAKtB,MAAMoS,EAA2BlC,GAAS,CAACmC,EAAKtH,IAAe,CAC3D,MAAMmB,EAAWW,GAAetJ,EAAewH,EAAYmF,IAAS,OAC9D3M,EAAc,iBAAiB,OAC/B,MAAS,EACf,GAAI2I,EAAU,CACV,KAAM,CAAE,WAAAE,EAAY,cAAAD,EAAe,GAAG5D,CAAQ,EAAG2D,EACjDmG,EAAM,CAAE,GAAGA,EAAK,GAAG9J,EAAQ,GAAG4D,CAAe,CACzD,CACQ,OAAOkG,CACV,EAKD,SAASC,EAAmBC,EAAc,CACtCxP,EAAUwP,EAAahP,CAAa,CAC5C,CAWI,SAASiP,EAAeC,EAAmB,CACvC,KAAM,CAAE,MAAAtR,CAAK,EAAKoC,EACZ9E,EAAUqT,GAAkBvO,EAAc,MAAM,GAAK,CAAE,EAKvD4M,EAAa,CAAE,EAKfuC,EAAc,IAAI,IAMxB,IAAIC,EAAkB,CAAE,EAKpBC,EAAsB,IAO1B,QAASpS,EAAI,EAAGA,EAAIwR,GAAmBxR,IAAK,CACxC,MAAM0P,EAAO6B,GAAqBvR,CAAC,EAC7BqS,EAAYhL,EAAMqI,CAAI,EACtBhN,EAAO/B,EAAM+O,CAAI,IAAM,OACvB/O,EAAM+O,CAAI,EACVzR,EAAQyR,CAAI,EACZ4C,EAAgBrQ,GAAeS,CAAI,EAKnC6P,EAAc7C,IAASuC,EAAoBI,EAAU,SAAW,KAClEE,IAAgB,KAChBH,EAAsBpS,GAO1B,IAAIwS,EAAc9P,IAASzE,EAAQyR,CAAI,GACnChN,IAAS/B,EAAM+O,CAAI,GACnB4C,EAeJ,GAXIE,GACAhT,GACAuD,EAAc,yBACdyP,EAAc,IAMlBH,EAAU,cAAgB,CAAE,GAAGF,CAAiB,EAI/C,CAACE,EAAU,UAAYE,IAAgB,MAEnC,CAAC7P,GAAQ,CAAC2P,EAAU,UAErBtQ,GAAoBW,CAAI,GACxB,OAAOA,GAAS,UAChB,SAOJ,MAAM+P,EAAmBC,GAAuBL,EAAU,SAAU3P,CAAI,EACxE,IAAIiQ,EAAoBF,GAEnB/C,IAASuC,GACNI,EAAU,UACV,CAACG,GACDF,GAEHtS,EAAIoS,GAAuBE,EAC5BM,EAAuB,GAK3B,MAAMC,GAAiB,MAAM,QAAQnQ,CAAI,EAAIA,EAAO,CAACA,CAAI,EAKzD,IAAIoQ,EAAiBD,GAAe,OAAOjB,EAAwBlC,CAAI,EAAG,EAAE,EACxE6C,IAAgB,KAChBO,EAAiB,CAAE,GAUvB,KAAM,CAAE,mBAAAC,GAAqB,CAAE,CAAA,EAAKV,EAC9BW,GAAU,CACZ,GAAGD,GACH,GAAGD,CACN,EACKG,GAAiB3U,GAAQ,CAC3BqU,EAAoB,GAChBT,EAAY,IAAI5T,CAAG,IACnBsU,EAAuB,GACvBV,EAAY,OAAO5T,CAAG,GAE1B+T,EAAU,eAAe/T,CAAG,EAAI,GAChC,MAAMkO,EAAczJ,EAAc,SAASzE,CAAG,EAC1CkO,IACAA,EAAY,UAAY,GAC/B,EACD,UAAWlO,KAAO0U,GAAS,CACvB,MAAM9B,EAAO4B,EAAexU,CAAG,EACzB6S,GAAO4B,GAAmBzU,CAAG,EAEnC,GAAI6T,EAAgB,eAAe7T,CAAG,EAClC,SAIJ,IAAI4U,GAAkB,GAClB5G,GAAkB4E,CAAI,GAAK5E,GAAkB6E,EAAI,EACjD+B,GAAkB,CAACjC,GAAeC,EAAMC,EAAI,EAG5C+B,GAAkBhC,IAASC,GAE3B+B,GAC0BhC,GAAS,KAE/B+B,GAAc3U,CAAG,EAIjB4T,EAAY,IAAI5T,CAAG,EAGlB4S,IAAS,QAAagB,EAAY,IAAI5T,CAAG,EAK9C2U,GAAc3U,CAAG,EAOjB+T,EAAU,cAAc/T,CAAG,EAAI,EAEnD,CAKY+T,EAAU,SAAW3P,EACrB2P,EAAU,mBAAqBS,EAI3BT,EAAU,WACVF,EAAkB,CAAE,GAAGA,EAAiB,GAAGW,CAAgB,GAE3DtT,GAAmBuD,EAAc,wBACjC4P,EAAoB,IAQpBA,IADmB,EADMH,GAAeC,IACIG,IAE5CjD,EAAW,KAAK,GAAGkD,GAAe,IAAK5C,IAAe,CAClD,UAAWA,EACX,QAAS,CAAE,KAAAP,CAAM,CACpB,EAAC,CAAC,CAEnB,CAMQ,GAAIwC,EAAY,KAAM,CAClB,MAAMiB,EAAoB,CAAE,EAK5B,GAAI,OAAOxS,EAAM,SAAY,UAAW,CACpC,MAAMyS,EAAoB/G,GAAetJ,EAAe,MAAM,QAAQpC,EAAM,OAAO,EAC7EA,EAAM,QAAQ,CAAC,EACfA,EAAM,OAAO,EACfyS,GAAqBA,EAAkB,aACvCD,EAAkB,WAAaC,EAAkB,WAErE,CACYlB,EAAY,QAAS5T,GAAQ,CACzB,MAAM+U,EAAiBtQ,EAAc,cAAczE,CAAG,EAChDkO,EAAczJ,EAAc,SAASzE,CAAG,EAC1CkO,IACAA,EAAY,UAAY,IAE5B2G,EAAkB7U,CAAG,EAAI+U,GAAkB,IAC3D,CAAa,EACD1D,EAAW,KAAK,CAAE,UAAWwD,CAAiB,CAAE,CAC5D,CACQ,IAAIG,EAAgB,EAAQ3D,EAAW,OACvC,OAAInQ,IACCmB,EAAM,UAAY,IAASA,EAAM,UAAYA,EAAM,UACpD,CAACoC,EAAc,yBACfuQ,EAAgB,IAEpB9T,EAAkB,GACX8T,EAAgB/Q,EAAQoN,CAAU,EAAI,QAAQ,QAAS,CACtE,CAII,SAAS4D,EAAU7D,EAAM8D,EAAU,CAE/B,GAAInM,EAAMqI,CAAI,EAAE,WAAa8D,EACzB,OAAO,QAAQ,QAAS,EAE5BzQ,EAAc,iBAAiB,QAASjE,GAAUA,EAAM,gBAAgB,UAAU4Q,EAAM8D,CAAQ,CAAC,EACjGnM,EAAMqI,CAAI,EAAE,SAAW8D,EACvB,MAAM7D,EAAaqC,EAAetC,CAAI,EACtC,UAAWpR,KAAO+I,EACdA,EAAM/I,CAAG,EAAE,cAAgB,CAAE,EAEjC,OAAOqR,CACf,CACI,MAAO,CACH,eAAAqC,EACA,UAAAuB,EACA,mBAAAzB,EACA,SAAU,IAAMzK,EAChB,MAAO,IAAM,CACTA,EAAQsK,GAAa,EACrBnS,EAAkB,EACrB,CACJ,CACL,CACA,SAASkT,GAAuBvB,EAAMD,EAAM,CACxC,OAAI,OAAOA,GAAS,SACTA,IAASC,EAEX,MAAM,QAAQD,CAAI,EAChB,CAACD,GAAeC,EAAMC,CAAI,EAE9B,EACX,CACA,SAASsC,EAAgBD,EAAW,GAAO,CACvC,MAAO,CACH,SAAAA,EACA,cAAe,CAAE,EACjB,eAAgB,CAAE,EAClB,mBAAoB,CAAE,CACzB,CACL,CACA,SAAS7B,IAAc,CACnB,MAAO,CACH,QAAS8B,EAAgB,EAAI,EAC7B,YAAaA,EAAiB,EAC9B,WAAYA,EAAiB,EAC7B,SAAUA,EAAiB,EAC3B,UAAWA,EAAiB,EAC5B,WAAYA,EAAiB,EAC7B,KAAMA,EAAiB,CAC1B,CACL,CCnVA,MAAMC,CAAQ,CACV,YAAYC,EAAM,CACd,KAAK,UAAY,GACjB,KAAK,KAAOA,CACpB,CACI,QAAS,CAAA,CACb,CCFA,MAAMC,WAAyBF,CAAQ,CAMnC,YAAYC,EAAM,CACd,MAAMA,CAAI,EACVA,EAAK,iBAAmBA,EAAK,eAAiBjC,GAAqBiC,CAAI,EAC/E,CACI,qCAAsC,CAClC,KAAM,CAAE,QAAApR,CAAS,EAAG,KAAK,KAAK,SAAU,EACpCR,GAAoBQ,CAAO,IAC3B,KAAK,gBAAkBA,EAAQ,UAAU,KAAK,IAAI,EAE9D,CAII,OAAQ,CACJ,KAAK,oCAAqC,CAClD,CACI,QAAS,CACL,KAAM,CAAE,QAAAA,CAAS,EAAG,KAAK,KAAK,SAAU,EAClC,CAAE,QAASsR,CAAW,EAAK,KAAK,KAAK,WAAa,CAAE,EACtDtR,IAAYsR,GACZ,KAAK,oCAAqC,CAEtD,CACI,SAAU,CACN,KAAK,KAAK,eAAe,MAAO,EAChC,KAAK,kBAAmB,CAChC,CACA,CCnCA,IAAInX,GAAK,EACT,MAAMoX,WAA6BJ,CAAQ,CACvC,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,GAAKhX,IAClB,CACI,QAAS,CACL,GAAI,CAAC,KAAK,KAAK,gBACX,OACJ,KAAM,CAAE,UAAAF,EAAW,eAAAkB,CAAgB,EAAG,KAAK,KAAK,gBAC1C,CAAE,UAAWqW,CAAa,EAAK,KAAK,KAAK,qBAAuB,CAAE,EACxE,GAAI,CAAC,KAAK,KAAK,gBAAkBvX,IAAcuX,EAC3C,OAEJ,MAAMC,EAAgB,KAAK,KAAK,eAAe,UAAU,OAAQ,CAACxX,CAAS,EACvEkB,GAAkB,CAAClB,GACnBwX,EAAc,KAAK,IAAM,CACrBtW,EAAe,KAAK,EAAE,CACtC,CAAa,CAEb,CACI,OAAQ,CACJ,KAAM,CAAE,SAAAgB,EAAU,eAAAhB,CAAc,EAAK,KAAK,KAAK,iBAAmB,CAAE,EAChEA,GACAA,EAAe,KAAK,EAAE,EAEtBgB,IACA,KAAK,QAAUA,EAAS,KAAK,EAAE,EAE3C,CACI,SAAU,CAAA,CACd,CC9BA,MAAMiR,GAAa,CACf,UAAW,CACP,QAASiE,EACZ,EACD,KAAM,CACF,QAASE,EACZ,CACL,ECVA,SAASG,GAAYlM,EAAQmM,EAAWC,EAASrF,EAAU,CAAE,QAAS,IAAQ,CAC1E,OAAA/G,EAAO,iBAAiBmM,EAAWC,EAASrF,CAAO,EAC5C,IAAM/G,EAAO,oBAAoBmM,EAAWC,CAAO,CAC9D,CCDA,SAASC,GAAiBC,EAAO,CAC7B,MAAO,CACH,MAAO,CACH,EAAGA,EAAM,MACT,EAAGA,EAAM,KACZ,CACJ,CACL,CACA,MAAMC,GAAkBH,GACZE,GAAUE,GAAiBF,CAAK,GAAKF,EAAQE,EAAOD,GAAiBC,CAAK,CAAC,ECRvF,SAASG,EAAgBzM,EAAQmM,EAAWC,EAASrF,EAAS,CAC1D,OAAOmF,GAAYlM,EAAQmM,EAAWI,GAAeH,CAAO,EAAGrF,CAAO,CAC1E,CCAA,SAAS2F,GAAwB,CAAE,IAAAxX,EAAK,KAAAC,EAAM,MAAAC,EAAO,OAAAuX,CAAM,EAAK,CAC5D,MAAO,CACH,EAAG,CAAE,IAAKxX,EAAM,IAAKC,CAAO,EAC5B,EAAG,CAAE,IAAKF,EAAK,IAAKyX,CAAQ,CAC/B,CACL,CACA,SAASC,GAAwB,CAAE,EAAAvX,EAAG,EAAAwX,GAAK,CACvC,MAAO,CAAE,IAAKA,EAAE,IAAK,MAAOxX,EAAE,IAAK,OAAQwX,EAAE,IAAK,KAAMxX,EAAE,GAAK,CACnE,CAMA,SAASyX,GAAmBC,EAAOC,EAAgB,CAC/C,GAAI,CAACA,EACD,OAAOD,EACX,MAAME,EAAUD,EAAe,CAAE,EAAGD,EAAM,KAAM,EAAGA,EAAM,IAAK,EACxDG,EAAcF,EAAe,CAAE,EAAGD,EAAM,MAAO,EAAGA,EAAM,OAAQ,EACtE,MAAO,CACH,IAAKE,EAAQ,EACb,KAAMA,EAAQ,EACd,OAAQC,EAAY,EACpB,MAAOA,EAAY,CACtB,CACL,CC5BA,MAAMC,GAAkB,KAClBC,GAAY,EAAID,GAChBE,GAAY,EAAIF,GAChBG,GAAsB,IACtBC,GAAgB,EAAID,GACpBE,GAAgB,EAAIF,GAC1B,SAASG,EAAWC,EAAM,CACtB,OAAOA,EAAK,IAAMA,EAAK,GAC3B,CACA,SAASC,GAAO5O,EAAOiB,EAAQ4N,EAAa,CACxC,OAAO,KAAK,IAAI7O,EAAQiB,CAAM,GAAK4N,CACvC,CACA,SAASC,GAAcC,EAAO7N,EAAQD,EAAQ+N,EAAS,GAAK,CACxDD,EAAM,OAASC,EACfD,EAAM,YAAcE,EAAU/N,EAAO,IAAKA,EAAO,IAAK6N,EAAM,MAAM,EAClEA,EAAM,MAAQL,EAAWzN,CAAM,EAAIyN,EAAWxN,CAAM,EACpD6N,EAAM,UACFE,EAAUhO,EAAO,IAAKA,EAAO,IAAK8N,EAAM,MAAM,EAAIA,EAAM,aACvDA,EAAM,OAASV,IAAaU,EAAM,OAAST,IAC5C,MAAMS,EAAM,KAAK,KACjBA,EAAM,MAAQ,IAEbA,EAAM,WAAaP,IACpBO,EAAM,WAAaN,IACnB,MAAMM,EAAM,SAAS,KACrBA,EAAM,UAAY,EAE1B,CACA,SAASG,GAAaH,EAAO7N,EAAQD,EAAQ+N,EAAQ,CACjDF,GAAcC,EAAM,EAAG7N,EAAO,EAAGD,EAAO,EAAG+N,EAASA,EAAO,QAAU,MAAS,EAC9EF,GAAcC,EAAM,EAAG7N,EAAO,EAAGD,EAAO,EAAG+N,EAASA,EAAO,QAAU,MAAS,CAClF,CACA,SAASG,GAAiBlO,EAAQmO,EAAUha,EAAQ,CAChD6L,EAAO,IAAM7L,EAAO,IAAMga,EAAS,IACnCnO,EAAO,IAAMA,EAAO,IAAMyN,EAAWU,CAAQ,CACjD,CACA,SAASC,GAAgBpO,EAAQmO,EAAUha,EAAQ,CAC/C+Z,GAAiBlO,EAAO,EAAGmO,EAAS,EAAGha,EAAO,CAAC,EAC/C+Z,GAAiBlO,EAAO,EAAGmO,EAAS,EAAGha,EAAO,CAAC,CACnD,CACA,SAASka,GAAyBrO,EAAQxD,EAAQrI,EAAQ,CACtD6L,EAAO,IAAMxD,EAAO,IAAMrI,EAAO,IACjC6L,EAAO,IAAMA,EAAO,IAAMyN,EAAWjR,CAAM,CAC/C,CACA,SAAS8R,GAAqBtO,EAAQxD,EAAQrI,EAAQ,CAClDka,GAAyBrO,EAAO,EAAGxD,EAAO,EAAGrI,EAAO,CAAC,EACrDka,GAAyBrO,EAAO,EAAGxD,EAAO,EAAGrI,EAAO,CAAC,CACzD,CCjDA,MAAMoa,GAAkB,KAAO,CAC3B,UAAW,EACX,MAAO,EACP,OAAQ,EACR,YAAa,CACjB,GACMC,EAAc,KAAO,CACvB,EAAGD,GAAiB,EACpB,EAAGA,GAAiB,CACxB,GACME,GAAa,KAAO,CAAE,IAAK,EAAG,IAAK,CAAC,GACpCC,EAAY,KAAO,CACrB,EAAGD,GAAY,EACf,EAAGA,GAAY,CACnB,GCdA,SAASE,EAASC,EAAU,CACxB,MAAO,CAACA,EAAS,GAAG,EAAGA,EAAS,GAAG,CAAC,CACxC,CCFA,SAASC,GAAgBC,EAAO,CAC5B,OAAOA,IAAU,QAAaA,IAAU,CAC5C,CACA,SAASC,GAAS,CAAE,MAAAD,EAAO,OAAAE,EAAQ,OAAAC,CAAM,EAAI,CACzC,MAAQ,CAACJ,GAAgBC,CAAK,GAC1B,CAACD,GAAgBG,CAAM,GACvB,CAACH,GAAgBI,CAAM,CAC/B,CACA,SAASxP,EAAa2D,EAAQ,CAC1B,OAAQ2L,GAAS3L,CAAM,GACnB8L,GAAe9L,CAAM,GACrBA,EAAO,GACPA,EAAO,QACPA,EAAO,SACPA,EAAO,SACPA,EAAO,OACPA,EAAO,KACf,CACA,SAAS8L,GAAe9L,EAAQ,CAC5B,OAAO+L,GAAc/L,EAAO,CAAC,GAAK+L,GAAc/L,EAAO,CAAC,CAC5D,CACA,SAAS+L,GAAcpQ,EAAO,CAC1B,OAAOA,GAASA,IAAU,IAC9B,CCjBA,SAASqQ,GAAWrC,EAAO+B,EAAOO,EAAa,CAC3C,MAAMC,EAAqBvC,EAAQsC,EAC7BE,EAAST,EAAQQ,EACvB,OAAOD,EAAcE,CACzB,CAIA,SAASC,GAAgBzC,EAAO0C,EAAWX,EAAOO,EAAaK,EAAU,CACrE,OAAIA,IAAa,SACb3C,EAAQqC,GAAWrC,EAAO2C,EAAUL,CAAW,GAE5CD,GAAWrC,EAAO+B,EAAOO,CAAW,EAAII,CACnD,CAIA,SAASE,GAAejC,EAAM+B,EAAY,EAAGX,EAAQ,EAAGO,EAAaK,EAAU,CAC3EhC,EAAK,IAAM8B,GAAgB9B,EAAK,IAAK+B,EAAWX,EAAOO,EAAaK,CAAQ,EAC5EhC,EAAK,IAAM8B,GAAgB9B,EAAK,IAAK+B,EAAWX,EAAOO,EAAaK,CAAQ,CAChF,CAIA,SAASE,GAAcC,EAAK,CAAE,EAAAxa,EAAG,EAAAwX,CAAC,EAAI,CAClC8C,GAAeE,EAAI,EAAGxa,EAAE,UAAWA,EAAE,MAAOA,EAAE,WAAW,EACzDsa,GAAeE,EAAI,EAAGhD,EAAE,UAAWA,EAAE,MAAOA,EAAE,WAAW,CAC7D,CACA,MAAMiD,GAAsB,cACtBC,GAAsB,gBAO5B,SAASC,GAAgBH,EAAKI,EAAWC,EAAUC,EAAqB,GAAO,CAC3E,MAAMC,EAAaF,EAAS,OAC5B,GAAI,CAACE,EACD,OAEJH,EAAU,EAAIA,EAAU,EAAI,EAC5B,IAAIrE,EACAkC,EACJ,QAAS7V,EAAI,EAAGA,EAAImY,EAAYnY,IAAK,CACjC2T,EAAOsE,EAASjY,CAAC,EACjB6V,EAAQlC,EAAK,gBAKb,KAAM,CAAE,cAAA5Q,GAAkB4Q,EAAK,QAC3B5Q,GACAA,EAAc,MAAM,OACpBA,EAAc,MAAM,MAAM,UAAY,aAGtCmV,GACAvE,EAAK,QAAQ,cACbA,EAAK,QACLA,IAASA,EAAK,MACdyE,EAAaR,EAAK,CACd,EAAG,CAACjE,EAAK,OAAO,OAAO,EACvB,EAAG,CAACA,EAAK,OAAO,OAAO,CACvC,CAAa,EAEDkC,IAEAmC,EAAU,GAAKnC,EAAM,EAAE,MACvBmC,EAAU,GAAKnC,EAAM,EAAE,MAEvB8B,GAAcC,EAAK/B,CAAK,GAExBqC,GAAsB1Q,EAAamM,EAAK,YAAY,GACpDyE,EAAaR,EAAKjE,EAAK,YAAY,EAE/C,CAKQqE,EAAU,EAAIF,IACdE,EAAU,EAAIH,KACdG,EAAU,EAAI,GAEdA,EAAU,EAAIF,IACdE,EAAU,EAAIH,KACdG,EAAU,EAAI,EAEtB,CACA,SAASK,EAAc5C,EAAM6C,EAAU,CACnC7C,EAAK,IAAMA,EAAK,IAAM6C,EACtB7C,EAAK,IAAMA,EAAK,IAAM6C,CAC1B,CAMA,SAASC,GAAc9C,EAAM+C,EAAeC,EAAWhB,EAAUiB,EAAa,GAAK,CAC/E,MAAMtB,EAAcrB,EAAUN,EAAK,IAAKA,EAAK,IAAKiD,CAAU,EAE5DhB,GAAejC,EAAM+C,EAAeC,EAAWrB,EAAaK,CAAQ,CACxE,CAIA,SAASW,EAAaR,EAAKlR,EAAW,CAClC6R,GAAcX,EAAI,EAAGlR,EAAU,EAAGA,EAAU,OAAQA,EAAU,MAAOA,EAAU,OAAO,EACtF6R,GAAcX,EAAI,EAAGlR,EAAU,EAAGA,EAAU,OAAQA,EAAU,MAAOA,EAAU,OAAO,CAC1F,CCjHA,SAASiS,GAAmB1V,EAAU8R,EAAgB,CAClD,OAAON,GAAwBI,GAAmB5R,EAAS,sBAAuB,EAAE8R,CAAc,CAAC,CACvG,CACA,SAAS6D,GAAe3c,EAAS4c,EAAoBC,EAAoB,CACrE,MAAMC,EAAcJ,GAAmB1c,EAAS6c,CAAkB,EAC5D,CAAE,OAAAE,CAAM,EAAKH,EACnB,OAAIG,IACAX,EAAcU,EAAY,EAAGC,EAAO,OAAO,CAAC,EAC5CX,EAAcU,EAAY,EAAGC,EAAO,OAAO,CAAC,GAEzCD,CACX,CCbA,MAAME,GAAmB,CAAC,CAAE,QAAAzO,KACjBA,EAAUA,EAAQ,cAAc,YAAc,KCFnD8N,GAAW,CAACzH,EAAGC,IAAM,KAAK,IAAID,EAAIC,CAAC,EACzC,SAASoI,GAAWrI,EAAGC,EAAG,CAEtB,MAAMqI,EAASb,GAASzH,EAAE,EAAGC,EAAE,CAAC,EAC1BsI,EAASd,GAASzH,EAAE,EAAGC,EAAE,CAAC,EAChC,OAAO,KAAK,KAAKqI,GAAU,EAAIC,GAAU,CAAC,CAC9C,CCGA,MAAMC,EAAW,CACb,YAAYhF,EAAOiF,EAAU,CAAE,mBAAAR,EAAoB,cAAAS,EAAe,iBAAAC,EAAmB,EAAQ,EAAG,GAAI,CAgEhG,GA5DA,KAAK,WAAa,KAIlB,KAAK,cAAgB,KAIrB,KAAK,kBAAoB,KAIzB,KAAK,SAAW,CAAE,EAIlB,KAAK,cAAgB,OACrB,KAAK,YAAc,IAAM,CACrB,GAAI,EAAE,KAAK,eAAiB,KAAK,mBAC7B,OACJ,MAAMC,EAAOC,GAAW,KAAK,kBAAmB,KAAK,OAAO,EACtDC,EAAe,KAAK,aAAe,KAInCC,EAA0BV,GAAWO,EAAK,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAG,CAAA,GAAK,EAC3E,GAAI,CAACE,GAAgB,CAACC,EAClB,OACJ,KAAM,CAAE,MAAA9E,CAAK,EAAK2E,EACZ,CAAE,UAAAI,CAAS,EAAKC,EACtB,KAAK,QAAQ,KAAK,CAAE,GAAGhF,EAAO,UAAA+E,CAAS,CAAE,EACzC,KAAM,CAAE,QAAAE,EAAS,OAAAC,CAAQ,EAAG,KAAK,SAC5BL,IACDI,GAAWA,EAAQ,KAAK,cAAeN,CAAI,EAC3C,KAAK,WAAa,KAAK,eAE3BO,GAAUA,EAAO,KAAK,cAAeP,CAAI,CAC5C,EACD,KAAK,kBAAoB,CAACpF,EAAOoF,IAAS,CACtC,KAAK,cAAgBpF,EACrB,KAAK,kBAAoBU,GAAe0E,EAAM,KAAK,kBAAkB,EAErEzK,EAAM,OAAO,KAAK,YAAa,EAAI,CACtC,EACD,KAAK,gBAAkB,CAACqF,EAAOoF,IAAS,CACpC,KAAK,IAAK,EACV,KAAM,CAAE,MAAAQ,EAAO,aAAAC,EAAc,gBAAAC,CAAiB,EAAG,KAAK,SAGtD,GAFI,KAAK,kBACLA,GAAmBA,EAAiB,EACpC,EAAE,KAAK,eAAiB,KAAK,mBAC7B,OACJ,MAAMC,EAAUV,GAAWrF,EAAM,OAAS,gBACpC,KAAK,kBACLU,GAAe0E,EAAM,KAAK,kBAAkB,EAAG,KAAK,OAAO,EAC7D,KAAK,YAAcQ,GACnBA,EAAM5F,EAAO+F,CAAO,EAExBF,GAAgBA,EAAa7F,EAAO+F,CAAO,CAC9C,EAEG,CAAC7F,GAAiBF,CAAK,EACvB,OACJ,KAAK,iBAAmBmF,EACxB,KAAK,SAAWF,EAChB,KAAK,mBAAqBR,EAC1B,KAAK,cAAgBS,GAAiB,OACtC,MAAME,EAAOrF,GAAiBC,CAAK,EAC7BgG,EAActF,GAAe0E,EAAM,KAAK,kBAAkB,EAC1D,CAAE,MAAA3E,CAAK,EAAKuF,EACZ,CAAE,UAAAR,CAAS,EAAKC,EACtB,KAAK,QAAU,CAAC,CAAE,GAAGhF,EAAO,UAAA+E,CAAS,CAAE,EACvC,KAAM,CAAE,eAAAS,CAAc,EAAKhB,EAC3BgB,GACIA,EAAejG,EAAOqF,GAAWW,EAAa,KAAK,OAAO,CAAC,EAC/D,KAAK,gBAAkBE,GAAK/F,EAAgB,KAAK,cAAe,cAAe,KAAK,iBAAiB,EAAGA,EAAgB,KAAK,cAAe,YAAa,KAAK,eAAe,EAAGA,EAAgB,KAAK,cAAe,gBAAiB,KAAK,eAAe,CAAC,CAClQ,CACI,eAAe8E,EAAU,CACrB,KAAK,SAAWA,CACxB,CACI,KAAM,CACF,KAAK,iBAAmB,KAAK,gBAAiB,EAC9CkB,EAAY,KAAK,WAAW,CACpC,CACA,CACA,SAASzF,GAAe0E,EAAMX,EAAoB,CAC9C,OAAOA,EAAqB,CAAE,MAAOA,EAAmBW,EAAK,KAAK,CAAC,EAAKA,CAC5E,CACA,SAASgB,GAAc5J,EAAGC,EAAG,CACzB,MAAO,CAAE,EAAGD,EAAE,EAAIC,EAAE,EAAG,EAAGD,EAAE,EAAIC,EAAE,CAAG,CACzC,CACA,SAAS4I,GAAW,CAAE,MAAA5E,CAAO,EAAE4F,EAAS,CACpC,MAAO,CACH,MAAA5F,EACA,MAAO2F,GAAc3F,EAAO6F,GAAgBD,CAAO,CAAC,EACpD,OAAQD,GAAc3F,EAAO8F,GAAiBF,CAAO,CAAC,EACtD,SAAUG,GAAYH,EAAS,EAAG,CACrC,CACL,CACA,SAASE,GAAiBF,EAAS,CAC/B,OAAOA,EAAQ,CAAC,CACpB,CACA,SAASC,GAAgBD,EAAS,CAC9B,OAAOA,EAAQA,EAAQ,OAAS,CAAC,CACrC,CACA,SAASG,GAAYH,EAASI,EAAW,CACrC,GAAIJ,EAAQ,OAAS,EACjB,MAAO,CAAE,EAAG,EAAG,EAAG,CAAG,EAEzB,IAAI1a,EAAI0a,EAAQ,OAAS,EACrBK,EAAmB,KACvB,MAAMC,EAAYL,GAAgBD,CAAO,EACzC,KAAO1a,GAAK,IACR+a,EAAmBL,EAAQ1a,CAAC,EACxB,EAAAgb,EAAU,UAAYD,EAAiB,UACvClM,GAAsBiM,CAAS,KAGnC9a,IAEJ,GAAI,CAAC+a,EACD,MAAO,CAAE,EAAG,EAAG,EAAG,CAAG,EAEzB,MAAME,EAAOC,GAAsBF,EAAU,UAAYD,EAAiB,SAAS,EACnF,GAAIE,IAAS,EACT,MAAO,CAAE,EAAG,EAAG,EAAG,CAAG,EAEzB,MAAME,EAAkB,CACpB,GAAIH,EAAU,EAAID,EAAiB,GAAKE,EACxC,GAAID,EAAU,EAAID,EAAiB,GAAKE,CAC3C,EACD,OAAIE,EAAgB,IAAM,MACtBA,EAAgB,EAAI,GAEpBA,EAAgB,IAAM,MACtBA,EAAgB,EAAI,GAEjBA,CACX,CC9IA,SAASC,GAAiBtG,EAAO,CAAE,IAAAuG,EAAK,IAAAC,CAAG,EAAIC,EAAS,CACpD,OAAIF,IAAQ,QAAavG,EAAQuG,EAE7BvG,EAAQyG,EACFxF,EAAUsF,EAAKvG,EAAOyG,EAAQ,GAAG,EACjC,KAAK,IAAIzG,EAAOuG,CAAG,EAEpBC,IAAQ,QAAaxG,EAAQwG,IAElCxG,EAAQyG,EACFxF,EAAUuF,EAAKxG,EAAOyG,EAAQ,GAAG,EACjC,KAAK,IAAIzG,EAAOwG,CAAG,GAEtBxG,CACX,CAMA,SAAS0G,GAA4B/F,EAAM4F,EAAKC,EAAK,CACjD,MAAO,CACH,IAAKD,IAAQ,OAAY5F,EAAK,IAAM4F,EAAM,OAC1C,IAAKC,IAAQ,OACP7F,EAAK,IAAM6F,GAAO7F,EAAK,IAAMA,EAAK,KAClC,MACT,CACL,CAKA,SAASgG,GAAwBC,EAAW,CAAE,IAAAze,EAAK,KAAAC,EAAM,OAAAwX,EAAQ,MAAAvX,GAAS,CACtE,MAAO,CACH,EAAGqe,GAA4BE,EAAU,EAAGxe,EAAMC,CAAK,EACvD,EAAGqe,GAA4BE,EAAU,EAAGze,EAAKyX,CAAM,CAC1D,CACL,CAIA,SAASiH,GAA4BC,EAAYC,EAAiB,CAC9D,IAAIR,EAAMQ,EAAgB,IAAMD,EAAW,IACvCN,EAAMO,EAAgB,IAAMD,EAAW,IAG3C,OAAIC,EAAgB,IAAMA,EAAgB,IACtCD,EAAW,IAAMA,EAAW,MAC5B,CAACP,EAAKC,CAAG,EAAI,CAACA,EAAKD,CAAG,GAEnB,CAAE,IAAAA,EAAK,IAAAC,CAAK,CACvB,CAIA,SAASQ,GAAwBJ,EAAWK,EAAgB,CACxD,MAAO,CACH,EAAGJ,GAA4BD,EAAU,EAAGK,EAAe,CAAC,EAC5D,EAAGJ,GAA4BD,EAAU,EAAGK,EAAe,CAAC,CAC/D,CACL,CAKA,SAASC,GAAWhU,EAAQD,EAAQ,CAChC,IAAI+N,EAAS,GACb,MAAMmG,EAAezG,EAAWxN,CAAM,EAChCkU,EAAe1G,EAAWzN,CAAM,EACtC,OAAImU,EAAeD,EACfnG,EAASqG,GAASpU,EAAO,IAAKA,EAAO,IAAMkU,EAAcjU,EAAO,GAAG,EAE9DiU,EAAeC,IACpBpG,EAASqG,GAASnU,EAAO,IAAKA,EAAO,IAAMkU,EAAcnU,EAAO,GAAG,GAEhEqU,GAAM,EAAG,EAAGtG,CAAM,CAC7B,CAIA,SAASuG,GAAsB9X,EAAQ+X,EAAa,CAChD,MAAMC,EAAsB,CAAE,EAC9B,OAAID,EAAY,MAAQ,SACpBC,EAAoB,IAAMD,EAAY,IAAM/X,EAAO,KAEnD+X,EAAY,MAAQ,SACpBC,EAAoB,IAAMD,EAAY,IAAM/X,EAAO,KAEhDgY,CACX,CACA,MAAMC,GAAiB,IAIvB,SAASC,GAAmBC,EAAcF,GAAgB,CACtD,OAAIE,IAAgB,GAChBA,EAAc,EAETA,IAAgB,KACrBA,EAAcF,IAEX,CACH,EAAGG,GAAmBD,EAAa,OAAQ,OAAO,EAClD,EAAGC,GAAmBD,EAAa,MAAO,QAAQ,CACrD,CACL,CACA,SAASC,GAAmBD,EAAaE,EAAUC,EAAU,CACzD,MAAO,CACH,IAAKC,GAAoBJ,EAAaE,CAAQ,EAC9C,IAAKE,GAAoBJ,EAAaG,CAAQ,CACjD,CACL,CACA,SAASC,GAAoBJ,EAAaK,EAAO,CAC7C,OAAO,OAAOL,GAAgB,SACxBA,EACAA,EAAYK,CAAK,GAAK,CAChC,CC5GA,MAAMC,GAAsB,IAAI,QAKhC,MAAMC,EAA0B,CAC5B,YAAYla,EAAe,CACvB,KAAK,aAAe,KACpB,KAAK,WAAa,GAClB,KAAK,iBAAmB,KACxB,KAAK,YAAc,CAAE,EAAG,EAAG,EAAG,CAAG,EAIjC,KAAK,YAAc,GACnB,KAAK,sBAAwB,GAI7B,KAAK,QAAU0T,EAAW,EAC1B,KAAK,cAAgB1T,CAC7B,CACI,MAAMma,EAAa,CAAE,aAAAC,EAAe,EAAK,EAAK,CAAA,EAAI,CAI9C,KAAM,CAAE,gBAAAvZ,GAAoB,KAAK,cACjC,GAAIA,GAAmBA,EAAgB,YAAc,GACjD,OACJ,MAAM0W,EAAkBjG,GAAU,CAC9B,KAAM,CAAE,iBAAAmF,CAAgB,EAAK,KAAK,SAAU,EAG5CA,EAAmB,KAAK,iBAAmB,KAAK,cAAe,EAC3D2D,GACA,KAAK,aAAa/I,GAAiBC,CAAK,EAAE,KAAK,CAEtD,EACK0F,EAAU,CAAC1F,EAAOoF,IAAS,CAE7B,KAAM,CAAE,KAAAjV,EAAM,gBAAA4Y,EAAiB,YAAAC,CAAW,EAAK,KAAK,SAAU,EAC9D,GAAI7Y,GAAQ,CAAC4Y,IACL,KAAK,cACL,KAAK,aAAc,EACvB,KAAK,aAAeE,GAAY9Y,CAAI,EAEhC,CAAC,KAAK,cACN,OAER,KAAK,WAAa,GAClB,KAAK,iBAAmB,KACxB,KAAK,mBAAoB,EACrB,KAAK,cAAc,aACnB,KAAK,cAAc,WAAW,mBAAqB,GACnD,KAAK,cAAc,WAAW,OAAS,QAK3CkS,EAAUjB,GAAS,CACf,IAAIjL,EAAU,KAAK,mBAAmBiL,CAAI,EAAE,IAAG,GAAM,EAIrD,GAAI8H,GAAQ,KAAK/S,CAAO,EAAG,CACvB,KAAM,CAAE,WAAAgT,GAAe,KAAK,cAC5B,GAAIA,GAAcA,EAAW,OAAQ,CACjC,MAAMC,EAAeD,EAAW,OAAO,UAAU/H,CAAI,EACjDgI,IAEAjT,EADegL,EAAWiI,CAAY,GAClB,WAAWjT,CAAO,EAAI,KAEtE,CACA,CACgB,KAAK,YAAYiL,CAAI,EAAIjL,CACzC,CAAa,EAEG6S,GACArO,EAAM,WAAW,IAAMqO,EAAYhJ,EAAOoF,CAAI,CAAC,EAEnD7M,GAAqB,KAAK,cAAe,WAAW,EACpD,KAAM,CAAE,eAAA8Q,GAAmB,KAAK,cAChCA,GAAkBA,EAAe,UAAU,YAAa,EAAI,CAC/D,EACK1D,EAAS,CAAC3F,EAAOoF,IAAS,CAE5B,KAAM,CAAE,gBAAA2D,EAAiB,kBAAAO,EAAmB,gBAAAC,EAAiB,OAAAC,CAAS,EAAG,KAAK,SAAU,EAExF,GAAI,CAACT,GAAmB,CAAC,KAAK,aAC1B,OACJ,KAAM,CAAE,OAAAvU,CAAM,EAAK4Q,EAEnB,GAAIkE,GAAqB,KAAK,mBAAqB,KAAM,CACrD,KAAK,iBAAmBG,GAAoBjV,CAAM,EAE9C,KAAK,mBAAqB,MAC1B+U,GAAmBA,EAAgB,KAAK,gBAAgB,EAE5D,MAChB,CAEY,KAAK,WAAW,IAAKnE,EAAK,MAAO5Q,CAAM,EACvC,KAAK,WAAW,IAAK4Q,EAAK,MAAO5Q,CAAM,EAOvC,KAAK,cAAc,OAAQ,EAK3BgV,GAAUA,EAAOxJ,EAAOoF,CAAI,CAC/B,EACKS,EAAe,CAAC7F,EAAOoF,IAAS,KAAK,KAAKpF,EAAOoF,CAAI,EACrDU,EAAkB,IAAMzD,EAAUjB,GAAS,KAAK,kBAAkBA,CAAI,IAAM,UAC9E,KAAK,mBAAmBA,CAAI,EAAE,WAAW,KAAI,CAAE,EAC7C,CAAE,iBAAA+D,CAAgB,EAAK,KAAK,SAAU,EAC5C,KAAK,WAAa,IAAIH,GAAW6D,EAAa,CAC1C,eAAA5C,EACA,QAAAP,EACA,OAAAC,EACA,aAAAE,EACA,gBAAAC,CACZ,EAAW,CACC,mBAAoB,KAAK,cAAc,sBAAuB,EAC9D,iBAAAX,EACA,cAAeP,GAAiB,KAAK,aAAa,CAC9D,CAAS,CACT,CACI,KAAK5E,EAAOoF,EAAM,CACd,MAAMsE,EAAa,KAAK,WAExB,GADA,KAAK,OAAQ,EACT,CAACA,EACD,OACJ,KAAM,CAAE,SAAAtT,CAAQ,EAAKgP,EACrB,KAAK,eAAehP,CAAQ,EAC5B,KAAM,CAAE,UAAAuT,CAAS,EAAK,KAAK,SAAU,EACjCA,GACAhP,EAAM,WAAW,IAAMgP,EAAU3J,EAAOoF,CAAI,CAAC,CAEzD,CACI,QAAS,CACL,KAAK,WAAa,GAClB,KAAM,CAAE,WAAA+D,EAAY,eAAAE,CAAgB,EAAG,KAAK,cACxCF,IACAA,EAAW,mBAAqB,IAEpC,KAAK,YAAc,KAAK,WAAW,IAAK,EACxC,KAAK,WAAa,OAClB,KAAM,CAAE,gBAAAJ,CAAe,EAAK,KAAK,SAAU,EACvC,CAACA,GAAmB,KAAK,eACzB,KAAK,aAAc,EACnB,KAAK,aAAe,MAExBM,GAAkBA,EAAe,UAAU,YAAa,EAAK,CACrE,CACI,WAAWjI,EAAMwI,EAAQpV,EAAQ,CAC7B,KAAM,CAAE,KAAArE,CAAI,EAAK,KAAK,SAAU,EAEhC,GAAI,CAACqE,GAAU,CAACqV,GAAWzI,EAAMjR,EAAM,KAAK,gBAAgB,EACxD,OACJ,MAAM2Z,EAAY,KAAK,mBAAmB1I,CAAI,EAC9C,IAAIvE,EAAO,KAAK,YAAYuE,CAAI,EAAI5M,EAAO4M,CAAI,EAE3C,KAAK,aAAe,KAAK,YAAYA,CAAI,IACzCvE,EAAOkK,GAAiBlK,EAAM,KAAK,YAAYuE,CAAI,EAAG,KAAK,QAAQA,CAAI,CAAC,GAE5E0I,EAAU,IAAIjN,CAAI,CAC1B,CACI,oBAAqB,CACjB,KAAM,CAAE,gBAAAzM,EAAiB,YAAAiY,GAAgB,KAAK,SAAU,EAClDnY,EAAS,KAAK,cAAc,YAC9B,CAAC,KAAK,cAAc,WAAW,OAC7B,KAAK,cAAc,WAAW,QAAQ,EAAK,EAC3C,KAAK,cAAc,YAAY,OAC/B6Z,EAAkB,KAAK,YACzB3Z,GAAmB7B,EAAY6B,CAAe,EACzC,KAAK,cACN,KAAK,YAAc,KAAK,sBAAuB,GAI/CA,GAAmBF,EACnB,KAAK,YAAckX,GAAwBlX,EAAO,UAAWE,CAAe,EAG5E,KAAK,YAAc,GAG3B,KAAK,QAAUgY,GAAmBC,CAAW,EAKzC0B,IAAoB,KAAK,aACzB7Z,GACA,KAAK,aACL,CAAC,KAAK,uBACNmS,EAAUjB,GAAS,CACX,KAAK,cAAgB,IACrB,KAAK,mBAAmBA,CAAI,IAC5B,KAAK,YAAYA,CAAI,EAAI4G,GAAsB9X,EAAO,UAAUkR,CAAI,EAAG,KAAK,YAAYA,CAAI,CAAC,EAEjH,CAAa,CAEb,CACI,uBAAwB,CACpB,KAAM,CAAE,gBAAiB6G,EAAa,yBAAA+B,CAAwB,EAAK,KAAK,SAAU,EAClF,GAAI,CAAC/B,GAAe,CAAC1Z,EAAY0Z,CAAW,EACxC,MAAO,GACX,MAAMgC,EAAqBhC,EAAY,QAEjC,CAAE,WAAAkB,GAAe,KAAK,cAE5B,GAAI,CAACA,GAAc,CAACA,EAAW,OAC3B,MAAO,GACX,MAAMzB,EAAiBnD,GAAe0F,EAAoBd,EAAW,KAAM,KAAK,cAAc,uBAAuB,EACrH,IAAIe,EAAsBzC,GAAwB0B,EAAW,OAAO,UAAWzB,CAAc,EAK7F,GAAIsC,EAA0B,CAC1B,MAAMG,EAAkBH,EAAyB1J,GAAwB4J,CAAmB,CAAC,EAC7F,KAAK,sBAAwB,CAAC,CAACC,EAC3BA,IACAD,EAAsB9J,GAAwB+J,CAAe,EAE7E,CACQ,OAAOD,CACf,CACI,eAAe9T,EAAU,CACrB,KAAM,CAAE,KAAAjG,EAAM,aAAAia,EAAc,YAAA/B,EAAa,eAAAgC,EAAgB,iBAAAlF,EAAkB,oBAAAmF,CAAmB,EAAM,KAAK,SAAU,EAC7GrC,EAAc,KAAK,aAAe,CAAE,EACpCsC,EAAqBlI,EAAUjB,GAAS,CAC1C,GAAI,CAACyI,GAAWzI,EAAMjR,EAAM,KAAK,gBAAgB,EAC7C,OAEJ,IAAIoH,EAAc0Q,GAAeA,EAAY7G,CAAI,GAAM,CAAE,EACrD+D,IACA5N,EAAa,CAAE,IAAK,EAAG,IAAK,CAAG,GAOnC,MAAMiT,EAAkBnC,EAAc,IAAM,IACtCoC,EAAgBpC,EAAc,GAAK,IACnCqC,EAAU,CACZ,KAAM,UACN,SAAUN,EAAehU,EAASgL,CAAI,EAAI,EAC1C,gBAAAoJ,EACA,cAAAC,EACA,aAAc,IACd,UAAW,EACX,UAAW,GACX,GAAGJ,EACH,GAAG9S,CACN,EAID,OAAO,KAAK,wBAAwB6J,EAAMsJ,CAAO,CAC7D,CAAS,EAED,OAAO,QAAQ,IAAIH,CAAkB,EAAE,KAAKD,CAAmB,CACvE,CACI,wBAAwBlJ,EAAM7J,EAAY,CACtC,MAAMuS,EAAY,KAAK,mBAAmB1I,CAAI,EAC9C,OAAA7I,GAAqB,KAAK,cAAe6I,CAAI,EACtC0I,EAAU,MAAM5P,GAAmBkH,EAAM0I,EAAW,EAAGvS,EAAY,KAAK,cAAe,EAAK,CAAC,CAC5G,CACI,eAAgB,CACZ8K,EAAUjB,GAAS,KAAK,mBAAmBA,CAAI,EAAE,MAAM,CAC/D,CACI,gBAAiB,CACbiB,EAAUjB,GAAS,KAAK,mBAAmBA,CAAI,EAAE,WAAW,OAAO,CAC3E,CACI,kBAAkBA,EAAM,CACpB,OAAO,KAAK,mBAAmBA,CAAI,EAAE,WAAW,KACxD,CAOI,mBAAmBA,EAAM,CACrB,MAAMuJ,EAAU,QAAQvJ,EAAK,YAAa,CAAA,GACpC9U,EAAQ,KAAK,cAAc,SAAU,EACrCse,EAAsBte,EAAMqe,CAAO,EACzC,OAAOC,GAED,KAAK,cAAc,SAASxJ,GAAO9U,EAAM,QACrCA,EAAM,QAAQ8U,CAAI,EAClB,SAAc,CAAC,CACjC,CACI,aAAaX,EAAO,CAChB4B,EAAUjB,GAAS,CACf,KAAM,CAAE,KAAAjR,CAAI,EAAK,KAAK,SAAU,EAEhC,GAAI,CAAC0Z,GAAWzI,EAAMjR,EAAM,KAAK,gBAAgB,EAC7C,OACJ,KAAM,CAAE,WAAAgZ,GAAe,KAAK,cACtBW,EAAY,KAAK,mBAAmB1I,CAAI,EAC9C,GAAI+H,GAAcA,EAAW,OAAQ,CACjC,KAAM,CAAE,IAAAnC,EAAK,IAAAC,CAAK,EAAGkC,EAAW,OAAO,UAAU/H,CAAI,EACrD0I,EAAU,IAAIrJ,EAAMW,CAAI,EAAIM,EAAUsF,EAAKC,EAAK,EAAG,CAAC,CACpE,CACA,CAAS,CACT,CAMI,gCAAiC,CAC7B,GAAI,CAAC,KAAK,cAAc,QACpB,OACJ,KAAM,CAAE,KAAA9W,EAAM,gBAAAC,GAAoB,KAAK,SAAU,EAC3C,CAAE,WAAA+Y,GAAe,KAAK,cAC5B,GAAI,CAAC5a,EAAY6B,CAAe,GAAK,CAAC+Y,GAAc,CAAC,KAAK,YACtD,OAKJ,KAAK,cAAe,EAKpB,MAAM0B,EAAc,CAAE,EAAG,EAAG,EAAG,CAAG,EAClCxI,EAAUjB,GAAS,CACf,MAAM0I,EAAY,KAAK,mBAAmB1I,CAAI,EAC9C,GAAI0I,GAAa,KAAK,cAAgB,GAAO,CACzC,MAAM3U,EAAS2U,EAAU,IAAK,EAC9Be,EAAYzJ,CAAI,EAAIuG,GAAW,CAAE,IAAKxS,EAAQ,IAAKA,CAAM,EAAI,KAAK,YAAYiM,CAAI,CAAC,CACnG,CACA,CAAS,EAID,KAAM,CAAE,kBAAA9O,CAAmB,EAAG,KAAK,cAAc,SAAU,EAC3D,KAAK,cAAc,QAAQ,MAAM,UAAYA,EACvCA,EAAkB,CAAE,EAAE,EAAE,EACxB,OACN6W,EAAW,MAAQA,EAAW,KAAK,aAAc,EACjDA,EAAW,aAAc,EACzB,KAAK,mBAAoB,EAKzB9G,EAAUjB,GAAS,CACf,GAAI,CAACyI,GAAWzI,EAAMjR,EAAM,IAAI,EAC5B,OAIJ,MAAM2Z,EAAY,KAAK,mBAAmB1I,CAAI,EACxC,CAAE,IAAA4F,EAAK,IAAAC,CAAG,EAAK,KAAK,YAAY7F,CAAI,EAC1C0I,EAAU,IAAIpI,EAAUsF,EAAKC,EAAK4D,EAAYzJ,CAAI,CAAC,CAAC,CAChE,CAAS,CACT,CACI,cAAe,CACX,GAAI,CAAC,KAAK,cAAc,QACpB,OACJuH,GAAoB,IAAI,KAAK,cAAe,IAAI,EAChD,MAAM/gB,EAAU,KAAK,cAAc,QAI7BkjB,EAAsB3K,EAAgBvY,EAAS,cAAgBoY,GAAU,CAC3E,KAAM,CAAE,KAAA7P,EAAM,aAAA4a,EAAe,EAAI,EAAK,KAAK,SAAU,EACrD5a,GAAQ4a,GAAgB,KAAK,MAAM/K,CAAK,CACpD,CAAS,EACKgL,EAAyB,IAAM,CACjC,KAAM,CAAE,gBAAA5a,CAAe,EAAK,KAAK,SAAU,EACvC7B,EAAY6B,CAAe,GAAKA,EAAgB,UAChD,KAAK,YAAc,KAAK,sBAAuB,EAEtD,EACK,CAAE,WAAA+Y,GAAe,KAAK,cACtB8B,EAA4B9B,EAAW,iBAAiB,UAAW6B,CAAsB,EAC3F7B,GAAc,CAACA,EAAW,SAC1BA,EAAW,MAAQA,EAAW,KAAK,aAAc,EACjDA,EAAW,aAAc,GAE7BxO,EAAM,KAAKqQ,CAAsB,EAKjC,MAAME,EAAqBtL,GAAY,OAAQ,SAAU,IAAM,KAAK,gCAAgC,EAK9FuL,EAA2BhC,EAAW,iBAAiB,YAAc,CAAC,CAAE,MAAA3H,EAAO,iBAAA4J,KAAuB,CACpG,KAAK,YAAcA,IACnB/I,EAAUjB,GAAS,CACf,MAAMjJ,EAAc,KAAK,mBAAmBiJ,CAAI,EAC3CjJ,IAEL,KAAK,YAAYiJ,CAAI,GAAKI,EAAMJ,CAAI,EAAE,UACtCjJ,EAAY,IAAIA,EAAY,IAAK,EAAGqJ,EAAMJ,CAAI,EAAE,SAAS,EAC7E,CAAiB,EACD,KAAK,cAAc,OAAQ,EAE3C,CAAW,EACH,MAAO,IAAM,CACT8J,EAAoB,EACpBJ,EAAqB,EACrBG,EAA2B,EAC3BE,GAA4BA,EAA0B,CACzD,CACT,CACI,UAAW,CACP,MAAM7e,EAAQ,KAAK,cAAc,SAAU,EACrC,CAAE,KAAA6D,EAAO,GAAO,kBAAAmZ,EAAoB,GAAO,gBAAAP,EAAkB,GAAO,gBAAA3Y,EAAkB,GAAO,YAAAiY,EAAcF,GAAgB,aAAAiC,EAAe,EAAO,EAAG9d,EAC1J,MAAO,CACH,GAAGA,EACH,KAAA6D,EACA,kBAAAmZ,EACA,gBAAAP,EACA,gBAAA3Y,EACA,YAAAiY,EACA,aAAA+B,CACH,CACT,CACA,CACA,SAASP,GAAWwB,EAAWlb,EAAMmb,EAAkB,CACnD,OAASnb,IAAS,IAAQA,IAASkb,KAC9BC,IAAqB,MAAQA,IAAqBD,EAC3D,CAQA,SAAS5B,GAAoBjV,EAAQ+W,EAAgB,GAAI,CACrD,IAAIF,EAAY,KAChB,OAAI,KAAK,IAAI7W,EAAO,CAAC,EAAI+W,EACrBF,EAAY,IAEP,KAAK,IAAI7W,EAAO,CAAC,EAAI+W,IAC1BF,EAAY,KAETA,CACX,CCrdA,MAAMG,WAAoBnM,CAAQ,CAC9B,YAAYC,EAAM,CACd,MAAMA,CAAI,EACV,KAAK,oBAAsBmM,EAC3B,KAAK,gBAAkBA,EACvB,KAAK,SAAW,IAAI7C,GAA0BtJ,CAAI,CAC1D,CACI,OAAQ,CAGJ,KAAM,CAAE,aAAAoM,CAAc,EAAG,KAAK,KAAK,SAAU,EACzCA,IACA,KAAK,oBAAsBA,EAAa,UAAU,KAAK,QAAQ,GAEnE,KAAK,gBAAkB,KAAK,SAAS,aAAc,GAAID,CAC/D,CACI,SAAU,CACN,KAAK,oBAAqB,EAC1B,KAAK,gBAAiB,CAC9B,CACA,CCjBA,MAAME,GAAgB7L,GAAY,CAACE,EAAOoF,IAAS,CAC3CtF,GACAnF,EAAM,WAAW,IAAMmF,EAAQE,EAAOoF,CAAI,CAAC,CAEnD,EACA,MAAMwG,WAAmBvM,CAAQ,CAC7B,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,0BAA4BoM,CACzC,CACI,cAAcI,EAAkB,CAC5B,KAAK,QAAU,IAAI7G,GAAW6G,EAAkB,KAAK,oBAAqB,CACtE,mBAAoB,KAAK,KAAK,sBAAuB,EACrD,cAAejH,GAAiB,KAAK,IAAI,CACrD,CAAS,CACT,CACI,mBAAoB,CAChB,KAAM,CAAE,kBAAAkH,EAAmB,WAAAC,EAAY,MAAAC,EAAO,SAAAC,CAAQ,EAAK,KAAK,KAAK,SAAU,EAC/E,MAAO,CACH,eAAgBN,GAAaG,CAAiB,EAC9C,QAASH,GAAaI,CAAU,EAChC,OAAQC,EACR,MAAO,CAAChM,EAAOoF,IAAS,CACpB,OAAO,KAAK,QACR6G,GACAtR,EAAM,WAAW,IAAMsR,EAASjM,EAAOoF,CAAI,CAAC,CAEnD,CACJ,CACT,CACI,OAAQ,CACJ,KAAK,0BAA4BjF,EAAgB,KAAK,KAAK,QAAS,cAAgBH,GAAU,KAAK,cAAcA,CAAK,CAAC,CAC/H,CACI,QAAS,CACL,KAAK,SAAW,KAAK,QAAQ,eAAe,KAAK,mBAAmB,CAC5E,CACI,SAAU,CACN,KAAK,0BAA2B,EAChC,KAAK,SAAW,KAAK,QAAQ,IAAK,CAC1C,CACA,CC1CA,MAAMkM,GAAwB,CAK1B,uBAAwB,GAKxB,eAAgB,EACpB,ECdA,SAASC,GAAgBC,EAAQhL,EAAM,CACnC,OAAIA,EAAK,MAAQA,EAAK,IACX,EACHgL,GAAUhL,EAAK,IAAMA,EAAK,KAAQ,GAC9C,CAQA,MAAMiL,EAAsB,CACxB,QAAS,CAAClX,EAAQmK,IAAS,CACvB,GAAI,CAACA,EAAK,OACN,OAAOnK,EAKX,GAAI,OAAOA,GAAW,SAClB,GAAIR,EAAG,KAAKQ,CAAM,EACdA,EAAS,WAAWA,CAAM,MAG1B,QAAOA,EAOf,MAAMpM,EAAIojB,GAAgBhX,EAAQmK,EAAK,OAAO,CAAC,EACzCiB,EAAI4L,GAAgBhX,EAAQmK,EAAK,OAAO,CAAC,EAC/C,MAAO,GAAGvW,CAAC,KAAKwX,CAAC,GACpB,CACL,ECpCM+L,GAAmB,CACrB,QAAS,CAACnX,EAAQ,CAAE,UAAAwO,EAAW,gBAAA4I,CAAe,IAAO,CACjD,MAAMC,EAAWrX,EACXsX,EAASC,GAAQ,MAAMvX,CAAM,EAEnC,GAAIsX,EAAO,OAAS,EAChB,OAAOD,EACX,MAAMG,EAAWD,GAAQ,kBAAkBvX,CAAM,EAC3CX,EAAS,OAAOiY,EAAO,CAAC,GAAM,SAAW,EAAI,EAE7CG,EAASL,EAAgB,EAAE,MAAQ5I,EAAU,EAC7CkJ,EAASN,EAAgB,EAAE,MAAQ5I,EAAU,EACnD8I,EAAO,EAAIjY,CAAM,GAAKoY,EACtBH,EAAO,EAAIjY,CAAM,GAAKqY,EAOtB,MAAMC,EAAepL,EAAUkL,EAAQC,EAAQ,EAAG,EAElD,OAAI,OAAOJ,EAAO,EAAIjY,CAAM,GAAM,WAC9BiY,EAAO,EAAIjY,CAAM,GAAKsY,GAEtB,OAAOL,EAAO,EAAIjY,CAAM,GAAM,WAC9BiY,EAAO,EAAIjY,CAAM,GAAKsY,GACnBH,EAASF,CAAM,CACzB,CACL,ECnBA,MAAMM,WAAiC5d,EAAAA,SAAU,CAM7C,mBAAoB,CAChB,KAAM,CAAE,cAAAT,EAAe,YAAAse,EAAa,kBAAAC,EAAmB,SAAAhd,CAAQ,EAAK,KAAK,MACnE,CAAE,WAAAkZ,CAAU,EAAKza,EACvBiD,GAAkBub,EAAsB,EACpC/D,IACI6D,EAAY,OACZA,EAAY,MAAM,IAAI7D,CAAU,EAChC8D,GAAqBA,EAAkB,UAAYhd,GACnDgd,EAAkB,SAAS9D,CAAU,EAEzCA,EAAW,KAAK,UAAW,EAC3BA,EAAW,iBAAiB,oBAAqB,IAAM,CACnD,KAAK,aAAc,CACnC,CAAa,EACDA,EAAW,WAAW,CAClB,GAAGA,EAAW,QACd,eAAgB,IAAM,KAAK,aAAc,CACzD,CAAa,GAEL+C,GAAsB,eAAiB,EAC/C,CACI,wBAAwBvkB,EAAW,CAC/B,KAAM,CAAE,iBAAAwlB,EAAkB,cAAAze,EAAe,KAAAyB,EAAM,UAAAhI,CAAS,EAAK,KAAK,MAC5D,CAAE,WAAAghB,CAAU,EAAKza,EACvB,OAAKya,IASLA,EAAW,UAAYhhB,EACnBgI,GACAxI,EAAU,mBAAqBwlB,GAC/BA,IAAqB,QACrBxlB,EAAU,YAAcQ,EACxBghB,EAAW,WAAY,EAGvB,KAAK,aAAc,EAEnBxhB,EAAU,YAAcQ,IACpBA,EACAghB,EAAW,QAAS,EAEdA,EAAW,YAMjBxO,EAAM,WAAW,IAAM,CACnB,MAAMyS,EAAQjE,EAAW,SAAU,GAC/B,CAACiE,GAAS,CAACA,EAAM,QAAQ,SACzB,KAAK,aAAc,CAE3C,CAAiB,IAGF,IACf,CACI,oBAAqB,CACjB,KAAM,CAAE,WAAAjE,CAAU,EAAK,KAAK,MAAM,cAC9BA,IACAA,EAAW,KAAK,UAAW,EAC3BpZ,GAAU,WAAW,IAAM,CACnB,CAACoZ,EAAW,kBAAoBA,EAAW,OAAM,GACjD,KAAK,aAAc,CAEvC,CAAa,EAEb,CACI,sBAAuB,CACnB,KAAM,CAAE,cAAAza,EAAe,YAAAse,EAAa,kBAAmBK,CAAc,EAAM,KAAK,MAC1E,CAAE,WAAAlE,CAAU,EAAKza,EACnBya,IACAA,EAAW,0BAA2B,EAClC6D,GAAeA,EAAY,OAC3BA,EAAY,MAAM,OAAO7D,CAAU,EACnCkE,GAAkBA,EAAe,YACjCA,EAAe,WAAWlE,CAAU,EAEpD,CACI,cAAe,CACX,KAAM,CAAE,aAAA7e,GAAiB,KAAK,MAC9BA,GAAgBA,EAAc,CACtC,CACI,QAAS,CACL,OAAO,IACf,CACA,CACA,SAASwG,GAAcxE,EAAO,CAC1B,KAAM,CAACnE,EAAWmC,CAAY,EAAIH,GAAa,EACzC6iB,EAAcxkB,EAAU,WAAC5B,EAAkB,EACjD,OAAQqC,EAAAA,IAAI8jB,GAA0B,CAAE,GAAGzgB,EAAO,YAAa0gB,EAAa,kBAAmBxkB,EAAAA,WAAWyG,EAAwB,EAAG,UAAW9G,EAAW,aAAcmC,CAAY,CAAE,CAC3L,CACA,MAAM4iB,GAAyB,CAC3B,aAAc,CACV,GAAGb,EACH,QAAS,CACL,sBACA,uBACA,yBACA,yBACH,CACJ,EACD,oBAAqBA,EACrB,qBAAsBA,EACtB,uBAAwBA,EACxB,wBAAyBA,EACzB,UAAWC,EACf,EChIA,SAASgB,GAAmB7a,EAAOqG,EAAW2B,EAAS,CACnD,MAAM8S,EAAgB3Z,EAAcnB,CAAK,EAAIA,EAAQ0F,EAAY1F,CAAK,EACtE,OAAA8a,EAAc,MAAMrT,GAAmB,GAAIqT,EAAezU,EAAW2B,CAAO,CAAC,EACtE8S,EAAc,SACzB,CCPA,MAAMC,GAAiB,CAAChR,EAAGC,IAAMD,EAAE,MAAQC,EAAE,MCG7C,MAAMgR,EAAS,CACX,aAAc,CACV,KAAK,SAAW,CAAE,EAClB,KAAK,QAAU,EACvB,CACI,IAAIhjB,EAAO,CACPijB,GAAc,KAAK,SAAUjjB,CAAK,EAClC,KAAK,QAAU,EACvB,CACI,OAAOA,EAAO,CACVkjB,GAAW,KAAK,SAAUljB,CAAK,EAC/B,KAAK,QAAU,EACvB,CACI,QAAQ6X,EAAU,CACd,KAAK,SAAW,KAAK,SAAS,KAAKkL,EAAc,EACjD,KAAK,QAAU,GACf,KAAK,SAAS,QAAQlL,CAAQ,CACtC,CACA,CCfA,SAAS/H,GAAM+H,EAAUsL,EAAS,CAC9B,MAAMC,EAAQjH,GAAK,IAAK,EAClBkH,EAAe,CAAC,CAAE,UAAAtI,KAAgB,CACpC,MAAMvL,EAAUuL,EAAYqI,EACxB5T,GAAW2T,IACXzH,EAAY2H,CAAY,EACxBxL,EAASrI,EAAU2T,CAAO,EAEjC,EACD,OAAAjT,EAAM,MAAMmT,EAAc,EAAI,EACvB,IAAM3H,EAAY2H,CAAY,CACzC,CCdA,MAAMC,GAAU,CAAC,UAAW,WAAY,aAAc,aAAa,EAC7DC,GAAaD,GAAQ,OACrBE,GAAYxb,GAAU,OAAOA,GAAU,SAAW,WAAWA,CAAK,EAAIA,EACtEyb,GAAQzb,GAAU,OAAOA,GAAU,UAAYkC,EAAG,KAAKlC,CAAK,EAClE,SAAS0b,GAAUza,EAAQ0a,EAAQC,EAAMvG,EAAUwG,EAAwBC,EAAc,CACjFD,GACA5a,EAAO,QAAUgO,EAAU,EAAG2M,EAAK,SAAW,EAAGG,GAAgB1G,CAAQ,CAAC,EAC1EpU,EAAO,YAAcgO,EAAU0M,EAAO,SAAW,EAAG,EAAGK,GAAiB3G,CAAQ,CAAC,GAE5EyG,IACL7a,EAAO,QAAUgO,EAAU0M,EAAO,SAAW,EAAGC,EAAK,SAAW,EAAGvG,CAAQ,GAK/E,QAASnc,EAAI,EAAGA,EAAIqiB,GAAYriB,IAAK,CACjC,MAAM+iB,EAAc,SAASX,GAAQpiB,CAAC,CAAC,SACvC,IAAIgjB,EAAeC,GAAUR,EAAQM,CAAW,EAC5CG,EAAaD,GAAUP,EAAMK,CAAW,EAC5C,GAAIC,IAAiB,QAAaE,IAAe,OAC7C,SACJF,IAAiBA,EAAe,GAChCE,IAAeA,EAAa,GACbF,IAAiB,GAC5BE,IAAe,GACfX,GAAKS,CAAY,IAAMT,GAAKW,CAAU,GAEtCnb,EAAOgb,CAAW,EAAI,KAAK,IAAIhN,EAAUuM,GAASU,CAAY,EAAGV,GAASY,CAAU,EAAG/G,CAAQ,EAAG,CAAC,GAC/FoB,GAAQ,KAAK2F,CAAU,GAAK3F,GAAQ,KAAKyF,CAAY,KACrDjb,EAAOgb,CAAW,GAAK,MAI3Bhb,EAAOgb,CAAW,EAAIG,CAElC,EAIQT,EAAO,QAAUC,EAAK,UACtB3a,EAAO,OAASgO,EAAU0M,EAAO,QAAU,EAAGC,EAAK,QAAU,EAAGvG,CAAQ,EAEhF,CACA,SAAS8G,GAAU9X,EAAQgY,EAAY,CACnC,OAAOhY,EAAOgY,CAAU,IAAM,OACxBhY,EAAOgY,CAAU,EACjBhY,EAAO,YACjB,CAwBA,MAAM0X,GAAgCO,GAAS,EAAG,GAAKC,EAAO,EACxDP,GAAiCM,GAAS,GAAK,IAAMtD,CAAI,EAC/D,SAASsD,GAAS/H,EAAKC,EAAKgI,EAAQ,CAChC,OAAQznB,GAEAA,EAAIwf,EACG,EACPxf,EAAIyf,EACG,EACJgI,EAAOnH,GAASd,EAAKC,EAAKzf,CAAC,CAAC,CAE3C,CChFA,SAAS0nB,GAAa9N,EAAM+N,EAAY,CACpC/N,EAAK,IAAM+N,EAAW,IACtB/N,EAAK,IAAM+N,EAAW,GAC1B,CAMA,SAASC,EAAY7L,EAAK8L,EAAW,CACjCH,GAAa3L,EAAI,EAAG8L,EAAU,CAAC,EAC/BH,GAAa3L,EAAI,EAAG8L,EAAU,CAAC,CACnC,CAMA,SAASC,GAAkB9N,EAAO+N,EAAa,CAC3C/N,EAAM,UAAY+N,EAAY,UAC9B/N,EAAM,MAAQ+N,EAAY,MAC1B/N,EAAM,YAAc+N,EAAY,YAChC/N,EAAM,OAAS+N,EAAY,MAC/B,CCtBA,SAASC,GAAiB/O,EAAO0C,EAAWX,EAAOO,EAAaK,EAAU,CACtE,OAAA3C,GAAS0C,EACT1C,EAAQqC,GAAWrC,EAAO,EAAI+B,EAAOO,CAAW,EAC5CK,IAAa,SACb3C,EAAQqC,GAAWrC,EAAO,EAAI2C,EAAUL,CAAW,GAEhDtC,CACX,CAIA,SAASgP,GAAgBrO,EAAM+B,EAAY,EAAGX,EAAQ,EAAGf,EAAS,GAAK2B,EAAU+L,EAAa/N,EAAMsO,EAAatO,EAAM,CAMnH,GALI8H,GAAQ,KAAK/F,CAAS,IACtBA,EAAY,WAAWA,CAAS,EAEhCA,EADyBzB,EAAUgO,EAAW,IAAKA,EAAW,IAAKvM,EAAY,GAAG,EACnDuM,EAAW,KAE1C,OAAOvM,GAAc,SACrB,OACJ,IAAIJ,EAAcrB,EAAUyN,EAAW,IAAKA,EAAW,IAAK1N,CAAM,EAC9DL,IAAS+N,IACTpM,GAAeI,GACnB/B,EAAK,IAAMoO,GAAiBpO,EAAK,IAAK+B,EAAWX,EAAOO,EAAaK,CAAQ,EAC7EhC,EAAK,IAAMoO,GAAiBpO,EAAK,IAAK+B,EAAWX,EAAOO,EAAaK,CAAQ,CACjF,CAKA,SAASuM,GAAqBvO,EAAMwO,EAAY,CAAC3lB,EAAK4lB,EAAUC,CAAS,EAAGrO,EAAQiO,EAAY,CAC5FD,GAAgBrO,EAAMwO,EAAW3lB,CAAG,EAAG2lB,EAAWC,CAAQ,EAAGD,EAAWE,CAAS,EAAGF,EAAW,MAAOnO,EAAQiO,CAAU,CAC5H,CAIA,MAAMK,GAAQ,CAAC,IAAK,SAAU,SAAS,EACjCC,GAAQ,CAAC,IAAK,SAAU,SAAS,EAKvC,SAASC,GAAoB1M,EAAKqM,EAAYP,EAAWa,EAAW,CAChEP,GAAqBpM,EAAI,EAAGqM,EAAYG,GAAOV,EAAYA,EAAU,EAAI,OAAWa,EAAYA,EAAU,EAAI,MAAS,EACvHP,GAAqBpM,EAAI,EAAGqM,EAAYI,GAAOX,EAAYA,EAAU,EAAI,OAAWa,EAAYA,EAAU,EAAI,MAAS,CAC3H,CChDA,SAASC,GAAgB3O,EAAO,CAC5B,OAAOA,EAAM,YAAc,GAAKA,EAAM,QAAU,CACpD,CACA,SAAS4O,GAAY5O,EAAO,CACxB,OAAO2O,GAAgB3O,EAAM,CAAC,GAAK2O,GAAgB3O,EAAM,CAAC,CAC9D,CACA,SAAS6O,GAAW7T,EAAGC,EAAG,CACtB,OAAOD,EAAE,MAAQC,EAAE,KAAOD,EAAE,MAAQC,EAAE,GAC1C,CACA,SAAS6T,GAAU9T,EAAGC,EAAG,CACrB,OAAO4T,GAAW7T,EAAE,EAAGC,EAAE,CAAC,GAAK4T,GAAW7T,EAAE,EAAGC,EAAE,CAAC,CACtD,CACA,SAAS8T,GAAkB/T,EAAGC,EAAG,CAC7B,OAAQ,KAAK,MAAMD,EAAE,GAAG,IAAM,KAAK,MAAMC,EAAE,GAAG,GAC1C,KAAK,MAAMD,EAAE,GAAG,IAAM,KAAK,MAAMC,EAAE,GAAG,CAC9C,CACA,SAAS+T,GAAiBhU,EAAGC,EAAG,CAC5B,OAAO8T,GAAkB/T,EAAE,EAAGC,EAAE,CAAC,GAAK8T,GAAkB/T,EAAE,EAAGC,EAAE,CAAC,CACpE,CACA,SAASgU,GAAYlN,EAAK,CACtB,OAAOpC,EAAWoC,EAAI,CAAC,EAAIpC,EAAWoC,EAAI,CAAC,CAC/C,CACA,SAASmN,GAAgBlU,EAAGC,EAAG,CAC3B,OAAQD,EAAE,YAAcC,EAAE,WACtBD,EAAE,QAAUC,EAAE,OACdD,EAAE,cAAgBC,EAAE,WAC5B,CC1BA,MAAMkU,EAAU,CACZ,aAAc,CACV,KAAK,QAAU,CAAE,CACzB,CACI,IAAIrR,EAAM,CACNoO,GAAc,KAAK,QAASpO,CAAI,EAChCA,EAAK,eAAgB,CAC7B,CACI,OAAOA,EAAM,CAKT,GAJAqO,GAAW,KAAK,QAASrO,CAAI,EACzBA,IAAS,KAAK,WACd,KAAK,SAAW,QAEhBA,IAAS,KAAK,KAAM,CACpB,MAAMsR,EAAW,KAAK,QAAQ,KAAK,QAAQ,OAAS,CAAC,EACjDA,GACA,KAAK,QAAQA,CAAQ,CAErC,CACA,CACI,SAAStR,EAAM,CACX,MAAMuR,EAAc,KAAK,QAAQ,UAAWC,GAAWxR,IAASwR,CAAM,EACtE,GAAID,IAAgB,EAChB,MAAO,GAIX,IAAID,EACJ,QAASjlB,EAAIklB,EAAallB,GAAK,EAAGA,IAAK,CACnC,MAAMmlB,EAAS,KAAK,QAAQnlB,CAAC,EAC7B,GAAImlB,EAAO,YAAc,GAAO,CAC5BF,EAAWE,EACX,KAChB,CACA,CACQ,OAAIF,GACA,KAAK,QAAQA,CAAQ,EACd,IAGA,EAEnB,CACI,QAAQtR,EAAMyR,EAAuB,CACjC,MAAMH,EAAW,KAAK,KACtB,GAAItR,IAASsR,IAEb,KAAK,SAAWA,EAChB,KAAK,KAAOtR,EACZA,EAAK,KAAM,EACPsR,GAAU,CACVA,EAAS,UAAYA,EAAS,eAAgB,EAC9CtR,EAAK,eAAgB,EACrBA,EAAK,WAAasR,EACdG,IACAzR,EAAK,WAAW,gBAAkB,IAElCsR,EAAS,WACTtR,EAAK,SAAWsR,EAAS,SACzBtR,EAAK,SAAS,aACVsR,EAAS,iBAAmBA,EAAS,cAEzCtR,EAAK,MAAQA,EAAK,KAAK,aACvBA,EAAK,cAAgB,IAEzB,KAAM,CAAE,UAAA0R,GAAc1R,EAAK,QACvB0R,IAAc,IACdJ,EAAS,KAAM,CAc/B,CACA,CACI,uBAAwB,CACpB,KAAK,QAAQ,QAAStR,GAAS,CAC3B,KAAM,CAAE,QAAA7E,EAAS,aAAAwW,CAAY,EAAK3R,EAClC7E,EAAQ,gBAAkBA,EAAQ,eAAgB,EAC9CwW,GACAA,EAAa,QAAQ,gBACjBA,EAAa,QAAQ,eAAgB,CAEzD,CAAS,CACT,CACI,gBAAiB,CACb,KAAK,QAAQ,QAAS3R,GAAS,CAC3BA,EAAK,UAAYA,EAAK,eAAe,EAAK,CACtD,CAAS,CACT,CAKI,oBAAqB,CACb,KAAK,MAAQ,KAAK,KAAK,WACvB,KAAK,KAAK,SAAW,OAEjC,CACA,CC7GA,SAAS4R,GAAyB1P,EAAOmC,EAAWwN,EAAiB,CACjE,IAAI9e,EAAY,GAOhB,MAAM+e,EAAa5P,EAAM,EAAE,UAAYmC,EAAU,EAC3C0N,EAAa7P,EAAM,EAAE,UAAYmC,EAAU,EAC3C2N,EAAaH,GAAiB,GAAK,EAWzC,IAVIC,GAAcC,GAAcC,KAC5Bjf,EAAY,eAAe+e,CAAU,OAAOC,CAAU,OAAOC,CAAU,SAMvE3N,EAAU,IAAM,GAAKA,EAAU,IAAM,KACrCtR,GAAa,SAAS,EAAIsR,EAAU,CAAC,KAAK,EAAIA,EAAU,CAAC,MAEzDwN,EAAiB,CACjB,KAAM,CAAE,qBAAAI,EAAsB,OAAAC,EAAQ,QAAAC,EAAS,QAAAC,EAAS,MAAAC,EAAO,MAAAC,CAAK,EAAKT,EACrEI,IACAlf,EAAY,eAAekf,CAAoB,OAAOlf,CAAS,IAC/Dmf,IACAnf,GAAa,UAAUmf,CAAM,SAC7BC,IACApf,GAAa,WAAWof,CAAO,SAC/BC,IACArf,GAAa,WAAWqf,CAAO,SAC/BC,IACAtf,GAAa,SAASsf,CAAK,SAC3BC,IACAvf,GAAa,SAASuf,CAAK,QACvC,CAKI,MAAMC,EAAgBrQ,EAAM,EAAE,MAAQmC,EAAU,EAC1CmO,EAAgBtQ,EAAM,EAAE,MAAQmC,EAAU,EAChD,OAAIkO,IAAkB,GAAKC,IAAkB,KACzCzf,GAAa,SAASwf,CAAa,KAAKC,CAAa,KAElDzf,GAAa,MACxB,CCpBA,MAAM0f,GAAgB,CAAC,GAAI,IAAK,IAAK,GAAG,EAClCC,GAAmB,CAAE,WAAY,QAAU,EAK3CC,GAAkB,IACxB,IAAI5pB,GAAK,EACT,SAAS6pB,GAAyBjoB,EAAKyE,EAAeoI,EAAQqb,EAAuB,CACjF,KAAM,CAAE,aAAA/f,CAAY,EAAK1D,EAErB0D,EAAanI,CAAG,IAChB6M,EAAO7M,CAAG,EAAImI,EAAanI,CAAG,EAC9ByE,EAAc,eAAezE,EAAK,CAAC,EAC/BkoB,IACAA,EAAsBloB,CAAG,EAAI,GAGzC,CACA,SAASmoB,GAAuCC,EAAgB,CAE5D,GADAA,EAAe,0BAA4B,GACvCA,EAAe,OAASA,EACxB,OACJ,KAAM,CAAE,cAAA3jB,GAAkB2jB,EAAe,QACzC,GAAI,CAAC3jB,EACD,OACJ,MAAM+M,EAAW9C,GAAqBjK,CAAa,EACnD,GAAI,OAAO,4BAA4B+M,EAAU,WAAW,EAAG,CAC3D,KAAM,CAAE,OAAAvL,EAAQ,SAAAD,CAAU,EAAGoiB,EAAe,QAC5C,OAAO,+BAA+B5W,EAAU,YAAad,EAAO,EAAEzK,GAAUD,EAAS,CACjG,CACI,KAAM,CAAE,OAAApI,CAAM,EAAKwqB,EACfxqB,GAAU,CAACA,EAAO,2BAClBuqB,GAAuCvqB,CAAM,CAErD,CACA,SAAS8H,GAAqB,CAAE,qBAAA2iB,EAAsB,cAAAC,EAAe,cAAAC,EAAe,kBAAAC,EAAmB,eAAAC,GAAmB,CACtH,OAAO,KAAqB,CACxB,YAAYtgB,EAAe,CAAA,EAAIvK,EAAS0qB,IAAa,EAAM,CAIvD,KAAK,GAAKlqB,KAIV,KAAK,YAAc,EAOnB,KAAK,SAAW,IAAI,IAKpB,KAAK,QAAU,CAAE,EAMjB,KAAK,gBAAkB,GACvB,KAAK,mBAAqB,GAO1B,KAAK,cAAgB,GAKrB,KAAK,kBAAoB,GAKzB,KAAK,wBAA0B,GAK/B,KAAK,iBAAmB,GAIxB,KAAK,sBAAwB,GAC7B,KAAK,sBAAwB,GAK7B,KAAK,WAAa,GAIlB,KAAK,MAAQ,GAKb,KAAK,WAAa,GAIlB,KAAK,qBAAuB,GAO5B,KAAK,0BAA4B,GASjC,KAAK,UAAY,CAAE,EAAG,EAAG,EAAG,CAAG,EAI/B,KAAK,cAAgB,IAAI,IACzB,KAAK,gBAAkB,GAEvB,KAAK,gBAAkB,GACvB,KAAK,eAAiB,IAAM,KAAK,OAAQ,EACzC,KAAK,0BAA4B,GACjC,KAAK,kBAAoB,IAAM,CACvB,KAAK,aACL,KAAK,WAAa,GAClB,KAAK,kBAAmB,EAE/B,EAMD,KAAK,iBAAmB,IAAM,CAC1B,KAAK,0BAA4B,GAWjC,KAAK,MAAM,QAAQsqB,EAAmB,EACtC,KAAK,MAAM,QAAQC,EAAkB,EACrC,KAAK,MAAM,QAAQC,EAAc,EACjC,KAAK,MAAM,QAAQC,EAAe,CAIrC,EAID,KAAK,yBAA2B,EAChC,KAAK,aAAe,GACpB,KAAK,UAAY,GACjB,KAAK,kBAAoB,EAKzB,KAAK,YAAc,IAAI,IACvB,KAAK,aAAe1gB,EACpB,KAAK,KAAOvK,EAASA,EAAO,MAAQA,EAAS,KAC7C,KAAK,KAAOA,EAAS,CAAC,GAAGA,EAAO,KAAMA,CAAM,EAAI,CAAE,EAClD,KAAK,OAASA,EACd,KAAK,MAAQA,EAASA,EAAO,MAAQ,EAAI,EACzC,QAAS8D,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IAClC,KAAK,KAAKA,CAAC,EAAE,qBAAuB,GAEpC,KAAK,OAAS,OACd,KAAK,MAAQ,IAAI8hB,GACjC,CACQ,iBAAiBlhB,EAAMuT,EAAS,CAC5B,OAAK,KAAK,cAAc,IAAIvT,CAAI,GAC5B,KAAK,cAAc,IAAIA,EAAM,IAAIwmB,EAAqB,EAEnD,KAAK,cAAc,IAAIxmB,CAAI,EAAE,IAAIuT,CAAO,CAC3D,CACQ,gBAAgBvT,KAASgB,EAAM,CAC3B,MAAMylB,EAAsB,KAAK,cAAc,IAAIzmB,CAAI,EACvDymB,GAAuBA,EAAoB,OAAO,GAAGzlB,CAAI,CACrE,CACQ,aAAahB,EAAM,CACf,OAAO,KAAK,cAAc,IAAIA,CAAI,CAC9C,CAIQ,MAAMqC,EAAU,CACZ,GAAI,KAAK,SACL,OACJ,KAAK,MAAQqkB,GAAarkB,CAAQ,GAAK,CAACskB,GAAgBtkB,CAAQ,EAChE,KAAK,SAAWA,EAChB,KAAM,CAAE,SAAAqB,EAAU,OAAAC,EAAQ,cAAAxB,CAAe,EAAG,KAAK,QASjD,GARIA,GAAiB,CAACA,EAAc,SAChCA,EAAc,MAAME,CAAQ,EAEhC,KAAK,KAAK,MAAM,IAAI,IAAI,EACxB,KAAK,QAAU,KAAK,OAAO,SAAS,IAAI,IAAI,EACxC,KAAK,KAAK,kBAAoBsB,GAAUD,KACxC,KAAK,cAAgB,IAErBqiB,EAAsB,CACtB,IAAIa,EACJ,MAAMC,EAAsB,IAAO,KAAK,KAAK,sBAAwB,GACrEd,EAAqB1jB,EAAU,IAAM,CACjC,KAAK,KAAK,sBAAwB,GAClCukB,GAAeA,EAAa,EAC5BA,EAAc5Y,GAAM6Y,EAAqB,GAAG,EACxClH,GAAsB,yBACtBA,GAAsB,uBAAyB,GAC/C,KAAK,MAAM,QAAQmH,EAAe,EAE1D,CAAiB,CACjB,CACgBpjB,GACA,KAAK,KAAK,mBAAmBA,EAAU,IAAI,EAG3C,KAAK,QAAQ,UAAY,IACzBvB,IACCuB,GAAYC,IACb,KAAK,iBAAiB,YAAa,CAAC,CAAE,MAAAsR,EAAO,iBAAA4J,EAAkB,yBAAAkI,EAA0B,OAAQC,KAAiB,CAC9G,GAAI,KAAK,yBAA0B,CAC/B,KAAK,OAAS,OACd,KAAK,eAAiB,OACtB,MACxB,CAEoB,MAAMC,EAAmB,KAAK,QAAQ,YAClC9kB,EAAc,qBAAsB,GACpC+kB,GACE,CAAE,uBAAAC,EAAwB,0BAAAC,GAA+BjlB,EAAc,SAAU,EAKjFklB,EAAmB,CAAC,KAAK,cAC3B,CAACpD,GAAiB,KAAK,aAAc+C,CAAS,EAY5CM,EAA+B,CAACzI,GAAoBkI,EAC1D,GAAI,KAAK,QAAQ,YACb,KAAK,YACLO,GACCzI,IACIwI,GAAoB,CAAC,KAAK,kBAAoB,CAC/C,KAAK,aACL,KAAK,aAAe,KAAK,WACzB,KAAK,aAAa,aAAe,QAErC,MAAME,EAAmB,CACrB,GAAGxZ,GAAmBkZ,EAAkB,QAAQ,EAChD,OAAQE,EACR,WAAYC,CACf,GACGjlB,EAAc,oBACd,KAAK,QAAQ,cACbolB,EAAiB,MAAQ,EACzBA,EAAiB,KAAO,IAE5B,KAAK,eAAeA,CAAgB,EAKpC,KAAK,mBAAmBtS,EAAOqS,CAA4B,CACnF,MAO6BzI,GACDiI,GAAgB,IAAI,EAEpB,KAAK,OAAM,GAAM,KAAK,QAAQ,gBAC9B,KAAK,QAAQ,eAAgB,EAGrC,KAAK,aAAeE,CACxC,CAAiB,CAEjB,CACQ,SAAU,CACN,KAAK,QAAQ,UAAY,KAAK,WAAY,EAC1C,KAAK,KAAK,MAAM,OAAO,IAAI,EAC3B,MAAMnG,EAAQ,KAAK,SAAU,EAC7BA,GAASA,EAAM,OAAO,IAAI,EAC1B,KAAK,QAAU,KAAK,OAAO,SAAS,OAAO,IAAI,EAC/C,KAAK,SAAW,OAChB,KAAK,cAAc,MAAO,EAC1BjH,EAAY,KAAK,gBAAgB,CAC7C,CAEQ,aAAc,CACV,KAAK,sBAAwB,EACzC,CACQ,eAAgB,CACZ,KAAK,sBAAwB,EACzC,CACQ,iBAAkB,CACd,OAAO,KAAK,uBAAyB,KAAK,qBACtD,CACQ,wBAAyB,CACrB,OAAQ,KAAK,oBACR,KAAK,QAAU,KAAK,OAAO,uBAAsB,GAClD,EAChB,CAEQ,aAAc,CACN,KAAK,gBAAiB,IAE1B,KAAK,WAAa,GAClB,KAAK,OAAS,KAAK,MAAM,QAAQ4N,EAAoB,EACrD,KAAK,cACjB,CACQ,sBAAuB,CACnB,KAAM,CAAE,cAAArlB,GAAkB,KAAK,QAC/B,OAAOA,GAAiBA,EAAc,SAAQ,EAAG,iBAC7D,CACQ,WAAWslB,EAAwB,GAAM,CAErC,GADA,KAAK,KAAK,gBAAkB,GACxB,KAAK,KAAK,kBAAmB,CAC7B,KAAK,QAAQ,gBAAkB,KAAK,QAAQ,eAAgB,EAC5D,MAChB,CAkBY,GALI,OAAO,gCACP,CAAC,KAAK,2BACN5B,GAAuC,IAAI,EAE/C,CAAC,KAAK,KAAK,YAAc,KAAK,KAAK,YAAa,EAC5C,KAAK,cACL,OACJ,KAAK,cAAgB,GACrB,QAASzmB,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IAAK,CACvC,MAAM2T,EAAO,KAAK,KAAK3T,CAAC,EACxB2T,EAAK,qBAAuB,GAC5BA,EAAK,aAAa,UAAU,EACxBA,EAAK,QAAQ,YACbA,EAAK,WAAW,EAAK,CAEzC,CACY,KAAM,CAAE,SAAArP,EAAU,OAAAC,CAAQ,EAAG,KAAK,QAClC,GAAID,IAAa,QAAa,CAACC,EAC3B,OACJ,MAAMoC,EAAoB,KAAK,qBAAsB,EACrD,KAAK,2BAA6BA,EAC5BA,EAAkB,KAAK,aAAc,EAAE,EACvC,OACN,KAAK,eAAgB,EACrB0hB,GAAyB,KAAK,gBAAgB,YAAY,CACtE,CACQ,QAAS,CAML,GALA,KAAK,gBAAkB,GACE,KAAK,gBAAiB,EAIzB,CAClB,KAAK,cAAe,EACpB,KAAK,kBAAmB,EACxB,KAAK,MAAM,QAAQC,EAAiB,EACpC,MAChB,CACiB,KAAK,YACN,KAAK,MAAM,QAAQC,EAAkB,EAEzC,KAAK,WAAa,GAIlB,KAAK,MAAM,QAAQC,EAAmB,EAKtC,KAAK,MAAM,QAAQC,EAAY,EAK/B,KAAK,MAAM,QAAQC,EAAkB,EACrC,KAAK,kBAAmB,EAMxB,MAAMC,EAAM1N,GAAK,IAAK,EACtBnB,EAAU,MAAQsC,GAAM,EAAG,IAAO,GAAIuM,EAAM7O,EAAU,SAAS,EAC/DA,EAAU,UAAY6O,EACtB7O,EAAU,aAAe,GACzB8O,GAAW,OAAO,QAAQ9O,CAAS,EACnC8O,GAAW,UAAU,QAAQ9O,CAAS,EACtC8O,GAAW,OAAO,QAAQ9O,CAAS,EACnCA,EAAU,aAAe,EACrC,CACQ,WAAY,CACH,KAAK,kBACN,KAAK,gBAAkB,GACvB1V,GAAU,KAAK,KAAK,cAAc,EAElD,CACQ,mBAAoB,CAChB,KAAK,MAAM,QAAQykB,EAAa,EAChC,KAAK,YAAY,QAAQC,EAAmB,CACxD,CACQ,0BAA2B,CAClB,KAAK,4BACN,KAAK,0BAA4B,GACjC9Z,EAAM,UAAU,KAAK,iBAAkB,GAAO,EAAI,EAElE,CACQ,2BAA4B,CAMxBA,EAAM,WAAW,IAAM,CACf,KAAK,cACL,KAAK,KAAK,UAAW,EAGrB,KAAK,KAAK,kBAAmB,CAEjD,CAAa,CACb,CAIQ,gBAAiB,CACT,KAAK,UAAY,CAAC,KAAK,WAE3B,KAAK,SAAW,KAAK,QAAS,EAC1B,KAAK,UACL,CAACwG,EAAW,KAAK,SAAS,YAAY,CAAC,GACvC,CAACA,EAAW,KAAK,SAAS,YAAY,CAAC,IACvC,KAAK,SAAW,QAEhC,CACQ,cAAe,CAKX,GAJI,CAAC,KAAK,WAGV,KAAK,aAAc,EACf,EAAE,KAAK,QAAQ,qBAAuB,KAAK,OAAM,IACjD,CAAC,KAAK,eACN,OASJ,GAAI,KAAK,YAAc,CAAC,KAAK,WAAW,SACpC,QAASxV,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IACrB,KAAK,KAAKA,CAAC,EACnB,aAAc,EAG3B,MAAM+oB,EAAa,KAAK,OACxB,KAAK,OAAS,KAAK,QAAQ,EAAK,EAChC,KAAK,gBAAkBtS,EAAW,EAClC,KAAK,cAAgB,GACrB,KAAK,gBAAkB,OACvB,KAAK,gBAAgB,UAAW,KAAK,OAAO,SAAS,EACrD,KAAM,CAAE,cAAA1T,GAAkB,KAAK,QAC/BA,GACIA,EAAc,OAAO,gBAAiB,KAAK,OAAO,UAAWgmB,EAAaA,EAAW,UAAY,MAAS,CAC1H,CACQ,aAAaC,EAAQ,UAAW,CAC5B,IAAIC,EAAmB,GAAQ,KAAK,QAAQ,cAAgB,KAAK,UAMjE,GALI,KAAK,QACL,KAAK,OAAO,cAAgB,KAAK,KAAK,aACtC,KAAK,OAAO,QAAUD,IACtBC,EAAmB,IAEnBA,GAAoB,KAAK,SAAU,CACnC,MAAMC,EAASpC,EAAkB,KAAK,QAAQ,EAC9C,KAAK,OAAS,CACV,YAAa,KAAK,KAAK,YACvB,MAAAkC,EACA,OAAAE,EACA,OAAQrC,EAAc,KAAK,QAAQ,EACnC,QAAS,KAAK,OAAS,KAAK,OAAO,OAASqC,CAC/C,CACjB,CACA,CACQ,gBAAiB,CACb,GAAI,CAACnC,EACD,OACJ,MAAMoC,EAAmB,KAAK,eAC1B,KAAK,sBACL,KAAK,QAAQ,oBACXC,EAAgB,KAAK,iBAAmB,CAAC3E,GAAY,KAAK,eAAe,EACzE9d,EAAoB,KAAK,qBAAsB,EAC/C0iB,EAAyB1iB,EACzBA,EAAkB,KAAK,aAAc,EAAE,EACvC,OACA2iB,EAA8BD,IAA2B,KAAK,2BAChEF,GACA,KAAK,WACJC,GACG5hB,EAAa,KAAK,YAAY,GAC9B8hB,KACJvC,EAAe,KAAK,SAAUsC,CAAsB,EACpD,KAAK,qBAAuB,GAC5B,KAAK,eAAgB,EAErC,CACQ,QAAQE,EAAkB,GAAM,CAC5B,MAAMC,EAAU,KAAK,eAAgB,EACrC,IAAI9N,EAAY,KAAK,oBAAoB8N,CAAO,EAMhD,OAAID,IACA7N,EAAY,KAAK,gBAAgBA,CAAS,GAE9C+N,GAAS/N,CAAS,EACX,CACH,YAAa,KAAK,KAAK,YACvB,YAAa8N,EACb,UAAA9N,EACA,aAAc,CAAE,EAChB,OAAQ,KAAK,EAChB,CACb,CACQ,gBAAiB,CACb,KAAM,CAAE,cAAA3Y,GAAkB,KAAK,QAC/B,GAAI,CAACA,EACD,OAAO0T,EAAW,EACtB,MAAMmB,EAAM7U,EAAc,mBAAoB,EAE9C,GAAI,EADoB,KAAK,QAAQ,SAAW,KAAK,KAAK,KAAK2mB,EAAsB,GAC/D,CAElB,KAAM,CAAE,OAAA1Q,GAAW,KAAK,KACpBA,IACAX,EAAcT,EAAI,EAAGoB,EAAO,OAAO,CAAC,EACpCX,EAAcT,EAAI,EAAGoB,EAAO,OAAO,CAAC,EAExD,CACY,OAAOpB,CACnB,CACQ,oBAAoBA,EAAK,CACrB,MAAM+R,EAAmBlT,EAAW,EAEpC,GADAgN,EAAYkG,EAAkB/R,CAAG,EAC7B,KAAK,QAAQ,QACb,OAAO+R,EAMX,QAAS3pB,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IAAK,CACvC,MAAM2T,EAAO,KAAK,KAAK3T,CAAC,EAClB,CAAE,OAAAgZ,EAAQ,QAAAlK,CAAO,EAAK6E,EACxBA,IAAS,KAAK,MAAQqF,GAAUlK,EAAQ,eAKpCkK,EAAO,SACPyK,EAAYkG,EAAkB/R,CAAG,EAErCS,EAAcsR,EAAiB,EAAG3Q,EAAO,OAAO,CAAC,EACjDX,EAAcsR,EAAiB,EAAG3Q,EAAO,OAAO,CAAC,EAErE,CACY,OAAO2Q,CACnB,CACQ,eAAe/R,EAAKgS,EAAgB,GAAO,CACvC,MAAMC,EAAiBpT,EAAW,EAClCgN,EAAYoG,EAAgBjS,CAAG,EAC/B,QAAS5X,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IAAK,CACvC,MAAM2T,EAAO,KAAK,KAAK3T,CAAC,EACpB,CAAC4pB,GACDjW,EAAK,QAAQ,cACbA,EAAK,QACLA,IAASA,EAAK,MACdyE,EAAayR,EAAgB,CACzB,EAAG,CAAClW,EAAK,OAAO,OAAO,EACvB,EAAG,CAACA,EAAK,OAAO,OAAO,CAC/C,CAAqB,EAEAnM,EAAamM,EAAK,YAAY,GAEnCyE,EAAayR,EAAgBlW,EAAK,YAAY,CAC9D,CACY,OAAInM,EAAa,KAAK,YAAY,GAC9B4Q,EAAayR,EAAgB,KAAK,YAAY,EAE3CA,CACnB,CACQ,gBAAgBjS,EAAK,CACjB,MAAMkS,EAAsBrT,EAAW,EACvCgN,EAAYqG,EAAqBlS,CAAG,EACpC,QAAS5X,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IAAK,CACvC,MAAM2T,EAAO,KAAK,KAAK3T,CAAC,EAGxB,GAFI,CAAC2T,EAAK,UAEN,CAACnM,EAAamM,EAAK,YAAY,EAC/B,SACJmD,GAASnD,EAAK,YAAY,GAAKA,EAAK,eAAgB,EACpD,MAAM4Q,EAAY9N,EAAW,EACvBsT,EAAUpW,EAAK,eAAgB,EACrC8P,EAAYc,EAAWwF,CAAO,EAC9BzF,GAAoBwF,EAAqBnW,EAAK,aAAcA,EAAK,SAAWA,EAAK,SAAS,UAAY,OAAW4Q,CAAS,CAC1I,CACY,OAAI/c,EAAa,KAAK,YAAY,GAC9B8c,GAAoBwF,EAAqB,KAAK,YAAY,EAEvDA,CACnB,CACQ,eAAejU,EAAO,CAClB,KAAK,YAAcA,EACnB,KAAK,KAAK,yBAA0B,EACpC,KAAK,kBAAoB,EACrC,CACQ,WAAW/G,EAAS,CAChB,KAAK,QAAU,CACX,GAAG,KAAK,QACR,GAAGA,EACH,UAAWA,EAAQ,YAAc,OAAYA,EAAQ,UAAY,EACpE,CACb,CACQ,mBAAoB,CAChB,KAAK,OAAS,OACd,KAAK,OAAS,OACd,KAAK,SAAW,OAChB,KAAK,2BAA6B,OAClC,KAAK,YAAc,OACnB,KAAK,OAAS,OACd,KAAK,cAAgB,EACjC,CACQ,oCAAqC,CAC5B,KAAK,gBAQN,KAAK,eAAe,2BACpBgL,EAAU,WACV,KAAK,eAAe,mBAAmB,EAAI,CAE3D,CACQ,mBAAmBkQ,EAAqB,GAAO,CAM3C,MAAMtH,EAAO,KAAK,QAAS,EAC3B,KAAK,oBAAsB,KAAK,kBAAoBA,EAAK,mBACzD,KAAK,mBAAqB,KAAK,iBAAmBA,EAAK,kBACvD,KAAK,0BAA4B,KAAK,wBAA0BA,EAAK,yBACrE,MAAMuH,EAAW,EAAQ,KAAK,cAAiB,OAASvH,EAWxD,GANgB,EAAEsH,GACbC,GAAY,KAAK,yBAClB,KAAK,mBACL,KAAK,QAAQ,mBACb,KAAK,gCACL,KAAK,KAAK,uBAEV,OACJ,KAAM,CAAE,OAAA1lB,EAAQ,SAAAD,CAAU,EAAG,KAAK,QAIlC,GAAI,GAAC,KAAK,QAAU,EAAEC,GAAUD,IAQhC,IANA,KAAK,yBAA2BwV,EAAU,UAMtC,CAAC,KAAK,aAAe,CAAC,KAAK,eAAgB,CAC3C,MAAMoQ,EAAiB,KAAK,2BAA4B,EACpDA,GACAA,EAAe,QACf,KAAK,oBAAsB,GAC3B,KAAK,eAAiBA,EACtB,KAAK,mCAAoC,EACzC,KAAK,eAAiBzT,EAAW,EACjC,KAAK,qBAAuBA,EAAW,EACvCJ,GAAqB,KAAK,qBAAsB,KAAK,OAAO,UAAW6T,EAAe,OAAO,SAAS,EACtGzG,EAAY,KAAK,eAAgB,KAAK,oBAAoB,GAG1D,KAAK,eAAiB,KAAK,eAAiB,MAEhE,CAKY,GAAI,GAAC,KAAK,gBAAkB,CAAC,KAAK,eAK7B,KAAK,SACN,KAAK,OAAShN,EAAW,EACzB,KAAK,qBAAuBA,EAAW,GAKvC,KAAK,gBACL,KAAK,sBACL,KAAK,gBACL,KAAK,eAAe,QACpB,KAAK,mCAAoC,EACzCN,GAAgB,KAAK,OAAQ,KAAK,eAAgB,KAAK,eAAe,MAAM,GAKvE,KAAK,aACE,KAAK,aAEb,KAAK,OAAS,KAAK,eAAe,KAAK,OAAO,SAAS,EAGvDsN,EAAY,KAAK,OAAQ,KAAK,OAAO,SAAS,EAElD9L,GAAc,KAAK,OAAQ,KAAK,WAAW,GAM3C8L,EAAY,KAAK,OAAQ,KAAK,OAAO,SAAS,EAK9C,KAAK,gCAAgC,CACrC,KAAK,+BAAiC,GACtC,MAAMyG,EAAiB,KAAK,2BAA4B,EACpDA,GACA,EAAQA,EAAe,cACnB,EAAQ,KAAK,cACjB,CAACA,EAAe,QAAQ,cACxBA,EAAe,QACf,KAAK,oBAAsB,GAC3B,KAAK,eAAiBA,EACtB,KAAK,mCAAoC,EACzC,KAAK,eAAiBzT,EAAW,EACjC,KAAK,qBAAuBA,EAAW,EACvCJ,GAAqB,KAAK,qBAAsB,KAAK,OAAQ6T,EAAe,MAAM,EAClFzG,EAAY,KAAK,eAAgB,KAAK,oBAAoB,GAG1D,KAAK,eAAiB,KAAK,eAAiB,MAEhE,EAOA,CACQ,4BAA6B,CACzB,GAAI,GAAC,KAAK,QACN3M,GAAS,KAAK,OAAO,YAAY,GACjCG,GAAe,KAAK,OAAO,YAAY,GAG3C,OAAI,KAAK,OAAO,eACL,KAAK,OAGL,KAAK,OAAO,2BAA4B,CAE/D,CACQ,cAAe,CACX,MAAO,IAAS,KAAK,gBACjB,KAAK,aACL,KAAK,QAAQ,aACb,KAAK,OACrB,CACQ,gBAAiB,CACb,MAAMyL,EAAO,KAAK,QAAS,EACrBuH,EAAW,EAAQ,KAAK,cAAiB,OAASvH,EACxD,IAAIyH,EAAU,GAuBd,IAlBI,KAAK,mBAAqB,KAAK,QAAQ,qBACvCA,EAAU,IAMVF,IACC,KAAK,yBAA2B,KAAK,oBACtCE,EAAU,IAMV,KAAK,2BAA6BrQ,EAAU,YAC5CqQ,EAAU,IAEVA,EACA,OACJ,KAAM,CAAE,OAAA5lB,EAAQ,SAAAD,CAAU,EAAG,KAAK,QAWlC,GANA,KAAK,gBAAkB,GAAS,KAAK,QAAU,KAAK,OAAO,iBACvD,KAAK,kBACL,KAAK,kBACJ,KAAK,kBACN,KAAK,YAAc,KAAK,eAAiB,QAEzC,CAAC,KAAK,QAAU,EAAEC,GAAUD,GAC5B,OAKJmf,EAAY,KAAK,gBAAiB,KAAK,OAAO,SAAS,EAIvD,MAAM2G,EAAiB,KAAK,UAAU,EAChCC,EAAiB,KAAK,UAAU,EAKtCtS,GAAgB,KAAK,gBAAiB,KAAK,UAAW,KAAK,KAAMkS,CAAQ,EAKrEvH,EAAK,QACL,CAACA,EAAK,SACL,KAAK,UAAU,IAAM,GAAK,KAAK,UAAU,IAAM,KAChDA,EAAK,OAASA,EAAK,OAAO,UAC1BA,EAAK,qBAAuBjM,EAAW,GAE3C,KAAM,CAAE,OAAA1O,CAAM,EAAK2a,EACnB,GAAI,CAAC3a,EAAQ,CAML,KAAK,sBACL,KAAK,uBAAwB,EAC7B,KAAK,eAAgB,GAEzB,MAChB,CACgB,CAAC,KAAK,iBAAmB,CAAC,KAAK,oBAC/B,KAAK,uBAAwB,GAG7B4b,GAAkB,KAAK,oBAAoB,EAAG,KAAK,gBAAgB,CAAC,EACpEA,GAAkB,KAAK,oBAAoB,EAAG,KAAK,gBAAgB,CAAC,GAWxE3N,GAAa,KAAK,gBAAiB,KAAK,gBAAiBjO,EAAQ,KAAK,YAAY,GAC9E,KAAK,UAAU,IAAMqiB,GACrB,KAAK,UAAU,IAAMC,GACrB,CAACtF,GAAgB,KAAK,gBAAgB,EAAG,KAAK,oBAAoB,CAAC,GACnE,CAACA,GAAgB,KAAK,gBAAgB,EAAG,KAAK,oBAAoB,CAAC,KACnE,KAAK,aAAe,GACpB,KAAK,eAAgB,EACrB,KAAK,gBAAgB,mBAAoBhd,CAAM,EAQ/D,CACQ,MAAO,CACH,KAAK,UAAY,EAE7B,CACQ,MAAO,CACH,KAAK,UAAY,EAE7B,CACQ,eAAeuiB,EAAY,GAAM,CAE7B,GADA,KAAK,QAAQ,eAAe,eAAgB,EACxCA,EAAW,CACX,MAAM7I,EAAQ,KAAK,SAAU,EAC7BA,GAASA,EAAM,eAAgB,CAC/C,CACgB,KAAK,cAAgB,CAAC,KAAK,aAAa,WACxC,KAAK,aAAe,OAEpC,CACQ,wBAAyB,CACrB,KAAK,oBAAsBlL,EAAa,EACxC,KAAK,gBAAkBA,EAAa,EACpC,KAAK,6BAA+BA,EAAa,CAC7D,CACQ,mBAAmBV,EAAOqS,EAA+B,GAAO,CAC5D,MAAMqC,EAAW,KAAK,SAChBC,EAAuBD,EAAWA,EAAS,aAAe,CAAE,EAC5DE,EAAc,CAAE,GAAG,KAAK,YAAc,EACtCC,EAAcnU,EAAa,GAC7B,CAAC,KAAK,gBACN,CAAC,KAAK,eAAe,QAAQ,cAC7B,KAAK,eAAiB,KAAK,qBAAuB,QAEtD,KAAK,+BAAiC,CAAC2R,EACvC,MAAMyC,EAAiBlU,EAAW,EAC5BmU,EAAiBL,EAAWA,EAAS,OAAS,OAC9CM,EAAe,KAAK,OAAS,KAAK,OAAO,OAAS,OAClDC,EAA0BF,IAAmBC,EAC7CpJ,EAAQ,KAAK,SAAU,EACvBmB,EAAe,CAACnB,GAASA,EAAM,QAAQ,QAAU,EACjDkB,EAAyB,GAAQmI,GACnC,CAAClI,GACD,KAAK,QAAQ,YAAc,IAC3B,CAAC,KAAK,KAAK,KAAKmI,EAAmB,GACvC,KAAK,kBAAoB,EACzB,IAAIC,EACJ,KAAK,eAAkBxhB,GAAW,CAC9B,MAAM2S,EAAW3S,EAAS,IAC1ByhB,GAAaP,EAAY,EAAG7U,EAAM,EAAGsG,CAAQ,EAC7C8O,GAAaP,EAAY,EAAG7U,EAAM,EAAGsG,CAAQ,EAC7C,KAAK,eAAeuO,CAAW,EAC3B,KAAK,gBACL,KAAK,sBACL,KAAK,QACL,KAAK,gBACL,KAAK,eAAe,SACpBrU,GAAqBsU,EAAgB,KAAK,OAAO,UAAW,KAAK,eAAe,OAAO,SAAS,EAChGO,GAAO,KAAK,eAAgB,KAAK,qBAAsBP,EAAgBxO,CAAQ,EAK3E6O,GACArG,GAAU,KAAK,eAAgBqG,CAAkB,IACjD,KAAK,kBAAoB,IAExBA,IACDA,EAAqBvU,EAAW,GACpCgN,EAAYuH,EAAoB,KAAK,cAAc,GAEnDF,IACA,KAAK,gBAAkBL,EACvBjI,GAAUiI,EAAaD,EAAsB,KAAK,aAAcrO,EAAUwG,EAAwBC,CAAY,GAElH,KAAK,KAAK,yBAA0B,EACpC,KAAK,eAAgB,EACrB,KAAK,kBAAoBzG,CAC5B,EACD,KAAK,eAAe,KAAK,QAAQ,WAAa,IAAO,CAAC,CAClE,CACQ,eAAerN,EAAS,CACpB,KAAK,gBAAgB,gBAAgB,EACrC,KAAK,kBAAkB,KAAM,EAC7B,KAAK,cAAc,kBAAkB,KAAM,EACvC,KAAK,mBACL0L,EAAY,KAAK,gBAAgB,EACjC,KAAK,iBAAmB,QAO5B,KAAK,iBAAmBxL,EAAM,OAAO,IAAM,CACvCuR,GAAsB,uBAAyB,GAE/C,KAAK,cAAgB,KAAK,YAAc/T,EAAY,CAAC,GACrD,KAAK,iBAAmBmV,GAAmB,KAAK,YAAa,CAAC,EAAG,GAAI,EAAG,CACpE,GAAG7S,EACH,OAAQ,GACR,SAAWtF,GAAW,CAClB,KAAK,eAAeA,CAAM,EAC1BsF,EAAQ,UAAYA,EAAQ,SAAStF,CAAM,CAC9C,EACD,OAAQ,IAAM,CAEb,EACD,WAAY,IAAM,CAEdsF,EAAQ,YAAcA,EAAQ,WAAY,EAC1C,KAAK,kBAAmB,CAC3B,CACrB,CAAiB,EACG,KAAK,eACL,KAAK,aAAa,iBAAmB,KAAK,kBAE9C,KAAK,iBAAmB,MACxC,CAAa,CACb,CACQ,mBAAoB,CACZ,KAAK,eACL,KAAK,aAAa,iBAAmB,OACrC,KAAK,aAAa,gBAAkB,QAExC,MAAM2S,EAAQ,KAAK,SAAU,EAC7BA,GAASA,EAAM,sBAAuB,EACtC,KAAK,aACD,KAAK,iBACD,KAAK,gBACD,OACZ,KAAK,gBAAgB,mBAAmB,CACpD,CACQ,iBAAkB,CACV,KAAK,mBACL,KAAK,gBAAkB,KAAK,eAAe6E,EAAe,EAC1D,KAAK,iBAAiB,KAAM,GAEhC,KAAK,kBAAmB,CACpC,CACQ,yBAA0B,CACtB,MAAM5D,EAAO,KAAK,QAAS,EAC3B,GAAI,CAAE,qBAAAyI,EAAsB,OAAApjB,EAAQ,OAAAxD,EAAQ,aAAAkC,CAAc,EAAGic,EAC7D,GAAI,GAACyI,GAAwB,CAACpjB,GAAU,CAACxD,GAOzC,IAAI,OAASme,GACT,KAAK,QACLne,GACA6mB,GAA0B,KAAK,QAAQ,cAAe,KAAK,OAAO,UAAW7mB,EAAO,SAAS,EAAG,CAChGwD,EAAS,KAAK,QAAU0O,EAAW,EACnC,MAAM4U,EAAU7V,EAAW,KAAK,OAAO,UAAU,CAAC,EAClDzN,EAAO,EAAE,IAAM2a,EAAK,OAAO,EAAE,IAC7B3a,EAAO,EAAE,IAAMA,EAAO,EAAE,IAAMsjB,EAC9B,MAAMC,EAAU9V,EAAW,KAAK,OAAO,UAAU,CAAC,EAClDzN,EAAO,EAAE,IAAM2a,EAAK,OAAO,EAAE,IAC7B3a,EAAO,EAAE,IAAMA,EAAO,EAAE,IAAMujB,CAC9C,CACY7H,EAAY0H,EAAsBpjB,CAAM,EAMxCqQ,EAAa+S,EAAsB1kB,CAAY,EAO/CuP,GAAa,KAAK,6BAA8B,KAAK,gBAAiBmV,EAAsB1kB,CAAY,EACpH,CACQ,mBAAmBnC,EAAUqP,EAAM,CAC1B,KAAK,YAAY,IAAIrP,CAAQ,GAC9B,KAAK,YAAY,IAAIA,EAAU,IAAI0gB,EAAW,EAEpC,KAAK,YAAY,IAAI1gB,CAAQ,EACrC,IAAIqP,CAAI,EACd,MAAM3I,EAAS2I,EAAK,QAAQ,uBAC5BA,EAAK,QAAQ,CACT,WAAY3I,EAASA,EAAO,WAAa,OACzC,sBAAuBA,GAAUA,EAAO,4BAClCA,EAAO,4BAA4B2I,CAAI,EACvC,MACtB,CAAa,CACb,CACQ,QAAS,CACL,MAAM8N,EAAQ,KAAK,SAAU,EAC7B,OAAOA,EAAQA,EAAM,OAAS,KAAO,EACjD,CACQ,SAAU,CACN,KAAM,CAAE,SAAAnd,GAAa,KAAK,QAC1B,OAAOA,EAAW,KAAK,SAAU,GAAE,MAAQ,KAAO,IAC9D,CACQ,aAAc,CACV,KAAM,CAAE,SAAAA,GAAa,KAAK,QAC1B,OAAOA,EAAW,KAAK,SAAU,GAAE,SAAW,MAC1D,CACQ,UAAW,CACP,KAAM,CAAE,SAAAA,GAAa,KAAK,QAC1B,GAAIA,EACA,OAAO,KAAK,KAAK,YAAY,IAAIA,CAAQ,CACzD,CACQ,QAAQ,CAAE,WAAAinB,EAAY,WAAA3f,EAAY,sBAAAwZ,CAAqB,EAAM,CAAA,EAAI,CAC7D,MAAM3D,EAAQ,KAAK,SAAU,EACzBA,GACAA,EAAM,QAAQ,KAAM2D,CAAqB,EACzCmG,IACA,KAAK,gBAAkB,OACvB,KAAK,WAAa,IAElB3f,GACA,KAAK,WAAW,CAAE,WAAAA,EAAY,CAC9C,CACQ,UAAW,CACP,MAAM6V,EAAQ,KAAK,SAAU,EAC7B,OAAIA,EACOA,EAAM,SAAS,IAAI,EAGnB,EAEvB,CACQ,sBAAuB,CACnB,KAAM,CAAE,cAAA1e,GAAkB,KAAK,QAC/B,GAAI,CAACA,EACD,OAEJ,IAAIyoB,EAAyB,GAK7B,KAAM,CAAE,aAAA/kB,CAAY,EAAK1D,EAWzB,IAVI0D,EAAa,GACbA,EAAa,QACbA,EAAa,SACbA,EAAa,SACbA,EAAa,SACbA,EAAa,OACbA,EAAa,SACb+kB,EAAyB,IAGzB,CAACA,EACD,OACJ,MAAMC,EAAc,CAAE,EAClBhlB,EAAa,GACb8f,GAAyB,IAAKxjB,EAAe0oB,EAAa,KAAK,eAAe,EAGlF,QAASzrB,EAAI,EAAGA,EAAIomB,GAAc,OAAQpmB,IACtCumB,GAAyB,SAASH,GAAcpmB,CAAC,CAAC,GAAI+C,EAAe0oB,EAAa,KAAK,eAAe,EACtGlF,GAAyB,OAAOH,GAAcpmB,CAAC,CAAC,GAAI+C,EAAe0oB,EAAa,KAAK,eAAe,EAIxG1oB,EAAc,OAAQ,EAEtB,UAAWzE,KAAOmtB,EACd1oB,EAAc,eAAezE,EAAKmtB,EAAYntB,CAAG,CAAC,EAC9C,KAAK,kBACL,KAAK,gBAAgBA,CAAG,EAAImtB,EAAYntB,CAAG,GAKnDyE,EAAc,eAAgB,CAC1C,CACQ,oBAAoBqF,EAAW,CAC3B,GAAI,CAAC,KAAK,UAAY,KAAK,MACvB,OACJ,GAAI,CAAC,KAAK,UACN,OAAOie,GAEX,MAAMqF,EAAS,CACX,WAAY,EACf,EACK/kB,EAAoB,KAAK,qBAAsB,EACrD,GAAI,KAAK,WACL,YAAK,WAAa,GAClB+kB,EAAO,QAAU,GACjBA,EAAO,cACHhhB,GAAmBtC,GAAW,aAAa,GAAK,GACpDsjB,EAAO,UAAY/kB,EACbA,EAAkB,KAAK,aAAc,EAAE,EACvC,OACC+kB,EAEX,MAAMhJ,EAAO,KAAK,QAAS,EAC3B,GAAI,CAAC,KAAK,iBAAmB,CAAC,KAAK,QAAU,CAACA,EAAK,OAAQ,CACvD,MAAMiJ,EAAc,CAAE,EACtB,OAAI,KAAK,QAAQ,WACbA,EAAY,QACR,KAAK,aAAa,UAAY,OACxB,KAAK,aAAa,QAClB,EACVA,EAAY,cACRjhB,GAAmBtC,GAAW,aAAa,GAAK,IAEpD,KAAK,cAAgB,CAACZ,EAAa,KAAK,YAAY,IACpDmkB,EAAY,UAAYhlB,EAClBA,EAAkB,CAAE,EAAE,EAAE,EACxB,OACN,KAAK,aAAe,IAEjBglB,CACvB,CACY,MAAMC,EAAiBlJ,EAAK,iBAAmBA,EAAK,aACpD,KAAK,wBAAyB,EAC9BgJ,EAAO,UAAYnG,GAAyB,KAAK,6BAA8B,KAAK,UAAWqG,CAAc,EACzGjlB,IACA+kB,EAAO,UAAY/kB,EAAkBilB,EAAgBF,EAAO,SAAS,GAEzE,KAAM,CAAE,EAAAtuB,EAAG,EAAAwX,CAAG,EAAG,KAAK,gBACtB8W,EAAO,gBAAkB,GAAGtuB,EAAE,OAAS,GAAG,KAAKwX,EAAE,OAAS,GAAG,MACzD8N,EAAK,gBAKLgJ,EAAO,QACHhJ,IAAS,KACHkJ,EAAe,SACb,KAAK,aAAa,SAClB,EACF,KAAK,gBACD,KAAK,aAAa,QAClBA,EAAe,YAO7BF,EAAO,QACHhJ,IAAS,KACHkJ,EAAe,UAAY,OACvBA,EAAe,QACf,GACJA,EAAe,cAAgB,OAC3BA,EAAe,YACf,EAKlB,UAAWttB,KAAOyH,GAAiB,CAC/B,GAAI6lB,EAAettB,CAAG,IAAM,OACxB,SACJ,KAAM,CAAE,QAAAutB,EAAS,QAAAC,EAAS,cAAAC,CAAa,EAAKhmB,GAAgBzH,CAAG,EAOzD0tB,EAAYN,EAAO,YAAc,OACjCE,EAAettB,CAAG,EAClButB,EAAQD,EAAettB,CAAG,EAAGokB,CAAI,EACvC,GAAIoJ,EAAS,CACT,MAAMG,EAAMH,EAAQ,OACpB,QAAS9rB,EAAI,EAAGA,EAAIisB,EAAKjsB,IACrB0rB,EAAOI,EAAQ9rB,CAAC,CAAC,EAAIgsB,CAE7C,MAKwBD,EACA,KAAK,QAAQ,cAAc,YAAY,KAAKztB,CAAG,EAAI0tB,EAGnDN,EAAOptB,CAAG,EAAI0tB,CAGtC,CAMY,OAAI,KAAK,QAAQ,WACbN,EAAO,cACHhJ,IAAS,KACHhY,GAAmBtC,GAAW,aAAa,GAAK,GAChD,QAEPsjB,CACnB,CACQ,eAAgB,CACZ,KAAK,WAAa,KAAK,SAAW,MAC9C,CAEQ,WAAY,CACR,KAAK,KAAK,MAAM,QAAS/X,GAASA,EAAK,kBAAkB,MAAM,EAC/D,KAAK,KAAK,MAAM,QAAQ2U,EAAiB,EACzC,KAAK,KAAK,YAAY,MAAO,CACzC,CACK,CACL,CACA,SAASG,GAAa9U,EAAM,CACxBA,EAAK,aAAc,CACvB,CACA,SAAS+U,GAAmB/U,EAAM,CAC9B,MAAM4W,EAAW5W,EAAK,YAAY,UAAYA,EAAK,SACnD,GAAIA,EAAK,OAAQ,GACbA,EAAK,QACL4W,GACA5W,EAAK,aAAa,WAAW,EAAG,CAChC,KAAM,CAAE,UAAWpP,EAAQ,YAAa2nB,CAAc,EAAKvY,EAAK,OAC1D,CAAE,cAAAwY,GAAkBxY,EAAK,QACzBsW,EAAWM,EAAS,SAAW5W,EAAK,OAAO,OAG7CwY,IAAkB,OAClBzV,EAAUjB,GAAS,CACf,MAAM2W,EAAenC,EACfM,EAAS,YAAY9U,CAAI,EACzB8U,EAAS,UAAU9U,CAAI,EACvB9M,EAAS6M,EAAW4W,CAAY,EACtCA,EAAa,IAAM7nB,EAAOkR,CAAI,EAAE,IAChC2W,EAAa,IAAMA,EAAa,IAAMzjB,CACtD,CAAa,EAEIyiB,GAA0Be,EAAe5B,EAAS,UAAWhmB,CAAM,GACxEmS,EAAUjB,GAAS,CACf,MAAM2W,EAAenC,EACfM,EAAS,YAAY9U,CAAI,EACzB8U,EAAS,UAAU9U,CAAI,EACvB9M,EAAS6M,EAAWjR,EAAOkR,CAAI,CAAC,EACtC2W,EAAa,IAAMA,EAAa,IAAMzjB,EAIlCgL,EAAK,gBAAkB,CAACA,EAAK,mBAC7BA,EAAK,kBAAoB,GACzBA,EAAK,eAAe8B,CAAI,EAAE,IACtB9B,EAAK,eAAe8B,CAAI,EAAE,IAAM9M,EAExD,CAAa,EAEL,MAAM0jB,EAAc9V,EAAa,EACjCP,GAAaqW,EAAa9nB,EAAQgmB,EAAS,SAAS,EACpD,MAAM+B,EAAc/V,EAAa,EAC7B0T,EACAjU,GAAasW,EAAa3Y,EAAK,eAAeuY,EAAgB,EAAI,EAAG3B,EAAS,WAAW,EAGzFvU,GAAasW,EAAa/nB,EAAQgmB,EAAS,SAAS,EAExD,MAAM9K,EAAmB,CAACgF,GAAY4H,CAAW,EACjD,IAAI1E,EAA2B,GAC/B,GAAI,CAAChU,EAAK,WAAY,CAClB,MAAMuW,EAAiBvW,EAAK,2BAA4B,EAKxD,GAAIuW,GAAkB,CAACA,EAAe,WAAY,CAC9C,KAAM,CAAE,SAAUqC,EAAgB,OAAQC,CAAc,EAAGtC,EAC3D,GAAIqC,GAAkBC,EAAc,CAChC,MAAMC,EAAmBhW,EAAW,EACpCJ,GAAqBoW,EAAkBlC,EAAS,UAAWgC,EAAe,SAAS,EACnF,MAAM5B,EAAiBlU,EAAW,EAClCJ,GAAqBsU,EAAgBpmB,EAAQioB,EAAa,SAAS,EAC9D3H,GAAiB4H,EAAkB9B,CAAc,IAClDhD,EAA2B,IAE3BuC,EAAe,QAAQ,aACvBvW,EAAK,eAAiBgX,EACtBhX,EAAK,qBAAuB8Y,EAC5B9Y,EAAK,eAAiBuW,EAE9C,CACA,CACA,CACQvW,EAAK,gBAAgB,YAAa,CAC9B,OAAApP,EACA,SAAAgmB,EACA,MAAO+B,EACP,YAAAD,EACA,iBAAA5M,EACA,yBAAAkI,CACZ,CAAS,CACT,SACahU,EAAK,SAAU,CACpB,KAAM,CAAE,eAAAjW,GAAmBiW,EAAK,QAChCjW,GAAkBA,EAAgB,CAC1C,CAMIiW,EAAK,QAAQ,WAAa,MAC9B,CACA,SAASqT,GAAoBrT,EAAM,CAO1BA,EAAK,SAQLA,EAAK,iBACNA,EAAK,kBAAoBA,EAAK,OAAO,mBAOzCA,EAAK,0BAA4BA,EAAK,wBAA0B,GAAQA,EAAK,mBACzEA,EAAK,OAAO,mBACZA,EAAK,OAAO,0BAChBA,EAAK,mBAAqBA,EAAK,iBAAmBA,EAAK,OAAO,kBAClE,CACA,SAASwT,GAAgBxT,EAAM,CAC3BA,EAAK,kBACDA,EAAK,wBACDA,EAAK,iBACD,EAChB,CACA,SAASkV,GAAclV,EAAM,CACzBA,EAAK,cAAe,CACxB,CACA,SAAS2U,GAAkB3U,EAAM,CAC7BA,EAAK,kBAAmB,CAC5B,CACA,SAAS4U,GAAmB5U,EAAM,CAC9BA,EAAK,cAAgB,EACzB,CACA,SAAS6U,GAAoB7U,EAAM,CAC/B,KAAM,CAAE,cAAA5Q,GAAkB4Q,EAAK,QAC3B5Q,GAAiBA,EAAc,SAAQ,EAAG,uBAC1CA,EAAc,OAAO,qBAAqB,EAE9C4Q,EAAK,eAAgB,CACzB,CACA,SAAS+T,GAAgB/T,EAAM,CAC3BA,EAAK,gBAAiB,EACtBA,EAAK,YAAcA,EAAK,eAAiBA,EAAK,OAAS,OACvDA,EAAK,kBAAoB,EAC7B,CACA,SAASsT,GAAmBtT,EAAM,CAC9BA,EAAK,mBAAoB,CAC7B,CACA,SAASuT,GAAevT,EAAM,CAC1BA,EAAK,eAAgB,CACzB,CACA,SAASyU,GAAqBzU,EAAM,CAChCA,EAAK,qBAAsB,CAC/B,CACA,SAASmV,GAAoBrH,EAAO,CAChCA,EAAM,mBAAoB,CAC9B,CACA,SAASwJ,GAAayB,EAAQ7W,EAAOha,EAAG,CACpC6wB,EAAO,UAAY3W,EAAUF,EAAM,UAAW,EAAGha,CAAC,EAClD6wB,EAAO,MAAQ3W,EAAUF,EAAM,MAAO,EAAGha,CAAC,EAC1C6wB,EAAO,OAAS7W,EAAM,OACtB6W,EAAO,YAAc7W,EAAM,WAC/B,CACA,SAAS8W,GAAQD,EAAQre,EAAMue,EAAI/wB,EAAG,CAClC6wB,EAAO,IAAM3W,EAAU1H,EAAK,IAAKue,EAAG,IAAK/wB,CAAC,EAC1C6wB,EAAO,IAAM3W,EAAU1H,EAAK,IAAKue,EAAG,IAAK/wB,CAAC,CAC9C,CACA,SAASqvB,GAAOwB,EAAQre,EAAMue,EAAI/wB,EAAG,CACjC8wB,GAAQD,EAAO,EAAGre,EAAK,EAAGue,EAAG,EAAG/wB,CAAC,EACjC8wB,GAAQD,EAAO,EAAGre,EAAK,EAAGue,EAAG,EAAG/wB,CAAC,CACrC,CACA,SAASkvB,GAAoBpX,EAAM,CAC/B,OAAQA,EAAK,iBAAmBA,EAAK,gBAAgB,cAAgB,MACzE,CACA,MAAMmU,GAA0B,CAC5B,SAAU,IACV,KAAM,CAAC,GAAK,EAAG,GAAK,CAAC,CACzB,EACM+E,GAAqBC,GAAW,OAAO,UAAc,KACvD,UAAU,WACV,UAAU,UAAU,cAAc,SAASA,CAAM,EAM/CC,GAAaF,GAAkB,cAAc,GAAK,CAACA,GAAkB,SAAS,EAC9E,KAAK,MACL/M,EACN,SAASkN,GAAUvX,EAAM,CAErBA,EAAK,IAAMsX,GAAWtX,EAAK,GAAG,EAC9BA,EAAK,IAAMsX,GAAWtX,EAAK,GAAG,CAClC,CACA,SAASgU,GAAS7R,EAAK,CACnBoV,GAAUpV,EAAI,CAAC,EACfoV,GAAUpV,EAAI,CAAC,CACnB,CACA,SAASwT,GAA0Be,EAAe5B,EAAUhmB,EAAQ,CAChE,OAAQ4nB,IAAkB,YACrBA,IAAkB,mBACf,CAACzW,GAAOoP,GAAYyF,CAAQ,EAAGzF,GAAYvgB,CAAM,EAAG,EAAG,CACnE,CACA,SAASmlB,GAAuB/V,EAAM,CAClC,OAAOA,IAASA,EAAK,MAAQA,EAAK,QAAQ,OAC9C,CCnjDA,MAAMsZ,GAAyBjpB,GAAqB,CAChD,qBAAsB,CAAC3I,EAAK6xB,IAAWjZ,GAAY5Y,EAAK,SAAU6xB,CAAM,EACxE,cAAe,KAAO,CAClB,EAAG,SAAS,gBAAgB,YAAc,SAAS,KAAK,WACxD,EAAG,SAAS,gBAAgB,WAAa,SAAS,KAAK,SAC/D,GACI,kBAAmB,IAAM,EAC7B,CAAC,ECPKrU,GAAqB,CACvB,QAAS,MACb,EACMsU,GAAqBnpB,GAAqB,CAC5C,cAAgBf,IAAc,CAC1B,EAAGA,EAAS,WACZ,EAAGA,EAAS,SACpB,GACI,cAAe,IAAM,CACjB,GAAI,CAAC4V,GAAmB,QAAS,CAC7B,MAAMuU,EAAe,IAAIH,GAAuB,EAAE,EAClDG,EAAa,MAAM,MAAM,EACzBA,EAAa,WAAW,CAAE,aAAc,EAAI,CAAE,EAC9CvU,GAAmB,QAAUuU,CACzC,CACQ,OAAOvU,GAAmB,OAC7B,EACD,eAAgB,CAAC5V,EAAU6D,IAAU,CACjC7D,EAAS,MAAM,UAAY6D,IAAU,OAAYA,EAAQ,MAC5D,EACD,kBAAoB7D,GAAqB,OAAO,iBAAiBA,CAAQ,EAAE,WAAa,OAC5F,CAAC,ECnBKuB,GAAO,CACT,IAAK,CACD,QAASyb,EACZ,EACD,KAAM,CACF,QAASJ,GACT,eAAgBsN,GAChB,cAAAhoB,EACH,CACL,ECVA,SAASkoB,GAAiB1Z,EAAMU,EAAOiZ,EAAW,CAC9C,KAAM,CAAE,MAAA3sB,CAAK,EAAKgT,EACdA,EAAK,gBAAkBhT,EAAM,YAC7BgT,EAAK,eAAe,UAAU,aAAc2Z,IAAc,OAAO,EAErE,MAAMpZ,EAAa,UAAYoZ,EACzB3W,EAAWhW,EAAMuT,CAAS,EAC5ByC,GACA3H,EAAM,WAAW,IAAM2H,EAAStC,EAAOD,GAAiBC,CAAK,CAAC,CAAC,CAEvE,CACA,MAAMkZ,WAAqB7Z,CAAQ,CAC/B,OAAQ,CACJ,KAAM,CAAE,QAAAlJ,GAAY,KAAK,KACpBA,IAEL,KAAK,QAAUgjB,GAAMhjB,EAAS,CAACijB,EAAUC,KACrCL,GAAiB,KAAK,KAAMK,EAAY,OAAO,EACvCC,GAAaN,GAAiB,KAAK,KAAMM,EAAU,KAAK,EACnE,EACT,CACI,SAAU,CAAA,CACd,CCtBA,MAAMC,WAAqBla,CAAQ,CAC/B,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,SAAW,EACxB,CACI,SAAU,CACN,IAAIma,EAAiB,GAOrB,GAAI,CACAA,EAAiB,KAAK,KAAK,QAAQ,QAAQ,gBAAgB,CACvE,MACkB,CACNA,EAAiB,EAC7B,CACY,CAACA,GAAkB,CAAC,KAAK,KAAK,iBAElC,KAAK,KAAK,eAAe,UAAU,aAAc,EAAI,EACrD,KAAK,SAAW,GACxB,CACI,QAAS,CACD,CAAC,KAAK,UAAY,CAAC,KAAK,KAAK,iBAEjC,KAAK,KAAK,eAAe,UAAU,aAAc,EAAK,EACtD,KAAK,SAAW,GACxB,CACI,OAAQ,CACJ,KAAK,QAAUtT,GAAKtG,GAAY,KAAK,KAAK,QAAS,QAAS,IAAM,KAAK,QAAO,CAAE,EAAGA,GAAY,KAAK,KAAK,QAAS,OAAQ,IAAM,KAAK,OAAM,CAAE,CAAC,CACtJ,CACI,SAAU,CAAA,CACd,CClCA,SAAS6Z,GAAiBna,EAAMU,EAAOiZ,EAAW,CAC9C,KAAM,CAAE,MAAA3sB,CAAK,EAAKgT,EAClB,GAAIA,EAAK,mBAAmB,mBAAqBA,EAAK,QAAQ,SAC1D,OAEAA,EAAK,gBAAkBhT,EAAM,UAC7BgT,EAAK,eAAe,UAAU,WAAY2Z,IAAc,OAAO,EAEnE,MAAMpZ,EAAa,SAAWoZ,IAAc,MAAQ,GAAKA,GACnD3W,EAAWhW,EAAMuT,CAAS,EAC5ByC,GACA3H,EAAM,WAAW,IAAM2H,EAAStC,EAAOD,GAAiBC,CAAK,CAAC,CAAC,CAEvE,CACA,MAAM0Z,WAAqBra,CAAQ,CAC/B,OAAQ,CACJ,KAAM,CAAE,QAAAlJ,GAAY,KAAK,KACpBA,IAEL,KAAK,QAAUwjB,GAAMxjB,EAAS,CAACijB,EAAUC,KACrCI,GAAiB,KAAK,KAAMJ,EAAY,OAAO,EACxC,CAACC,EAAU,CAAE,QAAAM,CAAO,IAAOH,GAAiB,KAAK,KAAMH,EAAUM,EAAU,MAAQ,QAAQ,GACnG,CAAE,gBAAiB,KAAK,KAAK,MAAM,eAAe,CAAE,EAC/D,CACI,SAAU,CAAA,CACd,CCxBA,MAAMC,GAAoB,IAAI,QAMxBC,GAAY,IAAI,QAChBC,GAAwBC,GAAU,CACpC,MAAM1X,EAAWuX,GAAkB,IAAIG,EAAM,MAAM,EACnD1X,GAAYA,EAAS0X,CAAK,CAC9B,EACMC,GAA4BC,GAAY,CAC1CA,EAAQ,QAAQH,EAAoB,CACxC,EACA,SAASI,GAAyB,CAAE,KAAAC,EAAM,GAAG3f,GAAW,CACpD,MAAM4f,EAAaD,GAAQ,SAItBN,GAAU,IAAIO,CAAU,GACzBP,GAAU,IAAIO,EAAY,EAAE,EAEhC,MAAMC,EAAgBR,GAAU,IAAIO,CAAU,EACxCpwB,EAAM,KAAK,UAAUwQ,CAAO,EAKlC,OAAK6f,EAAcrwB,CAAG,IAClBqwB,EAAcrwB,CAAG,EAAI,IAAI,qBAAqBgwB,GAA0B,CAAE,KAAAG,EAAM,GAAG3f,EAAS,GAEzF6f,EAAcrwB,CAAG,CAC5B,CACA,SAASswB,GAAoB3yB,EAAS6S,EAAS6H,EAAU,CACrD,MAAMkY,EAA4BL,GAAyB1f,CAAO,EAClE,OAAAof,GAAkB,IAAIjyB,EAAS0a,CAAQ,EACvCkY,EAA0B,QAAQ5yB,CAAO,EAClC,IAAM,CACTiyB,GAAkB,OAAOjyB,CAAO,EAChC4yB,EAA0B,UAAU5yB,CAAO,CAC9C,CACL,CC3CA,MAAM6yB,GAAiB,CACnB,KAAM,EACN,IAAK,CACT,EACA,MAAMC,WAAsBrb,CAAQ,CAChC,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,eAAiB,GACtB,KAAK,SAAW,EACxB,CACI,eAAgB,CACZ,KAAK,QAAS,EACd,KAAM,CAAE,SAAAsb,EAAW,CAAE,CAAA,EAAK,KAAK,KAAK,SAAU,EACxC,CAAE,KAAAP,EAAM,OAAQQ,EAAY,OAAAC,EAAS,OAAQ,KAAAC,CAAI,EAAKH,EACtDlgB,EAAU,CACZ,KAAM2f,EAAOA,EAAK,QAAU,OAC5B,WAAAQ,EACA,UAAW,OAAOC,GAAW,SAAWA,EAASJ,GAAeI,CAAM,CACzE,EACKE,EAAwBf,GAAU,CACpC,KAAM,CAAE,eAAAgB,CAAc,EAAKhB,EAW3B,GAPI,KAAK,WAAagB,IAEtB,KAAK,SAAWA,EAKZF,GAAQ,CAACE,GAAkB,KAAK,gBAChC,OAEKA,IACL,KAAK,eAAiB,IAEtB,KAAK,KAAK,gBACV,KAAK,KAAK,eAAe,UAAU,cAAeA,CAAc,EAMpE,KAAM,CAAE,gBAAAC,EAAiB,gBAAAC,CAAe,EAAK,KAAK,KAAK,SAAU,EAC3D5Y,EAAW0Y,EAAiBC,EAAkBC,EACpD5Y,GAAYA,EAAS0X,CAAK,CAC7B,EACD,OAAOO,GAAoB,KAAK,KAAK,QAAS9f,EAASsgB,CAAoB,CACnF,CACI,OAAQ,CACJ,KAAK,cAAe,CAC5B,CACI,QAAS,CACL,GAAI,OAAO,qBAAyB,IAChC,OACJ,KAAM,CAAE,MAAAzuB,EAAO,UAAA3E,CAAW,EAAG,KAAK,KACR,CAAC,SAAU,SAAU,MAAM,EAAE,KAAKwzB,GAAyB7uB,EAAO3E,CAAS,CAAC,GAElG,KAAK,cAAe,CAEhC,CACI,SAAU,CAAA,CACd,CACA,SAASwzB,GAAyB,CAAE,SAAAR,EAAW,EAAI,EAAE,CAAE,SAAUS,EAAe,EAAI,EAAG,GAAI,CACvF,OAAQ7uB,GAASouB,EAASpuB,CAAI,IAAM6uB,EAAa7uB,CAAI,CACzD,CChEA,MAAM8uB,GAAoB,CACtB,OAAQ,CACJ,QAASX,EACZ,EACD,IAAK,CACD,QAAShB,EACZ,EACD,MAAO,CACH,QAASH,EACZ,EACD,MAAO,CACH,QAASL,EACZ,CACL,ECfMhpB,GAAS,CACX,OAAQ,CACJ,eAAgB4oB,GAChB,cAAAhoB,EACH,CACL,ECPMwqB,GAAuB,CAAE,QAAS,IAAM,EACxCC,GAA2B,CAAE,QAAS,EAAO,ECCnD,SAASC,IAA2B,CAEhC,GADAD,GAAyB,QAAU,GAC/B,EAACr0B,GAEL,GAAI,OAAO,WAAY,CACnB,MAAMu0B,EAAmB,OAAO,WAAW,0BAA0B,EAC/DC,EAA8B,IAAOJ,GAAqB,QAAUG,EAAiB,QAC3FA,EAAiB,YAAYC,CAA2B,EACxDA,EAA6B,CACrC,MAEQJ,GAAqB,QAAU,EAEvC,CChBA,MAAMK,GAAqB,IAAI,QCE/B,SAASC,GAA4Bh0B,EAASiV,EAAMC,EAAM,CACtD,UAAW7S,KAAO4S,EAAM,CACpB,MAAMgf,EAAYhf,EAAK5S,CAAG,EACpB6xB,EAAYhf,EAAK7S,CAAG,EAC1B,GAAI2J,EAAcioB,CAAS,EAKvBj0B,EAAQ,SAASqC,EAAK4xB,CAAS,UAE1BjoB,EAAckoB,CAAS,EAK5Bl0B,EAAQ,SAASqC,EAAKkO,EAAY0jB,EAAW,CAAE,MAAOj0B,CAAO,CAAE,CAAC,UAE3Dk0B,IAAcD,EAMnB,GAAIj0B,EAAQ,SAASqC,CAAG,EAAG,CACvB,MAAM8xB,EAAgBn0B,EAAQ,SAASqC,CAAG,EACtC8xB,EAAc,YAAc,GAC5BA,EAAc,KAAKF,CAAS,EAEtBE,EAAc,aACpBA,EAAc,IAAIF,CAAS,CAE/C,KACiB,CACD,MAAMG,EAAcp0B,EAAQ,eAAeqC,CAAG,EAC9CrC,EAAQ,SAASqC,EAAKkO,EAAY6jB,IAAgB,OAAYA,EAAcH,EAAW,CAAE,MAAOj0B,CAAS,CAAA,CAAC,CAC1H,CAEA,CAEI,UAAWqC,KAAO6S,EACVD,EAAK5S,CAAG,IAAM,QACdrC,EAAQ,YAAYqC,CAAG,EAE/B,OAAO4S,CACX,CCpCA,MAAMof,GAAoB,CACtB,iBACA,oBACA,SACA,sBACA,gBACA,uBACA,yBACJ,EAKA,MAAMC,EAAc,CAQhB,4BAA4BC,EAAQC,EAAYC,EAAgB,CAC5D,MAAO,CAAC,CAAA,CAEZ,YAAY,CAAE,OAAAx0B,EAAQ,MAAAyE,EAAO,gBAAAiD,EAAiB,oBAAAC,EAAqB,sBAAA8sB,EAAuB,YAAA7tB,CAAa,EAAGgM,EAAU,GAAI,CAKpH,KAAK,QAAU,KAIV,KAAA,aAAe,IAIpB,KAAK,cAAgB,GACrB,KAAK,sBAAwB,GAQ7B,KAAK,mBAAqB,KAMrB,KAAA,WAAa,IAClB,KAAK,iBAAmB8hB,GAIxB,KAAK,SAAW,CAAC,EAKZ,KAAA,uBAAyB,IAM9B,KAAK,iBAAmB,CAAC,EAIzB,KAAK,OAAS,CAAC,EAMf,KAAK,uBAAyB,CAAC,EAC/B,KAAK,aAAe,IAAM,KAAK,OAAO,SAAU,KAAK,YAAY,EACjE,KAAK,OAAS,IAAM,CACX,KAAK,UAEV,KAAK,aAAa,EACb,KAAA,eAAe,KAAK,QAAS,KAAK,YAAa,KAAK,MAAM,MAAO,KAAK,UAAU,EACzF,EACA,KAAK,kBAAoB,EACzB,KAAK,eAAiB,IAAM,CAClB,MAAAjI,EAAM1N,GAAK,IAAI,EACjB,KAAK,kBAAoB0N,IACzB,KAAK,kBAAoBA,EACzB3Z,EAAM,OAAO,KAAK,OAAQ,GAAO,EAAI,EAE7C,EACM,KAAA,CAAE,aAAAvI,EAAc,YAAAoqB,CAAA,EAAgB/tB,EACtC,KAAK,aAAe2D,EACf,KAAA,WAAa,CAAE,GAAGA,CAAa,EACpC,KAAK,cAAgB9F,EAAM,QAAU,CAAE,GAAG8F,CAAA,EAAiB,CAAC,EAC5D,KAAK,YAAcoqB,EACnB,KAAK,OAAS30B,EACd,KAAK,MAAQyE,EACb,KAAK,gBAAkBiD,EACvB,KAAK,MAAQ1H,EAASA,EAAO,MAAQ,EAAI,EACzC,KAAK,oBAAsB2H,EAC3B,KAAK,QAAUiL,EACV,KAAA,sBAAwB,EAAQ6hB,EAChC,KAAA,sBAAwBvuB,GAAsBzB,CAAK,EACnD,KAAA,cAAgB0B,GAAc1B,CAAK,EACpC,KAAK,gBACA,KAAA,oBAAsB,KAE/B,KAAK,uBAAyB,GAAQzE,GAAUA,EAAO,SAWjD,KAAA,CAAE,WAAA2Q,EAAY,GAAGikB,CAAoB,EAAI,KAAK,4BAA4BnwB,EAAO,CAAC,EAAG,IAAI,EAC/F,UAAWrC,KAAOwyB,EAAqB,CAC7B,MAAAhqB,EAAQgqB,EAAoBxyB,CAAG,EACjCmI,EAAanI,CAAG,IAAM,QAAa2J,EAAcnB,CAAK,GACtDA,EAAM,IAAIL,EAAanI,CAAG,EAAG,EAAK,CACtC,CACJ,CAEJ,MAAM2E,EAAU,CACZ,KAAK,QAAUA,EACI+sB,GAAA,IAAI/sB,EAAU,IAAI,EACjC,KAAK,YAAc,CAAC,KAAK,WAAW,UAC/B,KAAA,WAAW,MAAMA,CAAQ,EAE9B,KAAK,QAAU,KAAK,eAAiB,CAAC,KAAK,wBAC3C,KAAK,sBAAwB,KAAK,OAAO,gBAAgB,IAAI,GAE5D,KAAA,OAAO,QAAQ,CAAC6D,EAAOxI,IAAQ,KAAK,kBAAkBA,EAAKwI,CAAK,CAAC,EACjE8oB,GAAyB,SACDC,GAAA,EAExB,KAAA,mBACD,KAAK,sBAAwB,QACvB,GACA,KAAK,sBAAwB,SACzB,GACAF,GAAqB,QAI/B,KAAK,QACA,KAAA,OAAO,SAAS,IAAI,IAAI,EACjC,KAAK,OAAO,KAAK,MAAO,KAAK,eAAe,CAAA,CAEhD,SAAU,CACD,KAAA,YAAc,KAAK,WAAW,QAAQ,EAC3CnV,EAAY,KAAK,YAAY,EAC7BA,EAAY,KAAK,MAAM,EACvB,KAAK,mBAAmB,QAASuW,GAAWA,GAAQ,EACpD,KAAK,mBAAmB,MAAM,EACzB,KAAA,uBAAyB,KAAK,sBAAsB,EACzD,KAAK,QAAU,KAAK,OAAO,SAAS,OAAO,IAAI,EACpC,UAAAzyB,KAAO,KAAK,OACd,KAAA,OAAOA,CAAG,EAAE,MAAM,EAEhB,UAAAA,KAAO,KAAK,SAAU,CACvB,MAAA0yB,EAAU,KAAK,SAAS1yB,CAAG,EAC7B0yB,IACAA,EAAQ,QAAQ,EAChBA,EAAQ,UAAY,GACxB,CAEJ,KAAK,QAAU,IAAA,CAEnB,kBAAkB1yB,EAAKwI,EAAO,CACtB,KAAK,mBAAmB,IAAIxI,CAAG,GAC1B,KAAA,mBAAmB,IAAIA,CAAG,EAAE,EAE/B,MAAA2yB,EAAmB7qB,EAAe,IAAI9H,CAAG,EAC3C2yB,GAAoB,KAAK,iBACzB,KAAK,gBAAgB,EAEzB,MAAMC,EAAiBpqB,EAAM,GAAG,SAAWupB,GAAgB,CAClD,KAAA,aAAa/xB,CAAG,EAAI+xB,EACzB,KAAK,MAAM,UAAYrhB,EAAM,UAAU,KAAK,YAAY,EACpDiiB,GAAoB,KAAK,aACzB,KAAK,WAAW,iBAAmB,GACvC,CACH,EACKE,EAAwBrqB,EAAM,GAAG,gBAAiB,KAAK,cAAc,EACvE,IAAAsqB,EACA,OAAO,wBACPA,EAAkB,OAAO,sBAAsB,KAAM9yB,EAAKwI,CAAK,GAE9D,KAAA,mBAAmB,IAAIxI,EAAK,IAAM,CACpB4yB,EAAA,EACOC,EAAA,EAClBC,GACgBA,EAAA,EAChBtqB,EAAM,OACNA,EAAM,KAAK,CAAA,CAClB,CAAA,CAEL,iBAAiBuqB,EAAO,CAIhB,MAAA,CAAC,KAAK,SACN,CAAC,KAAK,0BACN,KAAK,OAASA,EAAM,KACb,EAEJ,KAAK,yBAAyB,KAAK,QAASA,EAAM,OAAO,CAAA,CAEpE,gBAAiB,CACb,IAAI/yB,EAAM,YACV,IAAKA,KAAOoC,EAAoB,CACtB,MAAA4wB,EAAoB5wB,EAAmBpC,CAAG,EAChD,GAAI,CAACgzB,EACD,SACJ,KAAM,CAAE,UAAAC,EAAW,QAASC,CAAuB,EAAAF,EAY/C,GARA,CAAC,KAAK,SAAShzB,CAAG,GAClBkzB,GACAD,EAAU,KAAK,KAAK,IACpB,KAAK,SAASjzB,CAAG,EAAI,IAAIkzB,EAAmB,IAAI,GAKhD,KAAK,SAASlzB,CAAG,EAAG,CACd,MAAA0yB,EAAU,KAAK,SAAS1yB,CAAG,EAC7B0yB,EAAQ,UACRA,EAAQ,OAAO,GAGfA,EAAQ,MAAM,EACdA,EAAQ,UAAY,GACxB,CACJ,CACJ,CAEJ,cAAe,CACX,KAAK,MAAM,KAAK,YAAa,KAAK,aAAc,KAAK,KAAK,CAAA,CAO9D,oBAAqB,CACV,OAAA,KAAK,QACN,KAAK,2BAA2B,KAAK,QAAS,KAAK,KAAK,EACxDva,EAAU,CAAA,CAEpB,eAAenY,EAAK,CACT,OAAA,KAAK,aAAaA,CAAG,CAAA,CAEhC,eAAeA,EAAKwI,EAAO,CAClB,KAAA,aAAaxI,CAAG,EAAIwI,CAAA,CAM7B,OAAOnG,EAAOiD,EAAiB,EACvBjD,EAAM,mBAAqB,KAAK,MAAM,oBACtC,KAAK,eAAe,EAExB,KAAK,UAAY,KAAK,MACtB,KAAK,MAAQA,EACb,KAAK,oBAAsB,KAAK,gBAChC,KAAK,gBAAkBiD,EAIvB,QAAS,EAAI,EAAG,EAAI0sB,GAAkB,OAAQ,IAAK,CACzC,MAAAhyB,EAAMgyB,GAAkB,CAAC,EAC3B,KAAK,uBAAuBhyB,CAAG,IAC1B,KAAA,uBAAuBA,CAAG,EAAE,EAC1B,OAAA,KAAK,uBAAuBA,CAAG,GAE1C,MAAMmzB,EAAgB,KAAOnzB,EACvBozB,EAAW/wB,EAAM8wB,CAAY,EAC/BC,IACA,KAAK,uBAAuBpzB,CAAG,EAAI,KAAK,GAAGA,EAAKozB,CAAQ,EAC5D,CAEC,KAAA,iBAAmBzB,GAA4B,KAAM,KAAK,4BAA4BtvB,EAAO,KAAK,UAAW,IAAI,EAAG,KAAK,gBAAgB,EAC1I,KAAK,wBACL,KAAK,uBAAuB,CAChC,CAEJ,UAAW,CACP,OAAO,KAAK,KAAA,CAKhB,WAAWC,EAAM,CACb,OAAO,KAAK,MAAM,SAAW,KAAK,MAAM,SAASA,CAAI,EAAI,MAAA,CAK7D,sBAAuB,CACnB,OAAO,KAAK,MAAM,UAAA,CAEtB,uBAAwB,CACpB,OAAO,KAAK,MAAM,kBAAA,CAEtB,uBAAwB,CACb,OAAA,KAAK,cACN,KACA,KAAK,OACD,KAAK,OAAO,wBACZ,MAAA,CAKd,gBAAgB9B,EAAO,CACb,MAAA6yB,EAAqB,KAAK,sBAAsB,EACtD,GAAIA,EACA,OAAAA,EAAmB,iBACfA,EAAmB,gBAAgB,IAAI7yB,CAAK,EACzC,IAAM6yB,EAAmB,gBAAgB,OAAO7yB,CAAK,CAChE,CAKJ,SAASR,EAAKwI,EAAO,CAEjB,MAAMspB,EAAgB,KAAK,OAAO,IAAI9xB,CAAG,EACrCwI,IAAUspB,IACNA,GACA,KAAK,YAAY9xB,CAAG,EACnB,KAAA,kBAAkBA,EAAKwI,CAAK,EAC5B,KAAA,OAAO,IAAIxI,EAAKwI,CAAK,EAC1B,KAAK,aAAaxI,CAAG,EAAIwI,EAAM,IAAI,EACvC,CAKJ,YAAYxI,EAAK,CACR,KAAA,OAAO,OAAOA,CAAG,EACtB,MAAMszB,EAAc,KAAK,mBAAmB,IAAItzB,CAAG,EAC/CszB,IACYA,EAAA,EACP,KAAA,mBAAmB,OAAOtzB,CAAG,GAE/B,OAAA,KAAK,aAAaA,CAAG,EACvB,KAAA,2BAA2BA,EAAK,KAAK,WAAW,CAAA,CAKzD,SAASA,EAAK,CACH,OAAA,KAAK,OAAO,IAAIA,CAAG,CAAA,CAE9B,SAASA,EAAKuzB,EAAc,CACxB,GAAI,KAAK,MAAM,QAAU,KAAK,MAAM,OAAOvzB,CAAG,EACnC,OAAA,KAAK,MAAM,OAAOA,CAAG,EAEhC,IAAIwI,EAAQ,KAAK,OAAO,IAAIxI,CAAG,EAC3B,OAAAwI,IAAU,QAAa+qB,IAAiB,SAChC/qB,EAAA0F,EAAYqlB,IAAiB,KAAO,OAAYA,EAAc,CAAE,MAAO,KAAM,EAChF,KAAA,SAASvzB,EAAKwI,CAAK,GAErBA,CAAA,CAOX,UAAUxI,EAAKyJ,EAAQ,CACf,IAAAjB,EAAQ,KAAK,aAAaxI,CAAG,IAAM,QAAa,CAAC,KAAK,QACpD,KAAK,aAAaA,CAAG,EACrB,KAAK,uBAAuB,KAAK,MAAOA,CAAG,GACzC,KAAK,sBAAsB,KAAK,QAASA,EAAK,KAAK,OAAO,EAC9D,OAAuBwI,GAAU,OAC7B,OAAOA,GAAU,WAChBgrB,GAAkBhrB,CAAK,GAAKirB,GAAkBjrB,CAAK,GAEpDA,EAAQ,WAAWA,CAAK,EAEnB,CAACkrB,GAAclrB,CAAK,GAAKia,GAAQ,KAAKhZ,CAAM,IACzCjB,EAAAmrB,GAAkB3zB,EAAKyJ,CAAM,GAEpC,KAAA,cAAczJ,EAAK2J,EAAcnB,CAAK,EAAIA,EAAM,MAAQA,CAAK,GAE/DmB,EAAcnB,CAAK,EAAIA,EAAM,IAAQ,EAAAA,CAAA,CAMhD,cAAcxI,EAAKwI,EAAO,CACjB,KAAA,WAAWxI,CAAG,EAAIwI,CAAA,CAM3B,cAAcxI,EAAK,CACT,KAAA,CAAE,QAAAb,GAAY,KAAK,MACrB,IAAAy0B,EACJ,GAAI,OAAOz0B,GAAY,UAAY,OAAOA,GAAY,SAAU,CAC5D,MAAM0S,EAAU7F,GAAwB,KAAK,MAAO7M,EAAS,KAAK,iBAAiB,MAAM,EACrF0S,IACA+hB,EAAmB/hB,EAAQ7R,CAAG,EAClC,CAKA,GAAAb,GAAWy0B,IAAqB,OACzB,OAAAA,EAMX,MAAMnqB,EAAS,KAAK,uBAAuB,KAAK,MAAOzJ,CAAG,EAC1D,OAAIyJ,IAAW,QAAa,CAACE,EAAcF,CAAM,EACtCA,EAKJ,KAAK,cAAczJ,CAAG,IAAM,QAC/B4zB,IAAqB,OACnB,OACA,KAAK,WAAW5zB,CAAG,CAAA,CAE7B,GAAG4V,EAAWyC,EAAU,CACpB,OAAK,KAAK,OAAOzC,CAAS,IACtB,KAAK,OAAOA,CAAS,EAAI,IAAIkT,IAE1B,KAAK,OAAOlT,CAAS,EAAE,IAAIyC,CAAQ,CAAA,CAE9C,OAAOzC,KAActS,EAAM,CACnB,KAAK,OAAOsS,CAAS,GACrB,KAAK,OAAOA,CAAS,EAAE,OAAO,GAAGtS,CAAI,CACzC,CAER,CC7cA,MAAMuwB,WAAyB5B,EAAc,CACzC,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,iBAAmB6B,EAChC,CACI,yBAAyBvhB,EAAGC,EAAG,CAM3B,OAAOD,EAAE,wBAAwBC,CAAC,EAAI,EAAI,EAAI,EACtD,CACI,uBAAuBnQ,EAAOrC,EAAK,CAC/B,OAAOqC,EAAM,MACPA,EAAM,MAAMrC,CAAG,EACf,MACd,CACI,2BAA2BA,EAAK,CAAE,KAAAgJ,EAAM,MAAAjK,CAAK,EAAI,CAC7C,OAAOiK,EAAKhJ,CAAG,EACf,OAAOjB,EAAMiB,CAAG,CACxB,CACI,wBAAyB,CACjB,KAAK,oBACL,KAAK,kBAAmB,EACxB,OAAO,KAAK,mBAEhB,KAAM,CAAE,SAAA/B,GAAa,KAAK,MACtB0L,EAAc1L,CAAQ,IACtB,KAAK,kBAAoBA,EAAS,GAAG,SAAWiN,GAAW,CACnD,KAAK,UACL,KAAK,QAAQ,YAAc,GAAGA,CAAM,GAExD,CAAa,EAEb,CACA,CCvCA,SAAS6oB,GAAWp2B,EAAS,CAAE,MAAAoB,EAAO,KAAAiK,CAAM,EAAEc,EAAWoV,EAAY,CACjE,OAAO,OAAOvhB,EAAQ,MAAOoB,EAAOmgB,GAAcA,EAAW,oBAAoBpV,CAAS,CAAC,EAE3F,UAAW9J,KAAOgJ,EACdrL,EAAQ,MAAM,YAAYqC,EAAKgJ,EAAKhJ,CAAG,CAAC,CAEhD,CCCA,SAASg0B,GAAiBr2B,EAAS,CAC/B,OAAO,OAAO,iBAAiBA,CAAO,CAC1C,CACA,MAAMs2B,WAA0BJ,EAAiB,CAC7C,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,KAAO,OACZ,KAAK,eAAiBE,EAC9B,CACI,sBAAsBpvB,EAAU3E,EAAK,CACjC,GAAI8H,EAAe,IAAI9H,CAAG,EACtB,OAAO,KAAK,YAAY,aAClBk0B,GAAsBl0B,CAAG,EACzBm0B,GAAmBxvB,EAAU3E,CAAG,EAErC,CACD,MAAMo0B,EAAgBJ,GAAiBrvB,CAAQ,EACzC6D,GAASZ,GAAkB5H,CAAG,EAC9Bo0B,EAAc,iBAAiBp0B,CAAG,EAClCo0B,EAAcp0B,CAAG,IAAM,EAC7B,OAAO,OAAOwI,GAAU,SAAWA,EAAM,KAAM,EAAGA,CAC9D,CACA,CACI,2BAA2B7D,EAAU,CAAE,mBAAA6V,GAAsB,CACzD,OAAOH,GAAmB1V,EAAU6V,CAAkB,CAC9D,CACI,MAAM+X,EAAapqB,EAAc9F,EAAO,CACpCyG,GAAgBypB,EAAapqB,EAAc9F,EAAM,iBAAiB,CAC1E,CACI,4BAA4BA,EAAO3E,EAAW+G,EAAe,CACzD,OAAO6H,GAA4BjK,EAAO3E,EAAW+G,CAAa,CAC1E,CACA,CCpCA,MAAM4vB,GAAsB,IAAI,IAAI,CAChC,gBACA,kBACA,eACA,mBACA,aACA,WACA,oBACA,eACA,cACA,aACA,UACA,UACA,eACA,mBACA,mBACA,eACA,cACA,UACA,oBACA,aACA,cACA,aACA,cACJ,CAAC,ECvBD,SAASC,GAAU32B,EAAS40B,EAAagC,EAAYrV,EAAY,CAC7D6U,GAAWp2B,EAAS40B,EAAa,OAAWrT,CAAU,EACtD,UAAWlf,KAAOuyB,EAAY,MAC1B50B,EAAQ,aAAc02B,GAAoB,IAAIr0B,CAAG,EAAuBA,EAAnB4E,GAAY5E,CAAG,EAASuyB,EAAY,MAAMvyB,CAAG,CAAC,CAE3G,CCCA,MAAMw0B,WAAyBX,EAAiB,CAC5C,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,KAAO,MACZ,KAAK,SAAW,GAChB,KAAK,2BAA6B1b,CAC1C,CACI,uBAAuB9V,EAAOrC,EAAK,CAC/B,OAAOqC,EAAMrC,CAAG,CACxB,CACI,sBAAsB2E,EAAU3E,EAAK,CACjC,GAAI8H,EAAe,IAAI9H,CAAG,EAAG,CACzB,MAAMy0B,EAAcC,GAAoB10B,CAAG,EAC3C,OAAOy0B,GAAcA,EAAY,SAAW,CACxD,CACQ,OAAAz0B,EAAOq0B,GAAoB,IAAIr0B,CAAG,EAAuBA,EAAnB4E,GAAY5E,CAAG,EAC9C2E,EAAS,aAAa3E,CAAG,CACxC,CACI,4BAA4BqC,EAAO3E,EAAW+G,EAAe,CACzD,OAAO6H,GAA4BjK,EAAO3E,EAAW+G,CAAa,CAC1E,CACI,MAAM8tB,EAAapqB,EAAc9F,EAAO,CACpCwI,GAAc0nB,EAAapqB,EAAc,KAAK,SAAU9F,EAAM,kBAAmBA,EAAM,KAAK,CACpG,CACI,eAAesC,EAAU4tB,EAAazoB,EAAWoV,EAAY,CACzDoV,GAAU3vB,EAAU4tB,EAAazoB,EAAWoV,CAAU,CAC9D,CACI,MAAMva,EAAU,CACZ,KAAK,SAAWwG,GAASxG,EAAS,OAAO,EACzC,MAAM,MAAMA,CAAQ,CAC5B,CACA,CCpCA,MAAMgwB,GAAyB,CAACzvB,EAAWsL,IAChC7E,GAAezG,CAAS,EACzB,IAAIsvB,GAAiBhkB,CAAO,EAC5B,IAAIyjB,GAAkBzjB,EAAS,CAC7B,gBAAiBtL,IAAcpD,EAAQ,QACnD,CAAS,ECHH8yB,GAAsC9mB,GAA6B,CACrE,GAAGuD,GACH,GAAG+f,GACH,GAAGlrB,GACH,GAAGD,EACP,EAAG0uB,EAAsB,ECTnBE,GAAuB3xB,GAA8B0xB,EAAqB,ECChF,SAASE,GAAcrwB,EAAe,CAClCA,EAAc,OAAO,QAAS+D,GAAUA,EAAM,MAAM,CACxD,CACA,SAASusB,GAAYtwB,EAAeuwB,EAAe,CACxB,CAAC,GAAGA,CAAa,EAAE,QAAS,EACpC,QAASh1B,GAAQ,CAC5B,MAAM6R,EAAUpN,EAAc,WAAWzE,CAAG,EAC5C6R,GAAWzD,GAAU3J,EAAeoN,CAAO,EACvCpN,EAAc,iBACdA,EAAc,gBAAgB,QAASjE,GAAU,CAC7Cu0B,GAAYv0B,EAAOw0B,CAAa,CAChD,CAAa,CAEb,CAAK,CACL,CACA,SAASC,GAAUxwB,EAAewH,EAAY,CAC1C,GAAI,MAAM,QAAQA,CAAU,EACxB,OAAO8oB,GAAYtwB,EAAewH,CAAU,EAE3C,GAAI,OAAOA,GAAe,SAC3B,OAAO8oB,GAAYtwB,EAAe,CAACwH,CAAU,CAAC,EAG9CmC,GAAU3J,EAAewH,CAAU,CAE3C,CAIA,SAASipB,IAAoB,CAQzB,MAAMC,EAAc,IAAI,IAClBC,EAAW,CACb,UAAU3wB,EAAe,CACrB,OAAA0wB,EAAY,IAAI1wB,CAAa,EACtB,IAAM,KAAK0wB,EAAY,OAAO1wB,CAAa,CACrD,EACD,MAAMwH,EAAYkF,EAAoB,CAElC,MAAME,EAAa,CAAE,EACrB,OAAA8jB,EAAY,QAAS1wB,GAAkB,CACnC4M,EAAW,KAAKoB,GAAqBhO,EAAewH,EAAY,CAC5D,mBAAAkF,CACpB,CAAiB,CAAC,CAClB,CAAa,EACM,QAAQ,IAAIE,CAAU,CAChC,EACD,IAAIpF,EAAY,CAEZ,OAAOkpB,EAAY,QAAS1wB,GAAkB,CAC1CwwB,GAAUxwB,EAAewH,CAAU,CACnD,CAAa,CACJ,EACD,MAAO,CACHkpB,EAAY,QAAS1wB,GAAkB,CACnCqwB,GAAcrwB,CAAa,CAC3C,CAAa,CACJ,EACD,OAAQ,CAEJ,MAAO,IAAM,CAET2wB,EAAS,KAAM,CAClB,CACJ,CACJ,EACD,OAAOA,CACX,CC5CA,SAASC,IAAuB,CAC5B,MAAMD,EAAWv4B,GAAYq4B,EAAiB,EAC9C,OAAAh4B,GAA0Bk4B,EAAS,MAAO,EAAE,EACrCA,CACX,CACK,MAACE,GAAeD","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131]}